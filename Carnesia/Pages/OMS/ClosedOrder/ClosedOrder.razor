@page "/closed-orders"

@using Carnesia.Domain.OMS.ClosedOrder
@using Carnesia.Shared.OMS.ClosedOrder
@using Carnesia.Domain.OMS.PendingOrder
@inject IDialogService DialogService
@inject IClosedOrder _closedOrder
@inject IPendingOrder _pendingOrder
@inject ISnackbar Snackbar
@inject IJSRuntime IJS

<MudPaper Class="px-3 py-16 ma-2">
	<MudContainer Fixed="true">
		<MudGrid Class="align-baseline mb-5">
			<MudItem lg="2" md="4">
				<MudTextField @bind-Value="OrderFilter.trnCode" Label="Order Id" Variant="Variant.Text" />
			</MudItem>
			<MudItem lg="2" md="4">
				<MudTextField @bind-Value="OrderFilter.customerName" Label="Customer Name" Variant="Variant.Text" />
			</MudItem>
			<MudItem lg="2" md="4">
				<MudTextField @bind-Value="OrderFilter.phoneNumber" Label="Phone Number" Variant="Variant.Text" />
			</MudItem>
			<MudItem lg="2" md="4">
				<MudSelect @bind-Value="OrderFilter.area" Label="Shipphing Area" AnchorOrigin="Origin.BottomCenter">
					<MudSelectItem Value="@("Inside Dhaka")" />
					<MudSelectItem Value="@("Dhaka Suburb")" />
					<MudSelectItem Value="@("Outside Dhaka")" />
					<MudSelectItem Value="@("Inside CTG City")" />
					<MudSelectItem Value="@("Outside CTG City")" />
				</MudSelect>
			</MudItem>
			<MudItem lg="2" md="4">
				<MudSelect @bind-Value="OrderFilter.statusId" Label="Status" AnchorOrigin="Origin.BottomCenter">
					<MudSelectItem Value="23">Delivered</MudSelectItem>
					<MudSelectItem Value="16">Returned</MudSelectItem>
					<MudSelectItem Value="15">Cancelled</MudSelectItem>
				</MudSelect>
			</MudItem>
			<MudItem lg="2" md="4">
				<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="GetOrders">Filter</MudButton>
			</MudItem>
		</MudGrid>

		<MudGrid Class="justify-center align-baseline mb-5">
			<MudItem md="3">
				<MudSelect @bind-Value="AssignAgent.agentId" Label="Select Agent" AnchorOrigin="Origin.BottomCenter">
					@foreach (var item in Agents)
					{
						<MudSelectItem Value="item.id">@item.name</MudSelectItem>
					}
				</MudSelect>
			</MudItem>
			<MudItem md="3">
				<MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="String.IsNullOrEmpty(AssignAgent.agentId) || SelectedItems.Count <= 0" OnClick="AssignagentSubmit">Assign</MudButton>
			</MudItem>
		</MudGrid>

		<div class="d-flex justify-end mb-5">
			<MudButton Variant="Variant.Filled" Color="Color.Success">Download CSV</MudButton>
		</div>

		<MudTable RowsPerPage="25" Items="@Elements" Hover="true" MultiSelection="true" @bind-SelectedItems="@SelectedItems" HorizontalScrollbar="true" Loading="Loading" LoadingProgressColor="Color.Info" >
			<HeaderContent>
				<MudTh></MudTh>
				<MudTh>Tracking</MudTh>
				<MudTh>Order ID</MudTh>
				<MudTh>Order Date</MudTh>
				<MudTh>Amount</MudTh>
				<MudTh>Payment Method</MudTh>
				<MudTh>Payment Status</MudTh>
				<MudTh>To Be Collected</MudTh>
				<MudTh>Customer Name</MudTh>
				<MudTh>Customer Phone</MudTh>
				<MudTh>Shipping Address</MudTh>
				<MudTh>Status</MudTh>
				<MudTh>Assign To</MudTh>
				<MudTh>Action</MudTh>
				<MudTh>Rating</MudTh>
				<MudTh>Print</MudTh>
			</HeaderContent>
			<RowTemplate>
				<MudTd DataLabel="">
					@if (!context.ShowDetails)
					{
						<MudIconButton Icon="@Icons.Material.Filled.Add" aria-label="Show" OnClick="() => ShowBtnPress(context.orderId)" />
					}
					else if (context.ShowDetails)
					{
						<MudIconButton Icon="@Icons.Filled.Minimize" aria-label="Hide" OnClick="() => ShowBtnPress(context.orderId)" />
					}
				</MudTd>
				<MudTd DataLabel="Tracking">@context.trackingCode</MudTd>
				<MudTd DataLabel="Order ID">@context.trnCode</MudTd>
				<MudTd DataLabel="Order Date">@context.orderDate</MudTd>
				<MudTd DataLabel="Amount">@context.amount</MudTd>
				<MudTd DataLabel="Payment Method">@context.paymentMethod</MudTd>
				<MudTd DataLabel="Payment Status">@context.paymentStatus</MudTd>
				<MudTd DataLabel="To Be Collected">@context.tobeCollected</MudTd>
				<MudTd DataLabel="Customer Name">@context.customerName</MudTd>
				<MudTd DataLabel="Customer Phone">@context.phoneNumber</MudTd>
				<MudTd DataLabel="Shipping Address">@context.address</MudTd>
				<MudTd DataLabel="Status">@context.status</MudTd>
				<MudTd DataLabel="Assign To">@context.assignto</MudTd>
				<MudTd DataLabel="Action">
					<MudButton Variant="Variant.Outlined" Color="Color.Warning" OnClick="() => TakeFeedback(context.trnCode)">Take Rating</MudButton>
				</MudTd>
				<MudTd DataLabel="Rating">@context.ratting</MudTd>
				<MudTd DataLabel="Print">
					<MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="() => GotoPrint(context.trnCode)">Invoice</MudButton>
				</MudTd>
			</RowTemplate>
			<ChildRowContent>
				@if (context.ShowDetails)
				{
					<td colspan="16">
						<MudCard Elevation="0">
							<MudCardContent Class="pa-0">
								<MudTable Items="@context.products.orderProducts" Context="DetailsContext" Hover="true" Elevation="0" CustomFooter="true">
									<HeaderContent>
										<MudTh></MudTh>
										<MudTh>Product Code</MudTh>
										<MudTh>SKU</MudTh>
										<MudTh>Product Name</MudTh>
										<MudTh>Quantity</MudTh>
										<MudTh>Price</MudTh>
										<MudTh>Amount</MudTh>
									</HeaderContent>
									<RowTemplate>
										<MudTd DataLabel="">
											@if (!DetailsContext.showComboProducts)
											{
												<MudIconButton Disabled="!DetailsContext.isCombo" Icon="@Icons.Material.Filled.Add" aria-label="Show" OnClick="() => ShowCombos(DetailsContext.productCode, context.products.orderProducts)" />
											}
											else if (DetailsContext.showComboProducts)
											{
												<MudIconButton Disabled="!DetailsContext.isCombo" Icon="@Icons.Filled.Minimize" aria-label="Hide" OnClick="() => ShowCombos(DetailsContext.productCode, context.products.orderProducts)" />
											}
										</MudTd>
										<MudTd DataLabel="Product Code">@DetailsContext.productCode</MudTd>
										<MudTd DataLabel="SKU">@DetailsContext.sku</MudTd>
										<MudTd DataLabel="Product Name">@DetailsContext.productName</MudTd>
										<MudTd DataLabel="Quantity">@DetailsContext.quantity</MudTd>
										<MudTd DataLabel="Price">@DetailsContext.mrp</MudTd>
										<MudTd DataLabel="Amount">@DetailsContext.totalMrp</MudTd>
									</RowTemplate>
									<ChildRowContent>
                                        @if (DetailsContext.showComboProducts)
                                        {
                                            <td colspan="7">
                                                <MudCard Elevation="0">
                                                    <MudCardContent Class="pa-0">
                                                        <MudTable Items="@DetailsContext.combosProducts" Context="ComboContext" Dense="true" Striped="true" Hover="true" Elevation="0" CustomFooter="true">
                                                            <HeaderContent>
                                                                <MudTh>Product Code</MudTh>
                                                                <MudTh>SKU</MudTh>
                                                                <MudTh>Product Name</MudTh>
                                                                <MudTh>Quantity</MudTh>
                                                            </HeaderContent>
                                                            <RowTemplate>
                                                                <MudTd DataLabel="Product Code">@ComboContext.productCode</MudTd>
                                                                <MudTd DataLabel="SKU">@ComboContext.sku</MudTd>
                                                                <MudTd DataLabel="Product Name">@ComboContext.productName</MudTd>
                                                                <MudTd DataLabel="Quantity">@ComboContext.quantity</MudTd>
                                                            </RowTemplate>
                                                        </MudTable>
                                                    </MudCardContent>
                                                </MudCard>
                                            </td>
                                        }
                                    </ChildRowContent>
									<FooterContent>
										<MudTFootRow>
											<MudTd colspan="6" Style="text-align: end;">Total:</MudTd>
											<MudTd colspan="1" Style="text-align: end;">@context.products.total</MudTd>
										</MudTFootRow>
										<MudTFootRow>
											<MudTd colspan="6" Style="text-align: end;">Discount:</MudTd>
											<MudTd colspan="1" Style="text-align: end;">@context.products.discount</MudTd>
										</MudTFootRow>
										<MudTFootRow>
											<MudTd colspan="6" Style="text-align: end;">Shipping Price:</MudTd>
											<MudTd colspan="1" Style="text-align: end;">@context.products.shippingPrice</MudTd>
										</MudTFootRow>
										<MudTFootRow>
											<MudTd colspan="6" Style="text-align: end; font-weight: 600;">Grand Total:</MudTd>
											<MudTd colspan="1" Style="text-align: end; font-weight: 600;">@context.products.grandTotal</MudTd>
										</MudTFootRow>
									</FooterContent>
								</MudTable>
							</MudCardContent>
						</MudCard>
					</td>
				}
			</ChildRowContent>
			<PagerContent>
				<MudTablePager />
			</PagerContent>
		</MudTable>

	</MudContainer>
</MudPaper>

@code {
	// Page On Load
	protected override async Task OnInitializedAsync()
	{
		await GetAgents();
	}

	// Loading
	private bool Loading { get; set; }

	// Table Content
	private List<PendingOrderDTO> Elements = new List<PendingOrderDTO>();
	private HashSet<PendingOrderDTO> SelectedItems = new HashSet<PendingOrderDTO>();

	// Filter
	private ClosedOrderFilterDTO OrderFilter = new ClosedOrderFilterDTO();

	// Get Orders
	private async Task GetOrders()
	{
		Loading = true;
		try
		{
			Elements = await _closedOrder.GetClosedOrders(OrderFilter);
			foreach (var item in Elements)
			{
				item.products.orderProducts.AddRange(item.products.orderCombos);
			}
			Loading = false;
		}
		catch(Exception e)
		{
			Loading = false;
			Console.WriteLine(e.Message);
			Snackbar.Add("Internal Server Error!");
		}
	}

	// Agents
	private List<AgentDTO> Agents = new List<AgentDTO>();

	// Get Agents
	private async Task GetAgents()
	{
		Agents = await _pendingOrder.GetAgents("Agent");
	}

	// Assign Agent
	private AssignAgentDTO AssignAgent = new AssignAgentDTO();

	private async Task AssignagentSubmit()
	{
		var tempOrder = new List<OrderIdsDTO>();
		foreach (var item in SelectedItems)
		{
			tempOrder.Add(new OrderIdsDTO { orderId = item.orderId });
		}
		AssignAgent.orders = tempOrder;
		try
		{
			var result = await _closedOrder.AssignAgent(AssignAgent);

			if (result)
			{
				Snackbar.Add("Agent Assigned Successfully!", Severity.Success);
				await GetOrders();
				return;
			}
			Snackbar.Add("Agent Assigned Failed!", Severity.Error);
		}
		catch (Exception)
		{
			Snackbar.Add("Agent Assigned Failed!", Severity.Error);
		}
	}

	// Show Details
	private void ShowBtnPress(int orderId)
	{
		PendingOrderDTO tmpElements = Elements.First(f => f.orderId == orderId);
		tmpElements.ShowDetails = !tmpElements.ShowDetails;
	}

	// Modal
	private async Task TakeFeedback(string TrnCode)
	{
		var parameters = new DialogParameters();
		parameters.Add("TrnCode", TrnCode);

		var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true };
		var dialog = await DialogService.Show<FeedBackModal>("Customer Feedback", parameters, options).Result;
	}

	// Show Combo Details
	private void ShowCombos(string productCode, List<PendingOrderProductsDTO> products)
	{
		PendingOrderProductsDTO tmpElements = products.First(f => f.productCode == productCode);
		tmpElements.showComboProducts = !tmpElements.showComboProducts;
	}

	// Goto Print
	private async Task GotoPrint(string TRNCODE)
	{
		await IJS.InvokeAsync<object>("open", new object[] { $"/invoice-print-web/{TRNCODE}", "_blank" });
	}
}
