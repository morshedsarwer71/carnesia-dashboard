@page "/place-order"

@using Carnesia.Domain.OMS.PlaceOrder
@using Carnesia.Domain.OMS.Zones
@inject IZones _zones
@inject ISnackbar Snackbar

<MudPaper Class="px-2 py-16 ma-2">
	<MudContainer Fixed="true">
		<MudGrid Class="justify-center mb-5">
			<MudItem md="3">
				<MudSelect T="string" Label="Source" AnchorOrigin="Origin.BottomCenter">
					<MudSelectItem Value="@("FB")" />
					<MudSelectItem Value="@("Phone")" />
					<MudSelectItem Value="@("WhatsApp")" />
				</MudSelect>
			</MudItem>
		</MudGrid>

		<MudText Typo="Typo.h4">Details</MudText>
		<MudDivider />

		<MudGrid Class="justify-center my-5">
			<MudItem md="3">
				<MudGrid>
					<MudItem xs="12">
						<MudAutocomplete T="string" Label="Product" ResetValueOnEmptyText="true" />
					</MudItem>
					<MudItem xs="12" Class="d-flex justify-end">
						<MudButton Variant="Variant.Filled" StartIcon="@Icons.Filled.Add" Color="Color.Primary">Add</MudButton>
					</MudItem>
				</MudGrid>
			</MudItem>
		</MudGrid>

		<MudTable Items="@Elements" Dense="true" Hover="true" CanCancelEdit="true" CommitEditTooltip="Commit Edit" RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues" IsEditRowSwitchingBlocked="true">
			<ToolBarContent>
				<MudText Typo="Typo.h6">Item List</MudText>
			</ToolBarContent>
			<ColGroup>
				<col style="width:50%;" />
				<col />
				<col />
				<col />
			</ColGroup>
			<HeaderContent>
				<MudTh>Product Name</MudTh>
				<MudTh>Quantity</MudTh>
				<MudTh>Price</MudTh>
				<MudTh>Amount</MudTh>
			</HeaderContent>
			<RowTemplate>
				<MudTd DataLabel="Product Name">@context.ProductName</MudTd>
				<MudTd DataLabel="Quantity">@context.QTY</MudTd>
				<MudTd DataLabel="Price">@context.Price</MudTd>
				<MudTd Style="text-align: right;" DataLabel="Amount">@context.Amount</MudTd>
			</RowTemplate>
			<RowEditingTemplate>
				<MudTd DataLabel="Product Name">@context.ProductName</MudTd>
				<MudTd DataLabel="Quantity">
					<MudTextField @bind-Value="@context.QTY" Required />
				</MudTd>
				<MudTd DataLabel="Price">@context.Price</MudTd>
				<MudTd Style="text-align: right;" DataLabel="Amount">@context.Amount</MudTd>
			</RowEditingTemplate>
			<GroupFooterTemplate>
				<MudTh Style="text-align: right;" colspan="4">Total: 500</MudTh>
				<MudTh Style="text-align: right;" colspan="4">Shipping: 500</MudTh>
				<MudTh Style="text-align: right;" colspan="4">Discount: 500</MudTh>
				<MudTh Style="text-align: right;" colspan="4">Coupon Used: 500</MudTh>
				<MudTh Style="text-align: right;" colspan="4">Paid Amount: 500</MudTh>
				<MudTh Style="text-align: right;" colspan="4">To N=Be Collected: 500</MudTh>
			</GroupFooterTemplate>
		</MudTable>

		<MudGrid Class="justify-center my-5">
			<MudItem md="3">
				<MudGrid>
					<MudItem xs="12">
						<MudTextField T="string" Label="Coupon" Variant="Variant.Text" />
					</MudItem>
					<MudItem xs="12" Class="d-flex justify-end">
						<MudButton Variant="Variant.Filled" Color="Color.Primary">Apply</MudButton>
					</MudItem>
				</MudGrid>
			</MudItem>
		</MudGrid>

		<MudGrid Class="align-baseline">
			<MudItem sm="6">
				<MudTextField T="string" Label="Phone or Id" />
			</MudItem>
			<MudItem sm="6">
				<div class="d-flex justify-end align-baseline">
					<MudButton Variant="Variant.Filled" Color="Color.Primary">Add Customer</MudButton>
				</div>
			</MudItem>
		</MudGrid>
		<br />
		<MudDivider />

		<MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
			<MudGrid>
				<MudItem sm="6">
					<MudTextField T="string" Label="Customer Name" />
				</MudItem>
				<MudItem sm="6">
					<MudTextField T="string" Label="Address" />
				</MudItem>
				<MudItem sm="6">
					<MudSelect Value="SelectedDivision" T="int" Label="Division" Immediate="true" AnchorOrigin="Origin.BottomCenter" ValueChanged="(Int32 s) => ChangeDivision(s)">
						<MudSelectItem Value="0">Select Division</MudSelectItem>
						@foreach (var item in Divisions)
						{
							<MudSelectItem Value="item.id">@item.name</MudSelectItem>
						}
					</MudSelect>
				</MudItem>
				<MudItem sm="6">
					<MudSelect Value="SelectedDistrict" T="int" Label="District" Immediate="true" AnchorOrigin="Origin.BottomCenter" ValueChanged="(Int32 s) => ChangeDistrict(s)">
						<MudSelectItem Value="0">Select District</MudSelectItem>
						@foreach (var item in Districts)
						{
							<MudSelectItem Value="item.id">@item.name</MudSelectItem>
						}
					</MudSelect>
				</MudItem>
				<MudItem sm="6">
					<MudSelect @bind-Value="SelectedZone" Label="Zone" Immediate="true" AnchorOrigin="Origin.BottomCenter">
						<MudSelectItem Value="0">Select Zone</MudSelectItem>
						@foreach (var item in Zones)
						{
							<MudSelectItem Value="item.id">@item.zoneName</MudSelectItem>
						}
					</MudSelect>
				</MudItem>
				<MudItem sm="6">
					<MudTextField T="string" Label="Comment" />
				</MudItem>
			</MudGrid>
		</MudForm>

		<br />
		<br />
		<br />
		<br />
		<br />
		<br />
		<br />
		<br />

	</MudContainer>
</MudPaper>

@code {

	// Page On Load
	protected override async Task OnInitializedAsync()
	{
		await GetDivisions();
	}

	// Form Ref
	bool success;
	string[] errors = { };
	MudForm form;

	// Table Content
	private List<ProductTableDTO> Elements = new List<ProductTableDTO>();
	private ProductTableDTO BeforeEdit;

	// Zones
	private List<DivisionDTO> Divisions = new List<DivisionDTO>();
	private IList<DistrictDTO> Districts = new List<DistrictDTO>();
	private IList<ZoneDTO> Zones = new List<ZoneDTO>();

	private int SelectedDivision { get; set; }
	private int SelectedDistrict { get; set; }
	private int SelectedZone { get; set; }

	// Get Divisions
	private async Task GetDivisions()
	{
		Divisions = await _zones.GetDivisions();
	}

	// Division Change
	private async Task ChangeDivision(int i)
	{
		SelectedDivision = i;
		SelectedDistrict = 0;
		SelectedZone = 0;
		Zones.Clear();
		if (i == 0)
		{
			Districts.Clear();
			return;
		}

		var pIndex = Divisions.FindIndex(x => x.id == i);
		Districts = Divisions[pIndex].districts;
	}

	// District Change
	private async Task ChangeDistrict(int i)
	{
		SelectedDistrict = i;
		SelectedZone = 0;

		if (i == 0)
		{
			Zones.Clear();
			return;
		}

		var result = Districts.Where(x => x.id == i).FirstOrDefault();
		var pIndex = Districts.IndexOf(result);
		Zones = Districts[pIndex].zones;
	}


	private void BackupItem(object element)
	{
		BeforeEdit = new()
			{
				QTY = ((ProductTableDTO)element).QTY,
			};
	}

	private void ResetItemToOriginalValues(object element)
	{
		((ProductTableDTO)element).QTY = BeforeEdit.QTY;
	}
}
