@page "/place-order"

@using Carnesia.Domain.OMS.PlaceOrder
@using Carnesia.Domain.Dashboard.GenerateBill
@using Carnesia.Domain.OMS.Zones
@using Carnesia.Shared.Dashboard.GenerateBill
@using Carnesia.Shared.OMS.PlaceOrder
@inject IZones _zones
@inject IPlaceOrder _placeOrder
@inject IGenerateBill _generateBill
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IJSRuntime IJS
@inject ILocalStorageService _storage

<MudPaper Class="px-2 py-16 ma-2">
    <MudContainer Fixed="true">
        <MudGrid Class="justify-center mb-5">
            <MudItem md="3">
                <MudSelect @bind-Value="source" Label="Source" AnchorOrigin="Origin.BottomCenter">
                    <MudSelectItem Value="@("FB")" />
                    <MudSelectItem Value="@("Phone")" />
                    <MudSelectItem Value="@("WhatsApp")" />
                </MudSelect>
            </MudItem>
        </MudGrid>

        <MudDivider />

        <MudGrid Class="justify-center">
            @*<MudItem sm="4">
            <MudAutocomplete Label="Product SKU" SearchFunc="@ProductSKUSearch" @bind-Value="FormData.sku" />
            </MudItem>*@
            <MudItem sm="4">
                <MudTextField Label="SKU" @bind-Value="FormData.sku" />
            </MudItem>
            <MudItem sm="4">
                <MudNumericField @bind-Value="FormData.qty" Min="1" />
            </MudItem>
        </MudGrid>

        <MudGrid Class="justify-center my-5">
            <MudItem sm="8">
                <div class="d-flex justify-end">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="String.IsNullOrEmpty(FormData.sku)" OnClick="AddProduct">Add Product</MudButton>
                </div>
            </MudItem>
        </MudGrid>

        <MudGrid Class="justify-center mt-3">
            <MudItem sm="4">
                <MudTextField Label="Combo/Bogo Code" @bind-Value="BcCode" />
            </MudItem>
            <MudItem sm="4">
                <MudNumericField @bind-Value="BcQuantity" Min="1" />
            </MudItem>
        </MudGrid>

        <MudGrid Class="justify-center my-5">
            <MudItem sm="8">
                <div class="d-flex justify-end">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="String.IsNullOrEmpty(BcCode)" OnClick="AddComboProduct">Add Combo/Bogo</MudButton>
                </div>
            </MudItem>
        </MudGrid>

        @*<MudGrid Class="justify-center">
        <MudItem sm="4">
        <MudTextField Label="Combo SKU" @bind-Value="FormData.sku" />
        </MudItem>
        <MudItem sm="4">
        <MudNumericField @bind-Value="FormData.qty" Min="1" />
        </MudItem>
        </MudGrid>*@

        <MudTable Items="@Elements" Dense="true" Hover="true" Striped="true" CustomFooter="true">
            <HeaderContent>
                <MudTh>SKU</MudTh>
                <MudTh>Product Name</MudTh>
                <MudTh>Quantity</MudTh>
                <MudTh>Price</MudTh>
                <MudTh>Amount</MudTh>
                <MudTh>Action</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="SKU">@(context.sku + context.bcCode)</MudTd>
                    <MudTd DataLabel="Product Name">@context.name</MudTd>
                    <MudTd DataLabel="Quantity">@context.quantity</MudTd>
                    <MudTd DataLabel="Price">@Math.Round(context.salesPrice, 2)</MudTd>
                    <MudTd DataLabel="Amount">@Math.Round(context.salesPrice * context.quantity, 2)</MudTd>
                    <MudTd DataLabel="Action">
                        <MudButton OnClick="() => RemoveProduct(context)">
                            <MudIcon Icon="@Icons.Filled.Delete" Color="Color.Error" />
                        </MudButton>
                    </MudTd>
                </RowTemplate>
                <FooterContent>
                    <MudTFootRow>
                        <MudTd colspan="5" Style="text-align: end;">Total:</MudTd>
                        <MudTd colspan="1" Style="text-align: end;">@subTotal</MudTd>
                    </MudTFootRow>
                    <MudTFootRow>
                        <MudTd colspan="5" Style="text-align: end;">Shipping:</MudTd>
                        <MudTd colspan="1" Style="text-align: end;">@(isFreeOrder ? 0 : shipping)</MudTd>
                    </MudTFootRow>
                    <MudTFootRow>
                        <MudTd colspan="5" Style="text-align: end;">Coupon Used:</MudTd>
                        <MudTd colspan="1" Style="text-align: end;">@Math.Round(discount, 2)</MudTd>
                    </MudTFootRow>
                    <MudTFootRow>
                        <MudTd colspan="5" Style="text-align: end;">Auto Apply:</MudTd>
                        <MudTd colspan="1" Style="text-align: end;">@Math.Round(AutoAmount, 2)</MudTd>
                    </MudTFootRow>
                    <MudTFootRow>
                        <MudTd colspan="5" Style="text-align: end; font-weight: 600;">Grand Total:</MudTd>
                        <MudTd colspan="1" Style="text-align: end; font-weight: 600;">@Math.Round((subTotal + (isFreeOrder ? 0 : shipping) - discount - AutoAmount), 2)</MudTd>
                    </MudTFootRow>
                </FooterContent>
            </MudTable>

            <MudText Typo="Typo.body1" Align="Align.Center" Class="my-3">@AutoText</MudText>

            <MudGrid Class="justify-center">
                <MudItem sm="4">
                    <MudTextField @bind-Value="Coupon.coupon" Label="Coupon" />
                </MudItem>
                <MudItem sm="4">
                    <MudSelect @bind-Value="Coupon.platform" Label="Coupon Platform" AnchorOrigin="Origin.BottomCenter">
                        <MudSelectItem Value="@("App")" />
                        <MudSelectItem Value="@("General")" />
                        <MudSelectItem Value="@("Web")" />
                    </MudSelect>
                </MudItem>
            </MudGrid>

            <MudGrid Class="justify-center">
                <MudItem sm="8">
                    <div class="d-flex justify-end">
                        @if (discount <= 0)
                    {

                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="String.IsNullOrEmpty(Coupon.coupon) || String.IsNullOrEmpty(Coupon.platform)" OnClick="ApplyCoupon">Add Coupon</MudButton>
                    }
                    else
                    {

                        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="ResetCoupon">Reset</MudButton>
                    }
                </div>
            </MudItem>
        </MudGrid>

        <MudGrid Class="align-baseline">
            <MudItem sm="6">
                <MudTextField @bind-Value="customerPhoneNumber" Label="Phone or Id" Immediate="true" OnKeyPress="GetCustomer" />
            </MudItem>
            <MudItem sm="6">
                <div class="d-flex justify-end align-baseline">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenCustomerModal">Add Customer</MudButton>
                </div>
            </MudItem>
        </MudGrid>
        <br />
        <MudDivider />

        <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
            <MudGrid>
                <MudItem sm="6">
                    <MudTextField @bind-Value="Customer.name" Label="Customer Name" Disabled="true" />
                </MudItem>
                <MudItem sm="6">
                    <MudTextField @bind-Value="Customer.comment" Label="Comment" />
                </MudItem>
            </MudGrid>
        </MudForm>

        <div class="d-flex justify-end mt-5">
            <MudButton Variant="Variant.Filled" Color="Color.Tertiary" Class="me-2" Disabled="String.IsNullOrEmpty(Customer.name) || DisableSaveOrder" OnClick="SaveAsDraft">Save Order</MudButton>
            @if (AddressID <= 0)
            {
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="String.IsNullOrEmpty(Customer.id)" OnClick="AddCustomerAddressModal">Add Address</MudButton>
            }
            else
            {
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="PlaceNewOrder" Disabled="disableSubmit">Place Order</MudButton>
            }

        </div>

        <br />
        <br />
        <br />
        <br />
        <br />
        <br />
        <br />
        <br />

    </MudContainer>
</MudPaper>

@code {

    //// Page On Load
    //protected override async Task OnInitializedAsync()
    //{
    //	//await GetProductAsSKU();
    //}

    //[JSInvokable]
    //public async Task OnBeforeUnload()
    //{
    //    await IJS.InvokeAsync<object>(
    //        "confirm",
    //        "Are you sure you want to leave?");
    //}

    //protected async override Task OnAfterRenderAsync(bool firstRender)
    //{
    //    if (firstRender)
    //    {
    //        await IJS.InvokeAsync<object>(
    //            "window.addEventListener",
    //            "beforeunload",
    //            DotNetObjectReference.Create(this).InvokeAsync("OnBeforeUnload"));
    //    }
    //}

    // Source
    private string source { get; set; }

    // Disable Place Order
    private bool disableSubmit { get; set; }

    // Zone Id
    private int ZoneId { get; set; }
    private int AddressID { get; set; }

    // Shipping, Subtotal, Discount
    private decimal subTotal { get; set; }
    private decimal shipping { get; set; }
    private decimal discount { get; set; }

    // Form Ref
    bool success;
    string[] errors = { };
    MudForm form;

    // Table Content
    private List<ProductTableDTO> Elements = new List<ProductTableDTO>();
    private List<PlaceOrderComboProductTableDTO> Combos = new List<PlaceOrderComboProductTableDTO>();
    private ProductTableDTO BeforeEdit;

    // Coupon
    private CouponDTO Coupon = new CouponDTO();
    private PlaceOrderCouponDTO CouponDetails = new PlaceOrderCouponDTO();

    // Apply Coupon
    private async Task ApplyCoupon()
    {
        try
        {
            CouponDetails = await _placeOrder.ApplyCoupon(Coupon.coupon, Coupon.platform);

            if (CouponDetails.message != null)
            {
                Snackbar.Add(CouponDetails.message, Severity.Error);
                return;
            }

            if (subTotal < CouponDetails.minCartAmmount)
            {
                Snackbar.Add($"Minimum cart amount is {CouponDetails.minCartAmmount}tk!", Severity.Error);
                return;
            }

            if (CouponDetails.discountType == "Cash")
            {
                discount = CouponDetails.percentageOrAmount;
                Snackbar.Add("Coupon applied successfully!", Severity.Success);
                return;
            }

            decimal tempDiscount = (subTotal / 100) * CouponDetails.percentageOrAmount;

            discount = tempDiscount > CouponDetails.uptoDiscountAmount ? CouponDetails.uptoDiscountAmount : tempDiscount;
            Snackbar.Add("Coupon applied successfully!", Severity.Success);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            Snackbar.Add($"Internal server error!", Severity.Error);
        }
    }

    // Reset Coupon
    private void ResetCoupon()
    {
        CouponDetails = new PlaceOrderCouponDTO();
        Coupon = new CouponDTO();
        discount = 0;
    }

    // Product Search Form
    private ProductSearchDTO FormData = new ProductSearchDTO();

    // Combo Search
    private string BcCode { get; set; }
    private int BcQuantity { get; set; } = 1;

    // Add Product To List
    private async Task AddProduct()
    {
        try
        {
            var result = await _placeOrder.GetProductBySKU(FormData.sku);

            if (result.message == "Product not found or stock out!")
            {
                Snackbar.Add(result.message, Severity.Error);
                return;
            }

            var isThere = Elements.FirstOrDefault(x => x.sku == result.sku);

            if (result.stock < FormData.qty)
            {
                Snackbar.Add($"Stock avaiable {result.stock} pieces only!", Severity.Error);
                return;
            }

            if (isThere != null)
            {
                if (result.stock < (FormData.qty + isThere.quantity))
                {
                    Snackbar.Add($"Stock avaiable {result.stock} pieces only!", Severity.Error);
                    return;
                }

                isThere.quantity += FormData.qty;
                isThere.productQuantity += FormData.qty;
                FormData = new ProductSearchDTO();
                subTotal = Math.Round(Elements.Sum(x => x.quantity * x.salesPrice));
                Snackbar.Add("Product Updated Successfully!", Severity.Success);
                ResetCoupon();
                await CheckAutoApply();
                await CheckAutoApplyValue();
                return;
            }
            result.quantity = FormData.qty;
            result.productQuantity = FormData.qty;
            result.productId = result.id;
            result.productPrice = result.salesPrice;
            Elements.Add(result);
            FormData = new ProductSearchDTO();
            subTotal = Math.Round(Elements.Sum(x => x.quantity * x.salesPrice));
            Snackbar.Add("Product Added Successfully!", Severity.Success);
            ResetCoupon();
            await CheckAutoApply();
            await CheckAutoApplyValue();
            return;
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            Snackbar.Add("Internal Server Error!", Severity.Error);
        }
    }

    // Add Combo
    private async Task AddComboProduct()
    {
        try
        {
            var result = await _placeOrder.GetComboByBcCode(BcCode);

            if (result.message != "Success!")
            {
                Snackbar.Add(result.message, Severity.Error);
                return;
            }

            var isThere = Elements.FirstOrDefault(x => x.bcCode == result.bcCode && x.isCombo == true);

            if (isThere != null)
            {
                var isThereCombo = Combos.FirstOrDefault(x => x.bcCode == result.bcCode);

                isThereCombo.quantity += BcQuantity;
                isThere.quantity += BcQuantity;
                subTotal = Math.Round(Elements.Sum(x => x.quantity * x.salesPrice));
                Snackbar.Add("Product Updated Successfully!", Severity.Success);
                ResetCoupon();
                await CheckAutoApply();
                await CheckAutoApplyValue();
                BcCode = String.Empty;
                BcQuantity = 1;
                return;
            }

            var tempProduct = new ProductTableDTO
                {
                    quantity = BcQuantity,
                    bcCode = result.bcCode,
                    isCombo = true,
                    name = result.name,
                    salesPrice = result.price,
                };

            result.quantity = BcQuantity;

            Combos.Add(result);
            Elements.Add(tempProduct);
            BcCode = String.Empty;
            BcQuantity = 1;
            subTotal = Math.Round(Elements.Sum(x => x.quantity * x.salesPrice));
            Snackbar.Add("Product Added Successfully!", Severity.Success);
            ResetCoupon();
            await CheckAutoApply();
            await CheckAutoApplyValue();
            return;

        }
        catch (Exception e)
        {

            Console.WriteLine(e.Message);
            Snackbar.Add("Internal Server Error!", Severity.Error);
        }
    }

    // Check AutoApply
    private string AutoText { get; set; }

    private decimal AutoAmount { get; set; }
    private int AutoId { get; set; }
    private bool isFreeOrder { get; set; }

    private async Task CheckAutoApply()
    {
        try
        {
            AutoText = await _placeOrder.AutoApplyMSG(Math.Round(Elements.Sum(x => x.quantity * x.salesPrice)));
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

    private async Task CheckAutoApplyValue()
    {
        try
        {
            var result = await _placeOrder.AutoApplyValue(Math.Round(Elements.Sum(x => x.quantity * x.salesPrice)));

            if (result == null)
            {
                AutoAmount = 0;
                AutoId = 0;
                isFreeOrder = false;
                return;
            }

            if (result != null)
            {
                AutoAmount = result.amount;
                AutoId = result.id;
                isFreeOrder = result.isDeliveryCharge;
                return;
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

    // Remove Product
    private async Task RemoveProduct(ProductTableDTO product)
    {

        if (product.isCombo)
        {
            Combos.RemoveAll(x => x.bcCode == product.bcCode);
        }

        Elements.Remove(product);
        subTotal = Math.Round(Elements.Sum(x => x.quantity * x.salesPrice));
        ResetCoupon();
        await CheckAutoApply();
        await CheckAutoApplyValue();
        Snackbar.Add("Product Removed Successfully!", Severity.Success);
    }

    //Customer Data
    private GenerateBillCustomerInfoDTO Customer = new GenerateBillCustomerInfoDTO();

    private string customerPhoneNumber { get; set; }

    private async Task GetCustomer(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            if (!String.IsNullOrEmpty(customerPhoneNumber))
            {
                try
                {
                    var result = await _generateBill.GetCustomerInfo(customerPhoneNumber);

                    if (!String.IsNullOrEmpty(result.error))
                    {
                        Snackbar.Add(result.error, Severity.Error);
                        return;
                    }

                    Snackbar.Add("Customer added!", Severity.Success);

                    Customer = result;
                }
                catch (Exception)
                {
                    throw;
                }
            }
        }
    }

    // Create Customer
    private async Task OpenCustomerModal()
    {
        var parameters = new DialogParameters();
        parameters.Add("FormData", new GenerateBillCreateCustomerDTO());

        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
        var dialog = await DialogService.Show<CreateCustomerModal>("Create New Customer", parameters, options).Result;

        if (dialog.Data != null)
        {
            GenerateBillCreateCustomerDTO newCustomer = dialog.Data as GenerateBillCreateCustomerDTO;

            try
            {
                var result = await _generateBill.CreateCustomer(newCustomer);

                if (result.customerId != null)
                {
                    Snackbar.Add(result.message, Severity.Success);
                    customerPhoneNumber = result.customerId.ToString();
                    return;
                }
                Snackbar.Add(result.message, Severity.Error);
            }
            catch (Exception)
            {
                Snackbar.Add("Internal Server Error!", Severity.Error);
                throw;
            }
        }
    }

    // Add Customer Address
    private async Task AddCustomerAddressModal()
    {
        var parameters = new DialogParameters();
        parameters.Add("FormData", new CustomerDeliveryAddressDTO { customerID = Customer.id });

        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
        var dialog = await DialogService.Show<PlaceOrderAddCustomerAddressModal>("Add Customer Address", parameters, options).Result;

        if (dialog.Data != null)
        {
            CustomerDeliveryAddressDTO newAddress = dialog.Data as CustomerDeliveryAddressDTO;

            try
            {
                var result = await _zones.CreateCustomerAddress(newAddress);

                if (result > 0)
                {
                    Snackbar.Add("Customer address added successfully!", Severity.Success);
                    ZoneId = newAddress.zone;
                    AddressID = result;
                    shipping = newAddress.shipping;
                    return;
                }
                Snackbar.Add("Address creation faild!", Severity.Error);
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
                Snackbar.Add("Internal Server Error!", Severity.Error);
            }
        }
    }

    // Save Order As Draft
    private bool DisableSaveOrder { get; set; }

    private async Task SaveAsDraft()
    {
        try
        {
            var savedOrders = await _storage.GetItemAsync<List<PlaceOrderDetailsDTO>>("draft_orders");

            var newSave = new List<PlaceOrderDetailsDTO>();

            var tempProducts = new List<ProductTableDTO>();
            tempProducts.AddRange(Elements.Where(x => x.isCombo == false));

            var orderDetails = new PlaceOrderDetailsDTO
                {
                    isFreeDelivery = isFreeOrder,
                    customerName = Customer.name,
                    customerPhone = Customer.phone,
                    address = Customer.address,
                    autoApplyAmnt = AutoAmount,
                    autoApplyId = AutoId,
                    customerId = Customer.id,
                    deliveryPrice = isFreeOrder ? 0 : shipping,
                    grandTotalPrice = subTotal + (isFreeOrder ? 0 : shipping) - discount - AutoAmount,
                    instructions = Customer.comment,
                    paymentType = 1,
                    source = source,
                    zoneId = ZoneId,
                    voucherCode = Coupon.coupon,
                    totalPrice = subTotal,
                    deliveryAddressID = AddressID,
                    afterPromoPrice = subTotal - discount - AutoAmount,
                    promoPrice = discount + AutoAmount,
                    deliveryType = 1,
                    orderProductsDTOs = tempProducts,
                    bogoComboDtos = Combos,
                    uuidID = Guid.NewGuid()
                };



            if (savedOrders != null)
            {
                newSave.AddRange(savedOrders);
            }

            newSave.Add(orderDetails);

            await _storage.SetItemAsync<List<PlaceOrderDetailsDTO>>("draft_orders", newSave);
            Snackbar.Add("Order saved successfully!", Severity.Success);
            DisableSaveOrder = true;

        }
        catch (Exception e)
        {

            Console.WriteLine(e.Message);
        }
    }

    // Place Order
    private PlaceOrderDTO NewOrder = new PlaceOrderDTO();

    private async Task PlaceNewOrder()
    {
        if (String.IsNullOrEmpty(source))
        {
            Snackbar.Add("Please add source!", Severity.Error);
            return;
        }

        if (Elements.Count <= 0)
        {
            Snackbar.Add("Please add products!", Severity.Error);
            return;
        }

        if (String.IsNullOrEmpty(Customer.id))
        {
            Snackbar.Add("Please add customer!", Severity.Error);
            return;
        }

        var tempProducts = new List<ProductTableDTO>();
        tempProducts.AddRange(Elements.Where(x => x.isCombo == false));

        var orderDetails = new PlaceOrderDetailsDTO
            {
                address = Customer.address,
                autoApplyAmnt = AutoAmount,
                autoApplyId = AutoId,
                customerId = Customer.id,
                deliveryPrice = isFreeOrder ? 0 : shipping,
                grandTotalPrice = subTotal + (isFreeOrder ? 0 : shipping) - discount - AutoAmount,
                instructions = Customer.comment,
                paymentType = 1,
                source = source,
                zoneId = ZoneId,
                voucherCode = Coupon.coupon,
                totalPrice = subTotal,
                deliveryAddressID = AddressID,
                afterPromoPrice = subTotal - discount - AutoAmount,
                promoPrice = discount + AutoAmount,
                deliveryType = 1,
                orderProductsDTOs = tempProducts,
                bogoComboDtos = Combos
            };

        NewOrder.createOrderDTO = orderDetails;

        disableSubmit = true;

        try
        {
            var result = await _placeOrder.PlaceOrder(NewOrder);

            if (result.sslUrl == "Success")
            {
                Snackbar.Add("Order placed successfully!", Severity.Success);
                ResetCoupon();
                DisableSaveOrder = true;
                return;
            }

            Snackbar.Add(result.sslUrl, Severity.Error);
            disableSubmit = false;
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            Snackbar.Add("Internal server error!", Severity.Error);
            disableSubmit = false;
        }
    }

    // Product Search Class
    public class ProductSearchDTO
    {
        public string sku { get; set; }
        public int qty { get; set; } = 1;
    }

    // Coupon Class
    public class CouponDTO
    {
        public string coupon { get; set; }
        public string platform { get; set; }
    }
}
