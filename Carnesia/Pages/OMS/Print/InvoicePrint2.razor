@layout PrintLayout
@page "/invoice-print/{trncode}"

@using Carnesia.Domain.Dashboard.GenerateBill
@inject IGenerateBill _generateBill

@using Syncfusion.Blazor
@using Syncfusion.Blazor.BarcodeGenerator

<div style="width: 3.5in; margin: 0 auto; padding: 3px">
    <MudImage Width="250" Src="@("./Carnesia logo for POS Bill.png")" Alt="logo" Style="margin-left: auto; margin-right: auto; display: block;" />
    <hr />
    <h1 style="text-align:center; font-weight: 600;">Invoice</h1>
    <hr />
    @if (!String.IsNullOrEmpty(Invoice.vatRegNumber))
    {
        <h4>Vat Reg. Number: @Invoice.vatRegNumber</h4>
    }
    <h4>Outlet Address: @Invoice.outletAddress</h4>
    <h4>Phone #@Invoice.outletPhone</h4>
    @if (!String.IsNullOrEmpty(Invoice.trnCode))
    {
        <SfBarcodeGenerator Value="@(Invoice.trnCode)" Height="50px">
            <BarcodeGeneratorDisplayText Text="" Size="12" Alignment="Alignment.Center" Position="TextPosition.Bottom">
            </BarcodeGeneratorDisplayText>
        </SfBarcodeGenerator>
    }
    <h4>Order Date: @Invoice.orderDate</h4>
    <h4>Customer Name: @Invoice.customerName</h4>
    <h4>Phone #@Invoice.customerPhone</h4>
    <h4>Cutomer Address: @Invoice.customerAddress</h4>
    <h4>Shipping Area: @Invoice.shippingZone</h4>
    <h4>District: @Invoice.district</h4>
    <h4>Area: @Invoice.area</h4>
    <br />
    @*<h3 style="font-weight: 600;">Payment: @Invoice.paymentType</h3>*@
    <table style="width: 100%; border-collapse: collapse;">
        <tr style="font-size: 14px;">
            <th style="width: 60%" class="table-cell">Product Name & SKU</th>
            <th class="table-cell">Price</th>
            <th class="table-cell">Qty.</th>
            @*<th class="table-cell">Discount</th>*@
            <th class="table-cell">Total</th>
        </tr>
        @if (Items.Count > 0)
        {
            foreach (var item in Items)
            {
                <tr style="font-size: 10px;">
                    <td class="table-cell">
                        <p>@item.name</p>
                        <p>SKU-@item.sku</p>
                    </td>
                    <td class="table-cell">@item.price</td>
                    <td class="table-cell">@item.quantity</td>
                    @*<td class="table-cell">0</td>*@
                    <td class="table-cell">@item.totalPrice</td>
                </tr>
            }
        }
        @if (Combos.Count > 0)
        {
            foreach (var item in Combos)
            {
                <tr style="font-size: 10px;">
                    <td class="table-cell">
                        <p>@item.name</p>
                        <p>Type-@item.bcType</p>
                        <p>Code-@item.bcCode</p>
                    </td>
                    <td class="table-cell">@item.price</td>
                    <td class="table-cell">@item.quantity</td>
                    @*<td class="table-cell">0</td>*@
                    <td class="table-cell">@item.totalPrice</td>
                </tr>
                foreach (var product in item.products)
                {
                    <tr style="font-size: 10px;">
                        <td class="table-cell">
                            <p>@product.productName</p>
                            <p>SKU-@product.sku</p>
                        </td>
                        <td class="table-cell">Under @item.bcType</td>
                        <td class="table-cell">@product.quantity</td>
                        @*<td class="table-cell">0</td>*@
                        <td class="table-cell">Under @item.bcType</td>
                    </tr>

                }
            }
        }
    </table>

    <table style="width: 100%; border-collapse: collapse;">
        <tr style="font-size: 14px;">
            <th style="width: 60%" class="table-cell">Payment Method</th>
            <th class="table-cell">Ref</th>
            <th class="table-cell">Amount</th>
        </tr>
        @if (Payments.Count > 0)
        {
            foreach (var item in Payments)
            {
                <tr style="font-size: 10px;">
                    <td class="table-cell">
                        @item.paymentType
                    </td>
                    <td class="table-cell">
                        @item.paymentRef
                    </td>
                    <td class="table-cell">
                        @item.amount
                    </td>
                </tr>
            }

        }
        <tr style="font-size: 10px;">
            <td class="table-cell">
            </td>
            <td class="table-cell">Collected:</td>
            <td class="table-cell">@Payments.Sum(x => x.amount)</td>
        </tr>
        <tr style="font-size: 10px;">
            <td class="table-cell">
            </td>
            <td class="table-cell">Change Amount:</td>
            <td class="table-cell">@Invoice.returnedAmnt</td>
        </tr>
        <tr style="font-size: 10px;">
            <td class="table-cell">
            </td>
            <td class="table-cell">Total:</td>
            <td class="table-cell">@(Payments.Sum(x => x.amount) - Invoice.returnedAmnt)</td>
        </tr>
    </table>

    <div style="text-align:end; margin-top: 10px;">
        <h5>Subtotal: @Invoice.total</h5>
        @*<h6>Shipping: 60</h6>*@
        <h5>Discount: @Invoice.discount</h5>
        <h5>Credit Used: @Invoice.creditUsed</h5>
        <h5>Reward Value: @Invoice.rewardPoints</h5>
        <h5>Vat(@Invoice.vat %): @Invoice.vatAmount</h5>
        <h5>Grand Total: @(Invoice.grandTotal + Invoice.vatAmount)</h5>
    </div>

    <h5 style="text-align: center;">
        Thank you for your business! Any Faulty Product Changes or
        refund should be made with in 3 days and product Should be
        intact.
    </h5>

    <div style="text-align:center; margin-top: 10px;">
        <h5>www.carnesia.com</h5>
        <h5>Helpline: 01748-623900</h5>
    </div>
</div>


@code {
    // Parameter
    [Parameter]
    public string trncode { get; set; }

    // Page On Load
    protected override async Task OnInitializedAsync()
    {
        await GetInvoice();
        Items = Invoice.items;
        Payments = Invoice.payments;
        Combos = Invoice.comboItems;
    }

    // Invoice Data
    private GenerateBillInvoiceDTO Invoice = new GenerateBillInvoiceDTO();

    // Items
    private List<GenerateBillInvoiceItemDTO> Items = new List<GenerateBillInvoiceItemDTO>();
    private List<GenerateBillPaymentsDTO> Payments = new List<GenerateBillPaymentsDTO>();
    private List<GenerateBillComboDTO> Combos = new List<GenerateBillComboDTO>();

    private async Task GetInvoice()
    {
        Invoice = await _generateBill.GetInvoiceData(trncode);
    }
}

