@page "/order-edit/{trnCode}"

@using Carnesia.Domain.OMS.PlaceOrder
@using Carnesia.Domain.Dashboard.GenerateBill
@using Carnesia.Domain.OMS.Zones
@using Carnesia.Shared.Dashboard.GenerateBill
@using Carnesia.Shared.OMS.OrderEdit
@inject IZones _zones
@inject IPlaceOrder _placeOrder
@inject IGenerateBill _generateBill
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudPaper Class="px-3 py-16 ma-2">
	<MudContainer Fixed="true">

		<div>
			<MudText Typo="Typo.h5">Order Id: @trnCode</MudText>
			<MudText Typo="Typo.h6">Customer Name: @OrderDetails.customerName</MudText>
			<MudText Typo="Typo.h6">Customer Phone Number: @OrderDetails.customerPhone</MudText>
		</div>

		<MudGrid Class="justify-center">
			@*<MudItem sm="4">
				<MudAutocomplete Label="Product SKU" SearchFunc="@ProductSKUSearch" @bind-Value="FormData.sku" />
				</MudItem>*@
			<MudItem sm="4">
				<MudTextField Label="SKU" @bind-Value="FormData.sku" />
			</MudItem>
			<MudItem sm="4">
				<MudNumericField @bind-Value="FormData.qty" Min="1" />
			</MudItem>
		</MudGrid>
		<MudGrid Class="justify-center my-5">
			<MudItem sm="8">
				<div class="d-flex justify-end">
					<MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="String.IsNullOrEmpty(FormData.sku)" OnClick="AddProduct">Add Product</MudButton>
				</div>
			</MudItem>
		</MudGrid>

		<MudGrid Class="justify-center mt-3">
			<MudItem sm="4">
				<MudTextField Label="Combo/Bogo Code" @bind-Value="BcCode" />
			</MudItem>
			<MudItem sm="4">
				<MudNumericField @bind-Value="BcQuantity" Min="1" />
			</MudItem>
		</MudGrid>

		<MudGrid Class="justify-center my-5">
			<MudItem sm="8">
				<div class="d-flex justify-end">
					<MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="String.IsNullOrEmpty(BcCode)" OnClick="AddComboProduct">Add Combo/Bogo</MudButton>
				</div>
			</MudItem>
		</MudGrid>

		@*<MudGrid Class="justify-center">
			<MudItem sm="4">
				<MudTextField Label="Combo SKU" @bind-Value="FormData.sku" />
			</MudItem>
			<MudItem sm="4">
				<MudNumericField @bind-Value="FormData.qty" Min="1" />
			</MudItem>
		</MudGrid>*@

		<MudTable Items="@Elements" Dense="true" Hover="true" Striped="true" CustomFooter="true" Loading="Loading" LoadingProgressColor="Color.Info">
			<HeaderContent>
				<MudTh>SKU</MudTh>
				<MudTh>Product Name</MudTh>
				<MudTh>Quantity</MudTh>
				<MudTh>Price</MudTh>
				<MudTh>Amount</MudTh>
				<MudTh>Action</MudTh>
			</HeaderContent>
			<RowTemplate>
				<MudTd DataLabel="SKU">@(context.sku + context.bcCode)</MudTd>
				<MudTd DataLabel="Product Name">@context.name</MudTd>
				<MudTd DataLabel="Quantity">@context.productQuantity</MudTd>
				<MudTd DataLabel="Price">@Math.Round(context.salesPrice, 2)</MudTd>
				<MudTd DataLabel="Amount">@Math.Round(context.salesPrice * context.productQuantity, 2)</MudTd>
				<MudTd DataLabel="Action">
					<MudButton OnClick="() => RemoveProduct(context)">
						<MudIcon Icon="@Icons.Filled.Delete" Color="Color.Error" />
					</MudButton>
				</MudTd>
			</RowTemplate>
			<FooterContent>
				<MudTFootRow>
					<MudTd colspan="5" Style="text-align: end;">Total:</MudTd>
					<MudTd colspan="1" Style="text-align: end;">@subTotal</MudTd>
				</MudTFootRow>
				<MudTFootRow>
					<MudTd colspan="5" Style="text-align: end;">Shipping:</MudTd>
					<MudTd colspan="1" Style="text-align: end;">@(isFreeOrder ? 0 : shipping)</MudTd>
				</MudTFootRow>
				<MudTFootRow>
					<MudTd colspan="5" Style="text-align: end;">Coupon Used:</MudTd>
					<MudTd colspan="1" Style="text-align: end;">@Math.Round(discount, 2)</MudTd>
				</MudTFootRow>
				<MudTFootRow>
					<MudTd colspan="5" Style="text-align: end;">Auto Apply:</MudTd>
					<MudTd colspan="1" Style="text-align: end;">@Math.Round(AutoAmount, 2)</MudTd>
				</MudTFootRow>
				<MudTFootRow>
					<MudTd colspan="5" Style="text-align: end; font-weight: 600;">Grand Total:</MudTd>
					<MudTd colspan="1" Style="text-align: end; font-weight: 600;">@Math.Round((subTotal + (isFreeOrder ? 0 : shipping) - discount - AutoAmount), 2)</MudTd>
				</MudTFootRow>
			</FooterContent>
		</MudTable>

		<MudGrid Class="justify-center">
			<MudItem sm="4">
				<MudTextField @bind-Value="Coupon.coupon" Label="Coupon" />
			</MudItem>
			<MudItem sm="4">
				<MudSelect @bind-Value="Coupon.platform" Label="Coupon Platform" AnchorOrigin="Origin.BottomCenter">
					<MudSelectItem Value="@("App")" />
					<MudSelectItem Value="@("General")" />
					<MudSelectItem Value="@("Web")" />
				</MudSelect>
			</MudItem>
		</MudGrid>

		<MudGrid Class="justify-center">
			<MudItem sm="8">
				<div class="d-flex justify-end">
					@if (discount <= 0)
					{

						<MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="String.IsNullOrEmpty(Coupon.coupon) || String.IsNullOrEmpty(Coupon.platform)" OnClick="ApplyCoupon">Add Coupon</MudButton>
					}
					else
					{

						<MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="ResetCoupon">Reset</MudButton>
					}
				</div>
			</MudItem>
		</MudGrid>

		<div class="d-flex justify-end my-5">
			<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="UpdateAddressModal" Class="me-3">View Address</MudButton>
			<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="UpdateOrder" Disabled="disableSubmit">Update Order</MudButton>
		</div>
	</MudContainer>
</MudPaper>
@code {
	[Parameter]
	public string trnCode { get; set; }

	// Loading
	private bool Loading { get; set; } = true;

	// disable submit
	private bool disableSubmit { get; set; }

	// Page On Load
	protected override async Task OnInitializedAsync()
	{
		await GetOrder();
		//await GetProductAsSKU();
	}

	// Combo Search
	private string BcCode { get; set; }
	private int BcQuantity { get; set; } = 1;

	// Form Ref
	bool success;
	string[] errors = { };
	MudForm form;


	// Shipping, Subtotal, Discount
	private decimal subTotal { get; set; }
	private decimal shipping { get; set; }
	private decimal discount { get; set; }
	private bool isFreeOrder { get; set; }
	private decimal AutoAmount { get; set; }
	private int addressId { get; set; }

	// Auto Apply Data
	private PlaceOrderAutoApplyDTO AutoApply = new PlaceOrderAutoApplyDTO();

	// Get Auto Apply
	private async Task GetAutoApply()
	{
		AutoApply = await _placeOrder.GetAutoApply(trnCode);
		CheckAutoApply();
	}

	// Check Auto Apply
	private void CheckAutoApply()
	{
		if (subTotal < AutoApply.mincartamnt)
		{
			isFreeOrder = false;
			AutoAmount = 0;
			return;
		}

		if (subTotal >= AutoApply.mincartamnt)
		{
			isFreeOrder = AutoApply.isDeliveryCharge;
			AutoAmount = AutoApply.amount;
			return;
		}
	}

	// Table Content
	private List<ProductTableDTO> Elements = new List<ProductTableDTO>();
	private List<PlaceOrderComboProductTableDTO> Combos = new List<PlaceOrderComboProductTableDTO>();
	private PlaceOrderDetailsDTO PlacedOrderDetails = new PlaceOrderDetailsDTO();

	// Get Order
	private PlaceOrderDetailsDTO OrderDetails = new PlaceOrderDetailsDTO();

	private async Task GetOrder()
	{
		try
		{
			OrderDetails = await _placeOrder.GetOrderByTrnCode(trnCode);
			PlacedOrderDetails = OrderDetails;
			shipping = OrderDetails.deliveryPrice;
			subTotal = OrderDetails.totalPrice;
			discount = OrderDetails.promoPrice;
			Coupon.coupon = OrderDetails.voucherCode;
			addressId = OrderDetails.deliveryAddressID;

			Elements = OrderDetails.orderProductsDTOs;

			foreach (var item in OrderDetails.bogoComboDtos)
			{
				Elements.Add(new ProductTableDTO
					{
						productQuantity = item.quantity,
						bcCode = item.bcCode,
						isCombo = true,
						name = item.name,
						salesPrice = item.price,
					});

				Combos.Add(new PlaceOrderComboProductTableDTO
					{
						bcCode = item.bcCode,
						bcType = item.bcType,
						comboCode = item.comboCode,
						name = item.name,
						price = item.price,
						quantity = item.quantity
					});
			}



			if (OrderDetails.autoApplyId > 0)
			{
				await GetAutoApply();
				StateHasChanged();
			}

			Loading = false;
		}
		catch (Exception e)
		{
			Console.WriteLine(e.Message);
			Loading = false;
		}
	}

	// Product Search Form
	private ProductSearchDTO FormData = new ProductSearchDTO();

	// Product Search
	private string[] ProductSKU = new string[] { };

	// Get Product SKU String
	private async Task GetProductAsSKU()
	{
		ProductSKU = await _placeOrder.GetProductsAsSku();
	}

	// Autocomplite Search Func for ParentCat
	private async Task<IEnumerable<string>> ProductSKUSearch(string value)
	{
		return string.IsNullOrEmpty(value) ? ProductSKU : ProductSKU.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
	}

	// Add Product To List
	private async Task AddProduct()
	{
		try
		{
			var result = await _placeOrder.GetProductBySKU(FormData.sku);

			if (result.message == "Product not found or stock out!")
			{
				Snackbar.Add(result.message, Severity.Error);
				return;
			}

			var isThere = Elements.FirstOrDefault(x => x.sku == result.sku);

			if (result.stock < FormData.qty)
			{
				Snackbar.Add($"Stock avaiable {result.stock} pieces only!", Severity.Error);
				return;
			}

			if (isThere != null)
			{
				if (result.stock < (FormData.qty + isThere.quantity))
				{
					Snackbar.Add($"Stock avaiable {result.stock} pieces only!", Severity.Error);
					return;
				}

				isThere.quantity += FormData.qty;
				isThere.productQuantity += FormData.qty;
				FormData = new ProductSearchDTO();
				subTotal = Math.Round(Elements.Sum(x => x.productQuantity * x.salesPrice));
				Snackbar.Add("Product Updated Successfully!", Severity.Success);
				ResetCoupon();
				CheckAutoApply();
				return;
			}
			result.quantity = FormData.qty;
			result.productQuantity = FormData.qty;
			result.productId = result.id;
			result.productPrice = result.salesPrice;
			Elements.Add(result);
			FormData = new ProductSearchDTO();
			subTotal = Math.Round(Elements.Sum(x => x.productQuantity * x.salesPrice));
			Snackbar.Add("Product Added Successfully!", Severity.Success);
			ResetCoupon();
			CheckAutoApply();
			return;
		}
		catch (Exception e)
		{
			Console.WriteLine(e.Message);
			Snackbar.Add("Internal Server Error!", Severity.Success);
		}
	}

	// Add Combo
	private async Task AddComboProduct()
	{
		try
		{
			var result = await _placeOrder.GetComboByBcCode(BcCode);

			if (result.message != "Success!")
			{
				Snackbar.Add(result.message, Severity.Error);
				return;
			}

			var isThere = Elements.FirstOrDefault(x => x.bcCode == result.bcCode && x.isCombo == true);

			if (isThere != null)
			{
				var isThereCombo = Combos.FirstOrDefault(x => x.bcCode == result.bcCode);

				isThereCombo.quantity += BcQuantity;
				isThere.productQuantity += BcQuantity;
				subTotal = Math.Round(Elements.Sum(x => x.productQuantity * x.salesPrice));
				Snackbar.Add("Product Updated Successfully!", Severity.Success);
				ResetCoupon();
				CheckAutoApply();
				BcCode = String.Empty;
				BcQuantity = 1;
				return;
			}

			var tempProduct = new ProductTableDTO
				{
					productQuantity = BcQuantity,
					bcCode = result.bcCode,
					isCombo = true,
					name = result.name,
					salesPrice = result.price,
				};

			result.quantity = BcQuantity;

			Combos.Add(result);
			Elements.Add(tempProduct);
			BcCode = String.Empty;
			BcQuantity = 1;
			subTotal = Math.Round(Elements.Sum(x => x.productQuantity * x.salesPrice));
			Snackbar.Add("Product Added Successfully!", Severity.Success);
			ResetCoupon();
			CheckAutoApply();
			return;

		}
		catch (Exception e)
		{

			Console.WriteLine(e.Message);
			Snackbar.Add("Internal Server Error!", Severity.Error);
		}
	}

	// Remove Product
	private void RemoveProduct(ProductTableDTO product)
	{
		if (product.isCombo)
		{
			Combos.RemoveAll(x => x.bcCode == product.bcCode);
		}

		Elements.Remove(product);
		subTotal = Math.Round(Elements.Sum(x => x.productQuantity * x.salesPrice));
		ResetCoupon();
		CheckAutoApply();
		Snackbar.Add("Product Removed Successfully!", Severity.Success);
	}

	// Coupon
	private CouponDTO Coupon = new CouponDTO();
	private PlaceOrderCouponDTO CouponDetails = new PlaceOrderCouponDTO();

	// Apply Coupon
	private async Task ApplyCoupon()
	{
		try
		{
			CouponDetails = await _placeOrder.ApplyCoupon(Coupon.coupon, Coupon.platform);

			if (CouponDetails.message != null)
			{
				Snackbar.Add(CouponDetails.message, Severity.Error);
				return;
			}

			if (subTotal < CouponDetails.minCartAmmount)
			{
				Snackbar.Add($"Minimum cart amount is {CouponDetails.minCartAmmount}tk!", Severity.Error);
				return;
			}

			if (CouponDetails.discountType == "Cash")
			{
				discount = CouponDetails.percentageOrAmount;
				Snackbar.Add("Coupon applied successfully!", Severity.Success);
				return;
			}

			decimal tempDiscount = (subTotal / 100) * CouponDetails.percentageOrAmount;

			discount = tempDiscount > CouponDetails.uptoDiscountAmount ? CouponDetails.uptoDiscountAmount : tempDiscount;
			Snackbar.Add("Coupon applied successfully!", Severity.Success);
		}
		catch (Exception e)
		{
			Console.WriteLine(e.Message);
			Snackbar.Add($"Internal server error!", Severity.Error);
		}
	}

	// Reset Coupon
	private void ResetCoupon()
	{
		CouponDetails = new PlaceOrderCouponDTO();
		Coupon = new CouponDTO();
		discount = 0;
	}

	//Customer Data
	private GenerateBillCustomerInfoDTO Customer = new GenerateBillCustomerInfoDTO();
	private string customerPhoneNumber { get; set; }

	// Update Address Modal
	private async Task UpdateAddressModal()
	{
		var parameters = new DialogParameters();
		parameters.Add("FormData", new CustomerDeliveryAddressDTO { customerID = OrderDetails.customerId, shipping = shipping });
		parameters.Add("AddressID", OrderDetails.deliveryAddressID);
		parameters.Add("TRNCode", trnCode);
		parameters.Add("UserPhone", OrderDetails.customerPhone);

		var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
		var dialog = await DialogService.Show<OrderEditNewCustomerAddressModal>("Update Customer Address", parameters, options).Result;

		if (dialog.Data != null)
		{
			CustomerDeliveryAddressDTO newAddress = dialog.Data as CustomerDeliveryAddressDTO;

			try
			{
				var result = await _zones.CreateCustomerAddress(newAddress);

				if (result > 0)
				{
					Snackbar.Add("Customer address updated successfully!", Severity.Success);
					OrderDetails.zoneId = newAddress.zone;
					OrderDetails.deliveryAddressID = result;
					shipping = newAddress.shipping;
					return;
				}

				Snackbar.Add("Customer address update failed!", Severity.Success);
			}
			catch (Exception e)
			{
				Console.WriteLine(e.Message);
				Snackbar.Add("Internal server error!", Severity.Error);
			}
		}
	}

	// Update Order
	private async Task UpdateOrder()
	{
		disableSubmit = true; 
		var UpdateOrderDetails = new OrderEditUpdatedOrderDTO();

		UpdateOrderDetails.autoApplyAmnt = AutoAmount;
		UpdateOrderDetails.autoApplyId = OrderDetails.autoApplyId > 0 && subTotal >= AutoApply.mincartamnt ? OrderDetails.autoApplyId : 0;
		UpdateOrderDetails.grandTotalPrice = subTotal + shipping - discount - AutoAmount;
		UpdateOrderDetails.deliveryPrice = isFreeOrder ? 0 : shipping;
		UpdateOrderDetails.promoPrice = discount + AutoAmount;
		UpdateOrderDetails.afterPromoPrice = subTotal - discount + AutoApply.amount;

		var tempProducts = new List<ProductTableDTO>();
		tempProducts.AddRange(Elements.Where(x => x.isCombo == false));

		UpdateOrderDetails.totalPrice = subTotal;
		UpdateOrderDetails.zoneId = OrderDetails.zoneId;
		UpdateOrderDetails.deliveryAddressID = OrderDetails.deliveryAddressID;
		UpdateOrderDetails.orderProductsDTOs = tempProducts;
		UpdateOrderDetails.bogoComboDtos = Combos;
		UpdateOrderDetails.voucherCode = Coupon.coupon;

		try
		{
			var result = await _placeOrder.UpdateOrder(UpdateOrderDetails, trnCode);

			if (result.message != "Success")
			{
				Snackbar.Add(result.message, Severity.Error);
				disableSubmit = false;
				return;
			}

			Snackbar.Add(result.message, Severity.Success);
			await GetOrder();
			disableSubmit = false;
		}
		catch (Exception e)
		{
			Console.WriteLine(e.Message);
			Snackbar.Add("Internal server error!", Severity.Error);
			disableSubmit = false;
		}
	}

	// Product Search Class
	public class ProductSearchDTO
	{
		public string sku { get; set; }
		public int qty { get; set; } = 1;
	}

	// Coupon Class
	public class CouponDTO
	{
		public string coupon { get; set; }
		public string platform { get; set; }
	}

}
