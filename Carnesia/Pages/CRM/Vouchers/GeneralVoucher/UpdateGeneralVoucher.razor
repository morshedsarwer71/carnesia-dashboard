@page "/general-voucher/{id:int}"

@using Carnesia.Domain.CRM.Vouchers.GeneralVoucher.VoucherList
@inject IGeneralVoucher _voucher

<MudPaper Class="pa-16 pt-16 ma-2 mt-10">
	<MudContainer Fixed="true">
		<MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
            <MudGrid>
                <MudItem sm="6">
                    <MudTextField @bind-Value="Voucher.gvCode" Label="Code" Required="true" RequiredError="Code is required!"/>
                </MudItem>
                <MudItem sm="6">
                    <MudNumericField @bind-Value="Voucher.numOfVoucher" Label="Number of Voucher" Min="1" Required="true" RequiredError="Number of Voucher is required!"/>
                </MudItem>
                <MudItem sm="6">
                    <MudDatePicker Label="Start Date" DateFormat="yyyy-MM-dd" @bind-Text="Voucher.startDate" />
                </MudItem>
                <MudItem sm="6">
                    <MudTimePicker Label="Start Time" @bind-Time="StartTime" />
                </MudItem>
                <MudItem sm="6">
                    <MudDatePicker Label="End Date" DateFormat="yyyy-MM-dd" @bind-Text="Voucher.endDate" />
                </MudItem>
                <MudItem sm="6">
                    <MudTimePicker Label="End Time" @bind-Time="EndTime" />
                </MudItem>
                <MudItem sm="6">
                    <MudNumericField @bind-Value="Voucher.minCartAmount" Label="Minimum Cart Amount" Min="1" Required="true" RequiredError="Minimum Cart Amount is required!"/>
                </MudItem>
                <MudItem sm="6">
                    <MudSelect @bind-Value="Voucher.platformType" Label="Voucher Platform" AnchorOrigin="Origin.BottomCenter" Required="true" RequiredError="Voucher Platform is required!">
                        <MudSelectItem Value="@("App")" />
                        <MudSelectItem Value="@("General")" />
                        <MudSelectItem Value="@("Web")" />
                    </MudSelect>
                </MudItem>
                <MudItem sm="6">
                    <MudSelect @bind-Value="Voucher.voucherDiscType" Label="Discount Type" AnchorOrigin="Origin.BottomCenter" Required="true" RequiredError="Discount Type is required!">
                        <MudSelectItem Value="@("Cash")" />
                        <MudSelectItem Value="@("Percent")" />
                    </MudSelect>
                </MudItem>
                <MudItem sm="6">
                    <MudNumericField @bind-Value="Voucher.discAmntOrPercent" Label="Discount Amount" Min="1" Required="true" RequiredError="Discount Amount is required!"/>
                </MudItem>
                <MudItem sm="6">
                    <MudNumericField @bind-Value="Voucher.upToDiscAmnt" Label="Up to Discount Amount" Min="1" Required="true" RequiredError="Up to Discount Amount is required!"/>
                </MudItem>
                <MudItem sm="6">
                    <MudTextField @bind-Value="Voucher.description" Label="Description" Required="true" RequiredError="Description is required!"/>
                </MudItem>
            </MudGrid>
                    
            <div class="d-flex align-center justify-space-between mt-6">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto">Submit</MudButton>
            </div>
        </MudForm>
	</MudContainer>
</MudPaper>

@code {
	// Url Param
	[Parameter]
	public int id { get; set; }

	// Page On Load
	protected override async Task OnInitializedAsync()
	{
		await GetVoucher();
        await SetTime();
	}

    // Form Ref
    bool success;
    string[] errors = { };
    MudForm form;

	// Voucher State
	private VoucherListDTO Voucher = new VoucherListDTO();

	// Get Voucher
	private async Task GetVoucher()
	{
		Voucher = await _voucher.GetVoucherById(id);
	}

    //Time
    private TimeSpan? StartTime = new TimeSpan();
    private TimeSpan? EndTime = new TimeSpan();

    // Set Time
    private async Task SetTime()
    {
        StartTime = TimeSpan.Parse(Voucher.startTime.Remove(Voucher.startTime.Length - 5));
        EndTime = TimeSpan.Parse(Voucher.endTime.Remove(Voucher.startTime.Length - 5));
    }
}
