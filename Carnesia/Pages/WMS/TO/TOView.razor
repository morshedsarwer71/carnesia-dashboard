@page "/view-to/{ToID}"

@using Syncfusion.Blazor
@using Syncfusion.Blazor.BarcodeGenerator
@using Carnesia.Domain.WMS.UpdateTO
@inject IManageTo _manageTo
@inject ISnackbar Snackbar

<MudPaper Class="px-3 py-16 ma-2">
	<MudContainer Fixed="true">
		<MudText Typo="Typo.h4">TO ID: @ToID</MudText>
		<p>Created On: @Details.createdDate</p>
		<p>Source Warehouse: @Details.sourceWh</p>
		<p>Destination Warehouse: @Details.destinationWh</p>

		<div style="width: 25%; margin: 10px auto">
			<SfBarcodeGenerator Value="@(ToID)" Height="60px">
				<BarcodeGeneratorDisplayText Text="" Size="12" Alignment="Alignment.Center" Position="TextPosition.Bottom">
				</BarcodeGeneratorDisplayText>
			</SfBarcodeGenerator>
		</div>

		<MudTable Items="Elements"  Hover="true" Striped="true" MultiSelection="String.IsNullOrEmpty(Details.pickCode)" ReadOnly="!String.IsNullOrEmpty(Details.pickCode)" @bind-SelectedItems="SelectedTO" CommitEditTooltip="Save Edit" CanCancelEdit="true" IsEditRowSwitchingBlocked="true" RowEditPreview="BackupItem" RowEditCancel="ResetItem" RowEditCommit="ItemHasBeenCommitted">
			<HeaderContent>
				<MudTh>Product Code</MudTh>
				<MudTh>SKU</MudTh>
				<MudTh>Product Name</MudTh>
				<MudTh>TO Quantity</MudTh>
			</HeaderContent>
			<RowTemplate>
				<MudTd DataLabel="Product Code">@context.prodcutCode</MudTd>
				<MudTd DataLabel="SKU">@context.sku</MudTd>
				<MudTd DataLabel="Product Name">@context.productName</MudTd>
				<MudTd DataLabel="TO Quantity">@context.quantity</MudTd>
			</RowTemplate>
			<RowEditingTemplate>
				<MudTd DataLabel="Product Code">@context.prodcutCode</MudTd>
				<MudTd DataLabel="SKU">@context.sku</MudTd>
				<MudTd DataLabel="Product Name">@context.productName</MudTd>
				<MudTd DataLabel="TO Quantity">
					<MudTextField @bind-Value="@context.quantity" Required />
				</MudTd>
			</RowEditingTemplate>
		</MudTable>

		<div class="d-flex justify-end mt-5">
			<MudButton Disabled="SelectedTO.Count <= 0" Variant="Variant.Filled" Color="Color.Error" OnClick="DeleteProducts">Delete Products</MudButton>
		</div>
	</MudContainer>
</MudPaper>

@code {
	// Page On Load
	protected override async Task OnInitializedAsync()
	{
		await GetProducts();
	}

	// To ID
	[Parameter]
	public string ToID { get; set; }

	// Table Content
	private List<UpdateToProductsDTO> Elements = new List<UpdateToProductsDTO>();

	// Details
	private UpdateTODTO Details = new UpdateTODTO();

	// Get Products
	private async Task GetProducts()
	{
		Details = await _manageTo.GetToDetails(ToID);

		Elements = Details.products;
	}

	// MultiSelect
	private HashSet<UpdateToProductsDTO> SelectedTO = new HashSet<UpdateToProductsDTO>();

	private UpdateToProductsDTO BeforeEdit;

	// Backup
	private void BackupItem(object element)
	{
		BeforeEdit = new()
			{
				sku = ((UpdateToProductsDTO)element).sku,
				productName = ((UpdateToProductsDTO)element).productName,
				prodcutCode = ((UpdateToProductsDTO)element).prodcutCode,
				quantity = ((UpdateToProductsDTO)element).quantity
			};
	}

	// Reset Item
	private void ResetItem(object element)
	{
		((UpdateToProductsDTO)element).sku = BeforeEdit.sku;
		((UpdateToProductsDTO)element).productName = BeforeEdit.productName;
		((UpdateToProductsDTO)element).prodcutCode = BeforeEdit.prodcutCode;
		((UpdateToProductsDTO)element).quantity = BeforeEdit.quantity;
	}

	// Delete Products
	private DeleteToProductsDTO DeleteList = new DeleteToProductsDTO();
	private async Task DeleteProducts()
	{
		var TempIds = new List<int>();
		foreach (var item in SelectedTO)
		{
			TempIds.Add(item.id);
		}

		DeleteList.productId = TempIds;
		DeleteList.toCode = ToID;

		try
		{
			var result = await _manageTo.DeleteToProducts(DeleteList);

			if (result)
			{
				Snackbar.Add("Products Deleted Successfully!", Severity.Success);
				await GetProducts();
				return;
			}
			Snackbar.Add("Products Delete Failed!", Severity.Error);
		}
		catch(Exception e)
		{
			Snackbar.Add("Products Delete Failed!", Severity.Error);
			Console.WriteLine(e.Message);
		}
	}

	// Update Product
	private async void ItemHasBeenCommitted(object element)
	{
		int qty = ((UpdateToProductsDTO)element).quantity;
		int pID = ((UpdateToProductsDTO)element).id;
		int PIndex = Elements.FindIndex(x => x.id == pID);

		try
		{
			var result = await _manageTo.UpdateToProductQuantity(ToID, qty, pID);

			if (result)
			{
				Snackbar.Add("Product Updated Successfully!", Severity.Success);
				await GetProducts();
				return;
			}
			Elements[PIndex].quantity = BeforeEdit.quantity;
			Snackbar.Add("Product Update Failed!", Severity.Error);
		}
		catch(Exception e)
		{
			Snackbar.Add("Product Update Failed!", Severity.Error);
			Elements[PIndex].quantity = BeforeEdit.quantity;
			Console.WriteLine(e.Message);
		}
	}
}
