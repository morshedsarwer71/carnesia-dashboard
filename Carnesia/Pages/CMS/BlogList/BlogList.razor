@page "/blog-list"

@using Carnesia.Domain.CMS.BlogPost
@using Carnesia.Domain.Common.POCO
@using Carnesia.Shared.CommonComponents
@inject IBlogPost _blogPost
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<MudPaper Class="pa-16 ma-2">
	<MudContainer Fixed="true">
				<MudTable Items="@Elements" Dense="@tableCommon.Dense" Hover="@tableCommon.Hover" Bordered="@tableCommon.Bordered" Striped="@tableCommon.Striped" Filter="new Func<BlogPostDTO,bool>(FilterFuncInitial)">
			        <ToolBarContent>
                        <MudSpacer />
                        <MudSpacer />
                        <MudTextField Immediate="true" @bind-Value="tableCommon.SearchTerm" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"/>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>Title</MudTh>
                        <MudTh>Image</MudTh>
                        <MudTh>Publish</MudTh>
                        <MudTh>Action</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Title">@context.title</MudTd>
                        <MudTd DataLabel="Image">
                            <MudImage @onclick="() => ShowImage(context.imageWebUrl)" Src="@($"https://localhost:7090/{context.imageWebUrl}")" Alt="@context.title" Elevation="25" Class="rounded-lg" Style="width:100px" />
                        </MudTd>
                        <MudTd DataLabel="Publish">
                            <MudSwitch @bind-Checked="@context.isPublish" Color="Color.Primary" @onclick="(() => TogglePublish(context.id))"/>
                        </MudTd>
                        <MudTd DataLabel="Action">
                            <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="() => NavigateToUpdate(context.id)">Edit</MudButton>
                        </MudTd>
                    </RowTemplate>
			        <PagerContent>
                        <MudTablePager />
                    </PagerContent>
		        </MudTable>

                <div class="d-flex flex-wrap mt-4">
                    <MudSwitch @bind-Checked="@tableCommon.Hover" Color="Color.Primary">Hover</MudSwitch>
                    <MudSwitch @bind-Checked="@tableCommon.Dense" Color="Color.Secondary">Dense</MudSwitch>
                    <MudSwitch @bind-Checked="@tableCommon.Striped" Color="Color.Tertiary">Striped</MudSwitch>
                    <MudSwitch @bind-Checked="@tableCommon.Bordered" Color="Color.Warning">Bordered</MudSwitch>
                </div>
	</MudContainer>
</MudPaper>

@code {
    // Page On Load
    protected override async Task OnInitializedAsync()
    {
        await GetAllPost();
    }

    // Table Customaization
    private TableCommon tableCommon = new TableCommon();

    // Table Content
    private IEnumerable<BlogPostDTO> Elements = new List<BlogPostDTO>();

    // Get All Post
    private async Task GetAllPost()
    {
        Elements = await _blogPost.GetAllBlogPosts();
    }

    // Toggle Publish
    private async Task TogglePublish(int id)
    {
        try
        {

            await _blogPost.PublishToggle(id);
            Snackbar.Add("Published Changed!", Severity.Success);
        }
        catch (Exception)
        {
            Snackbar.Add("Something Went Wrong!", Severity.Error);
            throw;
        }
    }

    // Navigate To Blog Update 
    private void NavigateToUpdate(int id)
    {
        NavigationManager.NavigateTo($"update-blog/{id}");
    }

    // Table Search
    private bool FilterFuncInitial(BlogPostDTO element) => FilterFunc(element, tableCommon.SearchTerm);

    private bool FilterFunc(BlogPostDTO element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.title.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    // Show Image
    private void ShowImage(string url)
    {
        var parameters = new DialogParameters();
        parameters.Add("ImageUrl", url);

        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
        DialogService.Show<ShowImageModal>("Image", parameters, options);
    }
}
