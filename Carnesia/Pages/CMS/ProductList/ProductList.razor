@page "/product-list"

@using Carnesia.Domain.CMS.ProductList
@using Carnesia.Domain.Common.POCO
@inject IProductList _products
@inject NavigationManager NavigationManager

<MudPaper Class="pa-16 ma-2">
	<MudContainer Fixed="true">
		<MudTable Items="@Elements" Dense="@tableCommon.Dense" Hover="@tableCommon.Hover" Bordered="@tableCommon.Bordered" Striped="@tableCommon.Striped" Filter="new Func<ProductListDTO,bool>(FilterFuncInitial)">
            <ToolBarContent>
                <MudSpacer />
                <MudSpacer />
                <MudTextField @bind-Value="tableCommon.SearchTerm" Placeholder="Search" Adornment="Adornment.Start" Immediate="false" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"/>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Product Name</MudTh>
                <MudTh>SKU</MudTh>
                <MudTh>Brand</MudTh>
                <MudTh>Origin</MudTh>
                <MudTh>Action</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Product Name">@context.childName</MudTd>
                <MudTd DataLabel="SKU">@context.sku</MudTd>
                <MudTd DataLabel="Brand">@context.brandName</MudTd>
                <MudTd DataLabel="Origin">@context.origin</MudTd>
                <MudTd DataLabel="Action">
                    <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="() => GoToUpdate(context.childId)" >Edit</MudButton>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>

        <div class="d-flex flex-wrap mt-4">
            <MudSwitch @bind-Checked="@tableCommon.Hover" Color="Color.Primary">Hover</MudSwitch>
            <MudSwitch @bind-Checked="@tableCommon.Dense" Color="Color.Secondary">Dense</MudSwitch>
            <MudSwitch @bind-Checked="@tableCommon.Striped" Color="Color.Tertiary">Striped</MudSwitch>
            <MudSwitch @bind-Checked="@tableCommon.Bordered" Color="Color.Warning">Bordered</MudSwitch>
        </div>
	</MudContainer>
</MudPaper>

@code {
    // Page On Load
    protected override async Task OnInitializedAsync()
    {
        await GetProducts();
    }

    // Table Customaization
    private TableCommon tableCommon = new TableCommon();

    // Table Content
    private IEnumerable<ProductListDTO> Elements = new List<ProductListDTO>();

    // Get Products
    private async Task GetProducts()
    {
        Elements = await _products.GetProducts();
    }

    // Go To Update
    private void GoToUpdate(int id)
    {
        NavigationManager.NavigateTo($"update-compound-product/{id}");
    }

    // Table Search
    private bool FilterFuncInitial(ProductListDTO element) => FilterFunc(element, tableCommon.SearchTerm);

    private bool FilterFunc(ProductListDTO element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.childName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.sku.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}
