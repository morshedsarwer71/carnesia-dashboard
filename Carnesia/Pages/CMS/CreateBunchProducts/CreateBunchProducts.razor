@page "/create-bunch"

@using Carnesia.Domain.CMS.BunchProduct
@using Carnesia.Shared.CMS.BunchProduct
@inject IBase64 _base64
@inject IProducts _products
@inject IBunchProduct _bunchProduct
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudPaper Class="pa-16 ma-2">
	<MudContainer Fixed="true">
		<MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
			<MudGrid Class="mb-5">
				<MudItem xs="12">
					<MudTextField @bind-Value="FormData.name" Label="Bunch Name" Required="true" RequiredError="Bunch name is required!" />
				</MudItem>
				<MudItem xs="12">
					<MudTextField @bind-Value="FormData.description" Label="Description" Lines="5" Required="true" RequiredError="Description is required!" />
				</MudItem>
			</MudGrid>

			<div class="my-5 d-flex justify-end">
				<a href="./BulkBunchProduct.xlsx" download target="_top">
					<MudButton Class="me-3" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ArrowDownward" Style="background-color: yellowgreen; color: white;">
						Download CSV Template
					</MudButton>
				</a>

				<InputFile id="fileInput-excel" hidden accept=".xlsx" OnChange="UploadFile" />
				<MudButton HtmlTag="label"
						   Class="me-3"
						   Variant="Variant.Filled"
						   Color="Color.Primary"
						   StartIcon="@Icons.Filled.CloudUpload"
						   for="fileInput-excel">
					Upload File
				</MudButton>

				<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenProductModal">Add Product</MudButton>
			</div>

			<MudTable Items="@Products" Hover="true" Dense="true" Loading="loading" LoadingProgressColor="Color.Info">
				<HeaderContent>
					<MudTh>SKU</MudTh>
					<MudTh>Product Name</MudTh>
					<MudTh>Product Code</MudTh>
					<MudTh>Action</MudTh>
				</HeaderContent>
				<RowTemplate>
					<MudTd DataLabel="SKU">@context.sku</MudTd>
					<MudTd DataLabel="Product Name">@context.productName</MudTd>
					<MudTd DataLabel="Product Code">@context.productCode</MudTd>
					<MudTd DataLabel="Action">
						<MudButton OnClick="() => RemoveProduct(context)">
							<MudIcon Icon="@Icons.Filled.Delete" Color="Color.Error" />
						</MudButton>
					</MudTd>
				</RowTemplate>
			</MudTable>

			<div class="mt-5">
				<InputFile id="fileInput" hidden accept=".webp" OnChange="UploadImage" />

				<MudButton HtmlTag="label"
						   Variant="Variant.Filled"
						   Color="Color.Primary"
						   StartIcon="@Icons.Filled.CloudUpload"
						   for="fileInput">
					Upload Images
				</MudButton>
				<MudText Class="mt-1">1280 * 320(Max 200Kb)</MudText>
			</div>

			<MudImage Src="@($"data:image/webp;base64,{FormData.base64Attch}")" Alt="" Elevation="25" Class="rounded-lg mt-3" Style="width:200px;" />

			<div class="d-flex align-center justify-space-between">
				<MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto" OnClick="CreateNewBunch">Submit</MudButton>
			</div>
		</MudForm>
	</MudContainer>
</MudPaper>

@code {
	// Form Ref
	bool success;
	string[] errors = { };
	MudForm form;

	// Loading
	private bool loading { get; set; }

	// Form Data
	private AddBunchProductDTO FormData = new AddBunchProductDTO();
	private List<AddBunchProductProductsDTO> Products = new List<AddBunchProductProductsDTO>();

	// Upload Image
	private async Task UploadImage(InputFileChangeEventArgs e)
	{
		try
		{
			FormData.base64Attch = await _base64.ConvertToBase64(204800, 1280, 320, e);
		}
		catch (Exception error)
		{
			Snackbar.Add(error.Message, Severity.Error);
		}
	}

	// Remove Products
	private void RemoveProduct(AddBunchProductProductsDTO product)
	{
		Products.Remove(product);
	}

	// Add Product Modal
	private async Task OpenProductModal()
	{
		var parameters = new DialogParameters();
		parameters.Add("FormData", new AddBunchProductProductsDTO());

		var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
		var dialog = await DialogService.Show<AddProductsModal>("Add New Product", parameters, options).Result;

		if (dialog.Data != null)
		{
			AddBunchProductProductsDTO newProduct = dialog.Data as AddBunchProductProductsDTO;

			bool isThere = Products.Any(x => x.sku == newProduct.sku);

			if (isThere)
			{
				Snackbar.Add("This Product Already Exists!", Severity.Error);
				return;
			}

			var result = await _products.GetProductBySku(newProduct.sku);

			if (result != null)
			{
				newProduct.productId = result.productId;
				newProduct.productName = result.productName;
				newProduct.productCode = result.productCode;
				Products.Add(newProduct);
				return;
			}

			Snackbar.Add("Product Not Found!", Severity.Error);
		}
	}

	// Create New Bunch
	private async Task CreateNewBunch()
	{
		try
		{
			if (String.IsNullOrEmpty(FormData.base64Attch))
			{
				Snackbar.Add("Campaign image is required!", Severity.Error);
				return;
			}

			if (Products.Count <= 0)
			{
				Snackbar.Add("Please add product!", Severity.Error);
				return;
			}

			FormData.bunchProductTag = Products;
			var result = await _bunchProduct.CreateBunchProduct(FormData);

			if (result)
			{
				Snackbar.Add("New Bunch Created Successfully!", Severity.Success);
				form.Reset();
				Products.Clear();
				FormData = new AddBunchProductDTO();
				return;
			}
			Snackbar.Add("Something Went Wrong!", Severity.Error);
		}
		catch (Exception)
		{
			throw;
		}
	}

	// Upload .xlsx
	private async Task UploadFile(InputFileChangeEventArgs e)
	{
		loading = true;
		try
		{
			Products.Clear();
			Products = await _bunchProduct.UploadXLSXFile(e);
			loading = false;
		}
		catch (Exception er)
		{
			Console.WriteLine(er.Message);
			loading = false;
			throw;
		}
	}

}
