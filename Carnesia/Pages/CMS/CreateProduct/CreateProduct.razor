@page "/create-product"

@using Blazored.TextEditor
@inject IBase64 _base64
@inject ISnackbar Snackbar

<MudPaper Class="pa-16 pt-10 ma-2">
	<MudContainer Fixed="true">
		<MudGrid Class="justify-center mb-5">
			<MudItem sm="6">
				<MudSelect T="string" @bind-Value="@ProductType" Label="Product Type" AnchorOrigin="Origin.BottomCenter">
					<MudSelectItem Value="@("Compound")" />
					<MudSelectItem Value="@("Simple")" />
				</MudSelect>
			</MudItem>
		</MudGrid>

		<MudForm Class="mb-10" @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                    <MudGrid Class="justify-center">
						<MudItem sm="6">
							<MudTextField T="string" Label="Product Name" Required="true" RequiredError="Product Name is required!"/>
						</MudItem>
                @if (ProductType == "Compound")
                {
                        <MudItem sm="6">
							<MudAutocomplete T="string" Label="Brand" ResetValueOnEmptyText="true" Required="true"/>
						</MudItem>
						<MudItem sm="6">
							<MudAutocomplete T="string" Label="Origin" SearchFunc="@CountrySearch" ResetValueOnEmptyText="true" Required="true" />
						</MudItem>
                }
            </MudGrid>
            </MudForm>

			<BlazoredTextEditor @ref="@QuillNative" Placeholder="Enter non HTML format like centering...">
                <ToolbarContent>
                    <span class="ql-formats">
                        <select class="ql-font">
                            <option selected=""></option>
                            <option value="serif"></option>
                            <option value="monospace"></option>
                        </select>
                        <select class="ql-size">
                            <option value="small"></option>
                            <option selected=""></option>
                            <option value="large"></option>
                            <option value="huge"></option>
                        </select>
                    </span>
                    <span class="ql-formats">
                        <button class="ql-bold"></button>
                        <button class="ql-italic"></button>
                        <button class="ql-underline"></button>
                        <button class="ql-strike"></button>
                    </span>
                    <span class="ql-formats">
                        <select class="ql-color"></select>
                        <select class="ql-background"></select>
                    </span>
                    <span class="ql-formats">
                        <button class="ql-list" value="ordered"></button>
                        <button class="ql-list" value="bullet"></button>
                        <button class="ql-indent" value="-1"></button>
                        <button class="ql-indent" value="+1"></button>
                        <select class="ql-align">
                            <option selected=""></option>
                            <option value="center"></option>
                            <option value="right"></option>
                            <option value="justify"></option>
                        </select>
                    </span>
                    <span class="ql-formats">
                        <button class="ql-link"></button>
                    </span>
                </ToolbarContent>
            </BlazoredTextEditor>

        <div class="d-flex justify-end mt-5">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="GetHTML">Submit</MudButton>
        </div>
	</MudContainer>
</MudPaper>

@if (showChildProduct)
{
    <MudPaper Class="pa-16 pt-10 ma-2">
        <MudContainer Fixed="true">
            <MudForm @ref="formC" @bind-IsValid="@successC" @bind-Errors="@errorsC">
			    <MudGrid Class="justify-center">
				    <MudItem sm="6">
					    <MudTextField T="string" Label="Product SKU" Required="true" RequiredError="Product SKU is required!"/>
				    </MudItem>
				    <MudItem sm="6">
					    <MudTextField T="string" Label="Product Weight" Required="true" RequiredError="Product Weight is required!"/>
				    </MudItem>
				    <MudItem sm="6">
					    <MudTextField T="string" Label="Product Dimension" Required="true" RequiredError="Product Dimension is required!"/>
				    </MudItem>
                    <MudItem sm="6">
					    <MudTextField T="int?" Label="Product Points"/>
				    </MudItem>
                    <MudItem sm="6">
					    <MudTextField T="decimal?" Label="MRP" Required="true" RequiredError="MRP is required!"/>
				    </MudItem>
                    <MudItem sm="6">
					    <MudTextField T="decimal?" Label="Selling Price" Required="true" RequiredError="Selling Price is required!"/>
				    </MudItem>
                    <MudItem sm="6">
					    <MudColorPicker Label="Color Code" @bind-Text="_colorValue" Style="@($"color: {_colorValue};")" Placeholder="Select Color"                                                                 ColorPickerMode="ColorPickerMode.HEX" DisableModeSwitch="true"  />
				    </MudItem>
                    <MudItem sm="6">
					    <MudTextField T="string" Label="Color Name"/>
				    </MudItem>
                    <MudItem sm="6">
					    <MudTextField T="string" Label="Size"/>
				    </MudItem>
                    <MudItem sm="6">
					    <MudTextField T="string" Label="Meta Tags. Separate with comma" Required="true" RequiredError="Meta Tags are required!" />
				    </MudItem>
                    <MudItem sm="11">
					    <MudTextField T="string" Label="Meta Description" Lines="5" Required="true" RequiredError="Meta Description are required!" />
				    </MudItem>
			    </MudGrid>

                <MudRadioGroup T="string" Class="mt-5 ps-0">
                    <MudRadio Size="Size.Small" Option="@("Color Code")" Color="Color.Primary">Color Code</MudRadio>
                    <MudRadio Size="Size.Small" Option="@("Size")" Color="Color.Primary">Size</MudRadio>
                </MudRadioGroup>

			    <div class="d-flex flex-column">
                    <MudCheckBox T="bool" Class="ml-n2" Label="Is Publish!"/>
                    <MudCheckBox T="bool" @bind-Checked="freeProduct" Class="ml-n2" Label="Is Has Free Product!"/>
                </div>

                <div class="mt-5">
                    <InputFile id="fileInput" hidden accept=".webp" OnChange="UploadImage" />

                    <MudButton HtmlTag="label"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               StartIcon="@Icons.Filled.CloudUpload"
                               for="fileInput">
                        Upload Images
                    </MudButton>
                </div>


                <div class="d-flex jsutify-center mt-5">
                    @foreach(var image in Images)
                    {
                        
                        <MudBadge OnClick="() => RemoveImage(image)" Icon="@Icons.Filled.DeleteOutline" Color="Color.Error" Overlap="true" Class="mx-6 my-4" Style="cursor:pointer">
                            <MudImage Src="@image" Alt="" Elevation="25" Class="rounded-lg mx-3" Style="width:100px;"/>
                        </MudBadge>
                    }
                </div>

                @if (freeProduct)
                {
                    <MudGrid>
                        <MudItem sm="6">
                            <MudAutocomplete T="string" Label="Product" ResetValueOnEmptyText="true" />
                        </MudItem>
                        <MudItem sm="6">
                            <MudTextField T="decimal" Label="Product Price" Variant="Variant.Text"/>
                        </MudItem>
                        <MudItem sm="6">
                            <MudTextField T="int" Label="Number Of Product" Variant="Variant.Text"/>
                        </MudItem>
                        <MudItem sm="6">
                            <MudTextField T="string" Label="Description" Variant="Variant.Text"/>
                        </MudItem>
                    </MudGrid>

                    <div class="mt-5">
                        <InputFile id="freeProduct" hidden accept=".webp" OnChange="FreeProductImage" />

                        <MudButton HtmlTag="label"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Filled.CloudUpload"
                                   for="freeProduct">
                            Upload Free Product Image
                        </MudButton>
                    </div>

                    <div class="d-flex jsutify-center mt-5">
                        <MudImage Src="@freeProductImage" Alt="" Elevation="25" Class="rounded-lg mx-3" Style="width:100px;"/>
                    </div>
                }

			    <div class="d-flex justify-end mt-6">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!successC)" Class="ml-auto">Submit</MudButton>
                </div>


		    </MudForm>
        </MudContainer>
    </MudPaper>
}

@code {

    // Rich Text Editor
    BlazoredTextEditor QuillNative;
    string QuillHTMLContent;

    public async void GetHTML()
    {
        QuillHTMLContent = await this.QuillNative.GetHTML();
        Console.WriteLine(QuillHTMLContent);
        StateHasChanged();
    }

    // Images
    private List<string> Images = new List<string>();

    private string freeProductImage { get; set; }

    // Upload Free Product Image
    private async Task FreeProductImage(InputFileChangeEventArgs e)
    {
        try
        {
            freeProductImage = await _base64.ConvertToBase64(51200, 600, 600, e);
        }
        catch(Exception error)
        {
            Snackbar.Add(error.Message, Severity.Error);
        }
    }

    // Upload Image
    private async Task UploadImage(InputFileChangeEventArgs e)
    {
        try
        {
            var image = await _base64.ConvertToBase64(51200, 600, 600, e);

            Images.Add(image);
        }
        catch(Exception error)
        {
            Snackbar.Add(error.Message, Severity.Error);
        }
    }

    // Remove Image
    private void RemoveImage(string image)
    {
        var index = Images.IndexOf(image);
        Images.RemoveAt(index);
    }

    // Color Value
    private string? _colorValue;

    // Free Product
    private bool freeProduct = false;

    // Product Type
    private string ProductType { get; set; } = "Compound";

    // Parent Product
    bool success;
    string[] errors = { };
    MudForm form;

    // Child Product
    bool successC;
    string[] errorsC = { };
    MudForm formC;

    // Show Child Product
    private bool showChildProduct { get; set; } = true;

    // Country Array
    private string[] countries =
            {"Afghanistan","Albania","Algeria","Andorra","Angola","Anguilla","Antigua &amp; Barbuda","Argentina","Armenia","Aruba","Australia","Austria","Azerbaijan","Bahamas","Bahrain","Bangladesh","Barbados","Belarus","Belgium","Belize","Benin","Bermuda","Bhutan","Bolivia","Bosnia &amp; Herzegovina","Botswana","Brazil","British Virgin Islands","Brunei","Bulgaria","Burkina Faso","Burundi","Cambodia","Cameroon","Cape Verde","Cayman Islands","Chad","Chile","China","Colombia","Congo","Cook Islands","Costa Rica","Cote D Ivoire","Croatia","Cruise Ship","Cuba","Cyprus","Czech Republic","Denmark","Djibouti","Dominica","Dominican Republic","Ecuador","Egypt","El Salvador","Equatorial Guinea","Estonia","Ethiopia","Falkland Islands","Faroe Islands","Fiji","Finland","France","French Polynesia","French West Indies","Gabon","Gambia","Georgia","Germany","Ghana","Gibraltar","Greece","Greenland","Grenada","Guam","Guatemala","Guernsey","Guinea","Guinea Bissau","Guyana","Haiti","Honduras","Hong Kong","Hungary","Iceland","India","Indonesia","Iran","Iraq","Ireland","Isle of Man","Israel","Italy","Jamaica","Japan","Jersey","Jordan","Kazakhstan","Kenya","Kuwait","Kyrgyz Republic","Laos","Latvia","Lebanon","Lesotho","Liberia","Libya","Liechtenstein","Lithuania","Luxembourg","Macau","Macedonia","Madagascar","Malawi","Malaysia","Maldives","Mali","Malta","Mauritania","Mauritius","Mexico","Moldova","Monaco","Mongolia","Montenegro","Montserrat","Morocco","Mozambique","Namibia","Nepal","Netherlands","Netherlands Antilles","New Caledonia","New Zealand","Nicaragua","Niger","Nigeria","Norway","Oman","Pakistan","Palestine","Panama","Papua New Guinea","Paraguay","Peru","Philippines","Poland","Portugal","Puerto Rico","Qatar","Reunion","Romania","Russia","Rwanda","Saint Pierre &amp; Miquelon","Samoa","San Marino","Satellite","Saudi Arabia","Senegal","Serbia","Seychelles","Sierra Leone","Singapore","Slovakia","Slovenia","South Africa","South Korea","Spain","Sri Lanka","St Kitts &amp; Nevis","St Lucia","St Vincent","St. Lucia","Sudan","Suriname","Swaziland","Sweden","Switzerland","Syria","Taiwan","Tajikistan","Tanzania","Thailand","Timor L'Este","Togo","Tonga","Trinidad &amp; Tobago","Tunisia","Turkey","Turkmenistan","Turks &amp; Caicos","Uganda","Ukraine","United Arab Emirates","United Kingdom","Uruguay","Uzbekistan","Venezuela","Vietnam","Virgin Islands (US)","Yemen","Zambia","Zimbabwe"};

    // Search Country
    private async Task<IEnumerable<string>> CountrySearch(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return countries;
        return countries.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
}
