@page "/create-product"

@using Blazored.TextEditor
@using Carnesia.Domain.CMS.CreateProduct
@using Carnesia.Shared.CMS.CreateProduct
@inject IBrand _brand
@inject ICategory _category
@inject ICreateProduct _createProduct
@inject IBase64 _base64
@inject IEncodeDecode _encode
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudPaper Class="pa-16 pt-10 ma-2">
	<MudContainer Fixed="true">
		<MudGrid Class="justify-center mb-5">
			<MudItem sm="6">
				<MudSelect T="string" @bind-Value="@ParentProductData.productType" Label="Product Type" AnchorOrigin="Origin.BottomCenter">
					<MudSelectItem Value="@("Compound")" />
					<MudSelectItem Value="@("Simple")" />
				</MudSelect>
			</MudItem>
		</MudGrid>

		<MudForm Class="mb-10" @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                    <MudGrid Class="justify-center">
						
                @if (ParentProductData.productType == "Compound")
                {
                    <MudItem sm="6">
						<MudTextField @bind-Value="ParentProductData.name" Label="Product Name" Required="true" RequiredError="Product Name is required!"/>
					</MudItem>
                }
                <MudItem sm="6">
				    <MudAutocomplete @bind-Value="ParentProductData.brandName" Label="Brand" ResetValueOnEmptyText="true" Required="true" SearchFunc="@BrandSearch" />
			    </MudItem>
			    <MudItem sm="6">
				    <MudAutocomplete @bind-Value="ParentProductData.originId" Label="Origin" SearchFunc="@CountrySearch" ResetValueOnEmptyText="true" Required="true" />
			    </MudItem>
            </MudGrid>
            </MudForm>

			<BlazoredTextEditor @ref="@QuillNative" Placeholder="Enter non HTML format like centering...">
                <ToolbarContent>
                    <span class="ql-formats">
                        <select class="ql-font">
                            <option selected=""></option>
                            <option value="serif"></option>
                            <option value="monospace"></option>
                        </select>
                        <select class="ql-size">
                            <option value="small"></option>
                            <option selected=""></option>
                            <option value="large"></option>
                            <option value="huge"></option>
                        </select>
                    </span>
                    <span class="ql-formats">
                        <button class="ql-bold"></button>
                        <button class="ql-italic"></button>
                        <button class="ql-underline"></button>
                        <button class="ql-strike"></button>
                    </span>
                    <span class="ql-formats">
                        <select class="ql-color"></select>
                        <select class="ql-background"></select>
                    </span>
                    <span class="ql-formats">
                        <button class="ql-list" value="ordered"></button>
                        <button class="ql-list" value="bullet"></button>
                        <button class="ql-indent" value="-1"></button>
                        <button class="ql-indent" value="+1"></button>
                        <select class="ql-align">
                            <option selected=""></option>
                            <option value="center"></option>
                            <option value="right"></option>
                            <option value="justify"></option>
                        </select>
                    </span>
                    <span class="ql-formats">
                        <button class="ql-link"></button>
                    </span>
                </ToolbarContent>
            </BlazoredTextEditor>

        <div class="d-flex justify-end mt-5">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" OnClick="SubmitParentProduct">Submit</MudButton>
        </div>
	</MudContainer>
</MudPaper>

@if (ShowChildProduct)
{
    <MudPaper Class="pa-16 pt-10 ma-2">
        <MudContainer Fixed="true">
            <MudForm @ref="formC" @bind-IsValid="@successC" @bind-Errors="@errorsC">
			    <MudGrid>
				    <MudItem sm="6">
					    <MudTextField @bind-Value="ChildProductInfoData.productName" Label="Product Name" Required="true" RequiredError="Product Name is required!"/>
				    </MudItem>
                    <MudItem sm="6">
					    <MudTextField @bind-Value="ChildProductInfoData.productsku" Label="Product SKU" Required="true" RequiredError="Product SKU is required!"/>
				    </MudItem>
				    <MudItem sm="6">
					    <MudTextField @bind-Value="ChildProductInfoData.weight" Label="Product Weight" Required="true" RequiredError="Product Weight is required!"/>
				    </MudItem>
				    <MudItem sm="6">
					    <MudTextField @bind-Value="ChildProductInfoData.productDimension" Label="Product Dimension" Required="true" RequiredError="Product Dimension is required!"/>
				    </MudItem>
                    <MudItem sm="6">
					    <MudNumericField @bind-Value="ChildProductInfoData.productPoints" Label="Product Points"/>
				    </MudItem>
                    <MudItem sm="6">
					    <MudNumericField @bind-Value="ChildProductInfoData.mrp" Label="MRP" Required="true" RequiredError="MRP is required!"/>
				    </MudItem>
                    <MudItem sm="6">
					    <MudNumericField @bind-Value="ChildProductInfoData.salesPrice" Label="Selling Price" Required="true" RequiredError="Selling Price is required!"/>
				    </MudItem>
                    <MudItem sm="6">
					    <MudNumericField @bind-Value="ChildProductInfoData.vatAmount" Label="Vat Amount"/>
				    </MudItem>
                    
                    <MudItem sm="6">
					    <MudTextField @bind-Value="ChildProductInfoData.upSells" Label="Up Sell SKU. Separate with comma" Required="true" RequiredError="Up Sell SKU are required!" />
				    </MudItem>
                    <MudItem sm="6">
					    <MudTextField @bind-Value="ChildProductInfoData.crossSells" Label="Cross Sell SKU. Separate with comma" Required="true" RequiredError="Cross Sell SKU are                                  required!" />
				    </MudItem>
                    <MudItem sm="6">
					    <MudTextField @bind-Value="ChildProductInfoData.metaTags" Label="Meta Tags. Separate with comma" Required="true" RequiredError="Meta Tags are required!" />
				    </MudItem>
                    <MudItem sm="6">
					    <MudTextField @bind-Value="ChildProductInfoData.seachTags" Label="Search Tags. Separate with comma" Required="true" RequiredError="Search Tags are required!" />
				    </MudItem>
                    <MudItem sm="6">
					    <MudTextField @bind-Value="ChildProductInfoData.metaTitle" Label="Meta Title" Required="true" RequiredError="Meta Title are required!" />
				    </MudItem>
                    @if (ChildProductInfoData.isColourCodeOrSize)
                    {
                        <MudItem sm="6">
                            <MudTextField @bind-Value="ChildProductInfoData.sizeOrQty" Label="Size" Required="true" RequiredError="Size is required!"/>
                        </MudItem>
                    }
                    else
                    {
                        <MudItem sm="6">
                            <MudColorPicker Label="Color Code" @bind-Text="ChildProductInfoData.colorCode" Style="@($"color: {ChildProductInfoData.colorCode};")" 
                             Placeholder="Select Color" ColorPickerMode="ColorPickerMode.HEX" DisableModeSwitch="true" />
                        </MudItem>                        
                        <MudItem sm="6">
                            <MudTextField @bind-Value="ChildProductInfoData.colorName" Label="Color Name" Required="true" RequiredError="Color Name is required!"/>
                        </MudItem>
                    }
                    <MudItem xs="12">
					    <MudTextField @bind-Value="ChildProductInfoData.metaDescription" Label="Meta Description" Lines="5" Required="true" RequiredError="Meta Description are                                    required!" />
				    </MudItem>
			    </MudGrid>

                <MudSwitch Class="mt-5" @bind-Checked="@ChildProductInfoData.isColourCodeOrSize" Label="Color Code or Size" Color="Color.Primary" />

			    <div class="d-flex flex-column">
                    <MudCheckBox Color="Color.Primary" @bind-Checked="@ChildProductInfoData.isPublish" Class="ml-n2" Label="Is Publish!"/>
                    <MudCheckBox Color="Color.Primary" @bind-Checked="@ChildProductInfoData.isHasFreeProd" Class="ml-n2" Label="Is Has Free Product!"/>
                </div>

                <div class="mt-5">
                    <InputFile id="fileInput" hidden accept=".webp" OnChange="UploadImage" />

                    <MudButton HtmlTag="label"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               StartIcon="@Icons.Filled.CloudUpload"
                               for="fileInput">
                        Upload Images
                    </MudButton>
                </div>


                <div class="d-flex jsutify-center mt-5">
                    @foreach(var image in ProductImages)
                    {
                        
                        <MudBadge OnClick="() => RemoveImage(image)" Icon="@Icons.Filled.DeleteOutline" Color="Color.Error" Overlap="true" Class="mx-6 my-4" Style="cursor:pointer">
                            <MudImage Src="@($"data:image/webp;base64,{image.base64Attch}")" Alt="" Elevation="25" Class="rounded-lg mx-3" Style="width:100px;"/>
                        </MudBadge>
                    }
                </div>

                <MudText Class="mt-5">Category</MudText>
                <MudGrid>
                    <MudItem md="4" sm="6">
                        <MudAutocomplete @bind-Value="CategoryData.parentCatName" OnBlur="GetParentCatID" SearchFunc="@ParentCatSearch" Label="Category" ResetValueOnEmptyText="true" />
                    </MudItem>
                    <MudItem md="4" sm="6">
                        <MudAutocomplete @bind-Value="CategoryData.childCatName" OnBlur="GetChildId" Label="Child Category" SearchFunc="@ChildCatSearch" ResetValueOnEmptyText="true" />
                    </MudItem>
                    <MudItem md="4" sm="6">
                        <MudAutocomplete @bind-Value="CategoryData.gChildCatName" OnBlur="GetGrandChildId" Label="Grand Child Category" SearchFunc="@GrandChildCatSearch"                                             ResetValueOnEmptyText="true" />
                    </MudItem>
                </MudGrid>

                @if (ChildProductInfoData.isHasFreeProd)
                {
                    <MudText Class="mt-16">Free Products</MudText>
                    <div class="my-5 d-flex justify-end">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenFreeProductModal">Add Free Product</MudButton>
                    </div>

                    <MudTable Items="@Elements" Hover="true" Dense="true">
                        <HeaderContent>
                            <MudTh>Name</MudTh>
                            <MudTh>SKU</MudTh>
                            <MudTh>Price</MudTh>
                            <MudTh>Number of Products</MudTh>
                            <MudTh>Image</MudTh>
                            <MudTh>Action</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Name">@context.name</MudTd>
                            <MudTd DataLabel="SKU">@context.sku</MudTd>
                            <MudTd DataLabel="Price">@context.price</MudTd>
                            <MudTd DataLabel="Number of Products">@context.numbOfFreeProd</MudTd>
                            <MudTd DataLabel="Image">
                                <MudImage Src="@($"data:image/webp;base64,{context.base64Attch}")" Alt="" Elevation="25" Class="rounded-lg mx-3" Style="width:100px;"/>
                            </MudTd>
                            <MudTd DataLabel="Action">
                                <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="() => RemoveFreeProductFromList(context)">Remove</MudButton>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                }

			    <div class="d-flex justify-end mt-6">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!successC)" Class="ml-auto" OnClick="NewChildProduct">Submit</MudButton>
                </div>
		    </MudForm>
        </MudContainer>
    </MudPaper>
}

@code {
    // Page On Load
    protected override async Task OnInitializedAsync()
    {
        await GetBrands();
        await GetParentCatsString();
    }

    // Product DTO
    private ProductDTO NewProduct = new ProductDTO();

    // Show Child Product
    private bool ShowChildProduct { get; set; } = false;

    // Parent Product Form Ref
    bool success;
    string[] errors = { };
    MudForm form;

    // Parent Product ID
    private int ParentProductID { get; set; }

    // Rich Text
    BlazoredTextEditor QuillNative;

    // Parent Product Class
    private ParentProductDTO ParentProductData = new ParentProductDTO();

    // Brands Array
    private string[] Brands;

    private async Task GetBrands()
    {
        Brands = await _brand.GetBrandsNameAsString();
    }

    // Autocomplite Search Func for Brand
    private async Task<IEnumerable<string>> BrandSearch(string value)
    {
        return string.IsNullOrEmpty(value) ? Brands : Brands.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    // Submit Parent Product
    private async Task SubmitParentProduct()
    {
        // Temp
        var Temp_Des = await this.QuillNative.GetHTML();
        // Brand ID
        var brand = await _brand.GetBrand(ParentProductData.brandName);
        ParentProductData.brandId = brand.brandId;

        // Description
        ParentProductData.description = await _encode.EncodeStringToBase64(Temp_Des);
        Console.WriteLine(await _encode.EncodeStringToBase64(Temp_Des));

        try
        {
            var result = await _createProduct.CreateParentProduct(ParentProductData);
            if (!String.IsNullOrEmpty(result))
            {
                ParentProductID = int.Parse(result);
                ShowChildProduct = true;
                Snackbar.Add("Parent Product Created Successfully!", Severity.Success);
            }

            Snackbar.Add("Something Went Wrong!", Severity.Error);
            
        }
        catch(Exception)
        {
            Snackbar.Add("Something Went Wrong!", Severity.Error);
            throw;
        }
    }


    // Child Product Form Ref
    bool successC;
    string[] errorsC = { };
    MudForm formC;

    // Child Product Info Class
    private ChildProductInfoDTO ChildProductInfoData = new ChildProductInfoDTO();

    // Free Product Class
    private FreeProductDTO FreeProductData = new FreeProductDTO();

    private List<FreeProductDTO> Elements = new List<FreeProductDTO>();

    // Category Class
    private ProductCategoryDTO CategoryData = new ProductCategoryDTO();

    private List<ProductCategoryDTO> CategoryList = new List<ProductCategoryDTO>();

    // Category List
    private string[] ParentCats = new string[]{};
    private string[] ChildCats = new string[]{};
    private string[] GrandChildCats  = new string[]{};

    private async Task GetParentCatsString()
    {
        ParentCats = await _category.GetParentCatAsString();
    }

    private async Task GetParentCatID()
    {
        if (GrandChildCats.Length > 0)
        {
            Array.Clear(GrandChildCats, 0, GrandChildCats.Length);
            CategoryData.gChildCatName = String.Empty;
        }

        CategoryData.childCatName = String.Empty;

        var result = await _category.GetParentCat(CategoryData.parentCatName);

        CategoryData.parentCatId = result.id;

        ChildCats = await _category.GetChildCatAsString(result.child);
    }

    private async Task GetChildId()
    {
        var result = await _category.GetParentCat(CategoryData.parentCatName);

        var Child = result.child.FirstOrDefault(x => x.childCat == CategoryData.childCatName);

        CategoryData.childCatId = Child.id;

        GrandChildCats = await _category.GetGrandChildCatAsString(Child.grandChild);
    }

    private async Task GetGrandChildId()
    {
        var result = await _category.GetParentCat(CategoryData.parentCatName);

        var Child = result.child.FirstOrDefault(x => x.childCat == CategoryData.childCatName);

        var GrandChild = Child.grandChild.FirstOrDefault(x => x.gChildCat == CategoryData.gChildCatName);

        CategoryData.gChildCatId = GrandChild.id;
    }

    // Autocomplite Search Func for ParentCat
    private async Task<IEnumerable<string>> ParentCatSearch(string value)
    {
        return string.IsNullOrEmpty(value) ? ParentCats : ParentCats.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    // Autocomplite Search Func for ChildCat
    private async Task<IEnumerable<string>> ChildCatSearch(string value)
    {
        return string.IsNullOrEmpty(value) ? ChildCats : ChildCats.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    // Autocomplite Search Func for GrandChildCat
    private async Task<IEnumerable<string>> GrandChildCatSearch(string value)
    {
        return string.IsNullOrEmpty(value) ? GrandChildCats : GrandChildCats.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    // Free Product Modal
    private async Task OpenFreeProductModal()
    {
        var parameters = new DialogParameters();
        parameters.Add("FormData", new FreeProductDTO());

        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
        var dialog = await DialogService.Show<FreeProductModal>("Add Free Product", parameters, options).Result;

        if (dialog.Data != null)
        {
            FreeProductDTO newFreeProduct = dialog.Data as FreeProductDTO;
            Elements.Add(newFreeProduct);
        }
    }

    // Remove Free Product From List
    private void RemoveFreeProductFromList(FreeProductDTO product)
    {
        Elements.Remove(product);
    }

    // Product Images
    private List<ProductImageDTO> ProductImages = new List<ProductImageDTO>();

    private ProductImageDTO ProductImage = new ProductImageDTO();

    // Upload Image
    private async Task UploadImage(InputFileChangeEventArgs e)
    {
        try
        {
            var ImageBase = await _base64.ConvertToBase64(51200, 600, 600, e);

            var productImage = new ProductImageDTO()
            {
                base64Attch = ImageBase,
                altImageName = e.File.Name
            };

            ProductImages.Add(productImage);
        }
        catch(Exception error)
        {
            Snackbar.Add(error.Message, Severity.Error);
        }
    }

    // Remove Image 
    private void RemoveImage(ProductImageDTO Image)
    {
        ProductImages.Remove(Image);
    }

    // Country Array
    private string[] countries =
            {"Afghanistan", "Albania", "Algeria", "American Samoa", "Andorra", "Angola", "Anguilla", "Antarctica", "Antigua and Barbuda", "Argentina", "Armenia", "Aruba", "Australia", "Austria", "Azerbaijan", "Bahamas", "Bahrain", "Bangladesh", "Barbados", "Belarus", "Belgium", "Belize", "Benin", "Bermuda", "Bhutan", "Bolivia", "Bosnia and Herzegowina", "Botswana", "Bouvet Island", "Brazil", "British Indian Ocean Territory", "Brunei Darussalam", "Bulgaria", "Burkina Faso", "Burundi", "Cambodia", "Cameroon", "Canada", "Cape Verde", "Cayman Islands", "Central African Republic", "Chad", "Chile", "China", "Christmas Island", "Cocos (Keeling) Islands", "Colombia", "Comoros", "Congo", "Congo, the Democratic Republic of the", "Cook Islands", "Costa Rica", "Cote d'Ivoire", "Croatia (Hrvatska)", "Cuba", "Cyprus", "Czech Republic", "Denmark", "Djibouti", "Dominica", "Dominican Republic", "East Timor", "Ecuador", "Egypt", "El Salvador", "Equatorial Guinea", "Eritrea", "Estonia", "Ethiopia", "Falkland Islands (Malvinas)", "Faroe Islands", "Fiji", "Finland", "France", "France Metropolitan", "French Guiana", "French Polynesia", "French Southern Territories", "Gabon", "Gambia", "Georgia", "Germany", "Ghana", "Gibraltar", "Greece", "Greenland", "Grenada", "Guadeloupe", "Guam", "Guatemala", "Guinea", "Guinea-Bissau", "Guyana", "Haiti", "Heard and Mc Donald Islands", "Holy See (Vatican City State)", "Honduras", "Hong Kong", "Hungary", "Iceland", "India", "Indonesia", "Iran", "Iraq", "Ireland", "Israel", "Italy", "Jamaica", "Japan", "Jordan", "Kazakhstan", "Kenya", "Kiribati", "Kuwait", "Kyrgyzstan", "Lao, People's Democratic Republic", "Latvia", "Lebanon", "Lesotho", "Liberia", "Libyan Arab Jamahiriya", "Liechtenstein", "Lithuania", "Luxembourg", "Macau", "Macedonia, The Former Yugoslav Republic of", "Madagascar", "Malawi", "Malaysia", "Maldives", "Mali", "Malta", "Marshall Islands", "Martinique", "Mauritania", "Mauritius", "Mayotte", "Mexico", "Micronesia, Federated States of", "Moldova, Republic of", "Monaco", "Mongolia", "Montserrat", "Morocco", "Mozambique", "Myanmar", "Namibia", "Nauru", "Nepal", "Netherlands", "Netherlands Antilles", "New Caledonia", "New Zealand", "Nicaragua", "Niger", "Nigeria", "Niue", "Norfolk Island", "North Korea", "Northern Mariana Islands", "Norway", "Oman", "Pakistan", "Palau", "Panama", "Papua New Guinea", "Paraguay", "Peru", "Philippines", "Pitcairn", "Poland", "Portugal", "Puerto Rico", "Qatar", "Reunion", "Romania", "Russian Federation", "Rwanda", "Saint Kitts and Nevis", "Saint Lucia", "Saint Vincent and the Grenadines", "Samoa", "San Marino", "Sao Tome and Principe", "Saudi Arabia", "Senegal", "Seychelles", "Sierra Leone", "Singapore", "Slovakia (Slovak Republic)", "Slovenia", "Solomon Islands", "Somalia", "South Africa", "South Korea", "South Georgia and the South Sandwich Islands", "Spain", "Sri Lanka", "St. Helena", "St. Pierre and Miquelon", "Sudan", "Suriname", "Svalbard and Jan Mayen Islands", "Swaziland", "Sweden", "Switzerland", "Syrian Arab Republic", "Taiwan, Province of China", "Tajikistan", "Tanzania, United Republic of", "Thailand", "Togo", "Tokelau", "Tonga", "Trinidad and Tobago", "Tunisia", "Turkey", "Turkmenistan", "Turks and Caicos Islands", "Tuvalu", "Uganda", "Ukraine", "United Arab Emirates", "United Kingdom", "United States", "United States Minor Outlying Islands", "Uruguay", "Uzbekistan", "Vanuatu", "Venezuela", "Vietnam", "Virgin Islands (British)", "Virgin Islands (U.S.)", "Wallis and Futuna Islands", "Western Sahara", "Yemen", "Yugoslavia", "Zambia", "Zimbabwe"};

    // Search Country
    private async Task<IEnumerable<string>> CountrySearch(string value)
    {
        return string.IsNullOrEmpty(value) ? countries : countries.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }


    private List<ProductCategoryDTO> ProductCategories = new List<ProductCategoryDTO>();

    // Create Child Product'
    private async Task NewChildProduct()
    {
        if (ProductImages.Count == 0)
        {
            Snackbar.Add("Please Add Product Image!", Severity.Error);
            return;
        }

        if (String.IsNullOrEmpty(CategoryData.parentCatName))
        {
            Snackbar.Add("Please Add Parent Category!", Severity.Error);
            return;
        }

        if (ChildProductInfoData.isHasFreeProd == true && Elements.Count == 0)
        {
            Snackbar.Add("Please Add Free Product Or Uncheck Is Has Free Product!", Severity.Error);
            return;
        }

        if (ChildProductInfoData.isColourCodeOrSize == false && String.IsNullOrEmpty(ChildProductInfoData.colorCode))
        {
            Snackbar.Add("Please Add Color Code!", Severity.Error);
            return;
        }

        ProductCategories.Add(CategoryData);

        ChildProductInfoData.productParentId = ParentProductID;

        NewProduct.productDTO = ChildProductInfoData;
        NewProduct.freeProducts = Elements;
        NewProduct.images = ProductImages;
        NewProduct.prodCategories = ProductCategories;

        try
        {
            await _createProduct.CreateChildProduct(NewProduct);
            Snackbar.Add("Success!", Severity.Success);

        }
        catch(Exception)
        {
            Snackbar.Add("Something went Wrong!", Severity.Error);
            throw;
        }


    }
}
