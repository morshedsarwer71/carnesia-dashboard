@page "/create-product"

@using Blazored.TextEditor
@using Carnesia.Domain.CMS.CreateProduct
@inject IBrand _brand
@inject ICreateProduct _createProduct
@inject IBase64 _base64
@inject ISnackbar Snackbar

<MudPaper Class="pa-16 pt-10 ma-2">
	<MudContainer Fixed="true">
		<MudGrid Class="justify-center mb-5">
			<MudItem sm="6">
				<MudSelect T="string" @bind-Value="@ParentProductData.productType" Label="Product Type" AnchorOrigin="Origin.BottomCenter">
					<MudSelectItem Value="@("Compound")" />
					<MudSelectItem Value="@("Simple")" />
				</MudSelect>
			</MudItem>
		</MudGrid>

		<MudForm Class="mb-10" @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                    <MudGrid Class="justify-center">
						
                @if (ParentProductData.productType == "Compound")
                {
                    <MudItem sm="6">
						<MudTextField @bind-Value="ParentProductData.name" Label="Product Name" Required="true" RequiredError="Product Name is required!"/>
					</MudItem>
                }
                <MudItem sm="6">
				    <MudAutocomplete @bind-Value="ParentProductData.brandName" Label="Brand" ResetValueOnEmptyText="true" Required="true" SearchFunc="@BrandSearch" />
			    </MudItem>
			    <MudItem sm="6">
				    <MudAutocomplete @bind-Value="ParentProductData.originId" Label="Origin" SearchFunc="@CountrySearch" ResetValueOnEmptyText="true" Required="true" />
			    </MudItem>
            </MudGrid>
            </MudForm>

			<BlazoredTextEditor @ref="@QuillNative" Placeholder="Enter non HTML format like centering...">
                <ToolbarContent>
                    <span class="ql-formats">
                        <select class="ql-font">
                            <option selected=""></option>
                            <option value="serif"></option>
                            <option value="monospace"></option>
                        </select>
                        <select class="ql-size">
                            <option value="small"></option>
                            <option selected=""></option>
                            <option value="large"></option>
                            <option value="huge"></option>
                        </select>
                    </span>
                    <span class="ql-formats">
                        <button class="ql-bold"></button>
                        <button class="ql-italic"></button>
                        <button class="ql-underline"></button>
                        <button class="ql-strike"></button>
                    </span>
                    <span class="ql-formats">
                        <select class="ql-color"></select>
                        <select class="ql-background"></select>
                    </span>
                    <span class="ql-formats">
                        <button class="ql-list" value="ordered"></button>
                        <button class="ql-list" value="bullet"></button>
                        <button class="ql-indent" value="-1"></button>
                        <button class="ql-indent" value="+1"></button>
                        <select class="ql-align">
                            <option selected=""></option>
                            <option value="center"></option>
                            <option value="right"></option>
                            <option value="justify"></option>
                        </select>
                    </span>
                    <span class="ql-formats">
                        <button class="ql-link"></button>
                    </span>
                </ToolbarContent>
            </BlazoredTextEditor>

        <div class="d-flex justify-end mt-5">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" OnClick="SubmitParentProduct">Submit</MudButton>
        </div>
	</MudContainer>
</MudPaper>

@if (ShowChildProduct)
{
    <MudPaper Class="pa-16 pt-10 ma-2">
        <MudContainer Fixed="true">
            <MudForm @ref="formC" @bind-IsValid="@successC" @bind-Errors="@errorsC">
			    <MudGrid Class="justify-center">
				    <MudItem sm="6">
					    <MudTextField T="string" Label="Product SKU" Required="true" RequiredError="Product SKU is required!"/>
				    </MudItem>
				    <MudItem sm="6">
					    <MudTextField T="string" Label="Product Weight" Required="true" RequiredError="Product Weight is required!"/>
				    </MudItem>
				    <MudItem sm="6">
					    <MudTextField T="string" Label="Product Dimension" Required="true" RequiredError="Product Dimension is required!"/>
				    </MudItem>
                    <MudItem sm="6">
					    <MudTextField T="int?" Label="Product Points"/>
				    </MudItem>
                    <MudItem sm="6">
					    <MudTextField T="decimal?" Label="MRP" Required="true" RequiredError="MRP is required!"/>
				    </MudItem>
                    <MudItem sm="6">
					    <MudTextField T="decimal?" Label="Selling Price" Required="true" RequiredError="Selling Price is required!"/>
				    </MudItem>
                    <MudItem sm="6">
					    <MudColorPicker Label="Color Code" @bind-Text="_colorValue" Style="@($"color: {_colorValue};")" Placeholder="Select Color"                                                                 ColorPickerMode="ColorPickerMode.HEX" DisableModeSwitch="true"  />
				    </MudItem>
                    <MudItem sm="6">
					    <MudTextField T="string" Label="Color Name"/>
				    </MudItem>
                    <MudItem sm="6">
					    <MudTextField T="string" Label="Size"/>
				    </MudItem>
                    <MudItem sm="6">
					    <MudTextField T="string" Label="Meta Tags. Separate with comma" Required="true" RequiredError="Meta Tags are required!" />
				    </MudItem>
                    <MudItem sm="11">
					    <MudTextField T="string" Label="Meta Description" Lines="5" Required="true" RequiredError="Meta Description are required!" />
				    </MudItem>
			    </MudGrid>

                <MudRadioGroup T="string" Class="mt-5 ps-0">
                    <MudRadio Size="Size.Small" Option="@("Color Code")" Color="Color.Primary">Color Code</MudRadio>
                    <MudRadio Size="Size.Small" Option="@("Size")" Color="Color.Primary">Size</MudRadio>
                </MudRadioGroup>

			    <div class="d-flex flex-column">
                    <MudCheckBox T="bool" Class="ml-n2" Label="Is Publish!"/>
                    <MudCheckBox T="bool" @bind-Checked="freeProduct" Class="ml-n2" Label="Is Has Free Product!"/>
                </div>

                <div class="mt-5">
                    <InputFile id="fileInput" hidden accept=".webp" OnChange="UploadImage" />

                    <MudButton HtmlTag="label"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               StartIcon="@Icons.Filled.CloudUpload"
                               for="fileInput">
                        Upload Images
                    </MudButton>
                </div>


                <div class="d-flex jsutify-center mt-5">
                    @foreach(var image in Images)
                    {
                        
                        <MudBadge OnClick="() => RemoveImage(image)" Icon="@Icons.Filled.DeleteOutline" Color="Color.Error" Overlap="true" Class="mx-6 my-4" Style="cursor:pointer">
                            <MudImage Src="@image" Alt="" Elevation="25" Class="rounded-lg mx-3" Style="width:100px;"/>
                        </MudBadge>
                    }
                </div>

                @if (freeProduct)
                {
                    <MudGrid>
                        <MudItem sm="6">
                            <MudAutocomplete T="string" Label="Product" ResetValueOnEmptyText="true" />
                        </MudItem>
                        <MudItem sm="6">
                            <MudTextField T="decimal" Label="Product Price" Variant="Variant.Text"/>
                        </MudItem>
                        <MudItem sm="6">
                            <MudTextField T="int" Label="Number Of Product" Variant="Variant.Text"/>
                        </MudItem>
                        <MudItem sm="6">
                            <MudTextField T="string" Label="Description" Variant="Variant.Text"/>
                        </MudItem>
                    </MudGrid>

                    <div class="mt-5">
                        <InputFile id="freeProduct" hidden accept=".webp" OnChange="FreeProductImage" />

                        <MudButton HtmlTag="label"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Filled.CloudUpload"
                                   for="freeProduct">
                            Upload Free Product Image
                        </MudButton>
                    </div>

                    <div class="d-flex jsutify-center mt-5">
                        <MudImage Src="@freeProductImage" Alt="" Elevation="25" Class="rounded-lg mx-3" Style="width:100px;"/>
                    </div>
                }

			    <div class="d-flex justify-end mt-6">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!successC)" Class="ml-auto">Submit</MudButton>
                </div>


		    </MudForm>
        </MudContainer>
    </MudPaper>
}

@code {
    // Page On Load
    protected override async Task OnInitializedAsync()
    {
        await GetBrands();
    }

    // Show Child Product
    private bool ShowChildProduct { get; set; }

    // Parent Product Form Ref
    bool success;
    string[] errors = { };
    MudForm form;

    // Parent Product ID
    private int ParentProductID { get; set; }

    // Rich Text
    BlazoredTextEditor QuillNative;

    // Parent Product Class
    private ParentProductDTO ParentProductData = new ParentProductDTO();

    // Brands Array
    private string[] Brands;

    private async Task GetBrands()
    {
        Brands = await _brand.GetBrandsNameAsString();
    }

    // Autocomplite Search Func for Brand
    private async Task<IEnumerable<string>> BrandSearch(string value)
    {
        return string.IsNullOrEmpty(value) ? Brands : Brands.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    // Submit Parent Product
    private async Task SubmitParentProduct()
    {
        // Brand ID
        var brand = await _brand.GetBrand(ParentProductData.brandName);
        ParentProductData.brandId = brand.brandId;

        // Description
        ParentProductData.description = await this.QuillNative.GetHTML();

        try
        {
            var result = await _createProduct.CreateParentProduct(ParentProductData);
            ParentProductID = int.Parse(result);
            ShowChildProduct = true;
            Snackbar.Add("Parent Product Created Successfully!", Severity.Success);
        }
        catch(Exception)
        {
            Snackbar.Add("Something Went Wrong!", Severity.Error);
            throw;
        }
    }



















    // Images
    private List<string> Images = new List<string>();

    private string freeProductImage { get; set; }

    // Upload Free Product Image
    private async Task FreeProductImage(InputFileChangeEventArgs e)
    {
        try
        {
            freeProductImage = await _base64.ConvertToBase64(51200, 600, 600, e);
        }
        catch(Exception error)
        {
            Snackbar.Add(error.Message, Severity.Error);
        }
    }

    // Upload Image
    private async Task UploadImage(InputFileChangeEventArgs e)
    {
        try
        {
            var image = await _base64.ConvertToBase64(51200, 600, 600, e);

            Images.Add(image);
        }
        catch(Exception error)
        {
            Snackbar.Add(error.Message, Severity.Error);
        }
    }

    // Remove Image
    private void RemoveImage(string image)
    {
        var index = Images.IndexOf(image);
        Images.RemoveAt(index);
    }

    // Color Value
    private string? _colorValue;

    // Free Product
    private bool freeProduct = false;

    // Child Product
    bool successC;
    string[] errorsC = { };
    MudForm formC;



    // Country Array
    private string[] countries =
            {"Afghanistan", "Albania", "Algeria", "American Samoa", "Andorra", "Angola", "Anguilla", "Antarctica", "Antigua and Barbuda", "Argentina", "Armenia", "Aruba", "Australia", "Austria", "Azerbaijan", "Bahamas", "Bahrain", "Bangladesh", "Barbados", "Belarus", "Belgium", "Belize", "Benin", "Bermuda", "Bhutan", "Bolivia", "Bosnia and Herzegowina", "Botswana", "Bouvet Island", "Brazil", "British Indian Ocean Territory", "Brunei Darussalam", "Bulgaria", "Burkina Faso", "Burundi", "Cambodia", "Cameroon", "Canada", "Cape Verde", "Cayman Islands", "Central African Republic", "Chad", "Chile", "China", "Christmas Island", "Cocos (Keeling) Islands", "Colombia", "Comoros", "Congo", "Congo, the Democratic Republic of the", "Cook Islands", "Costa Rica", "Cote d'Ivoire", "Croatia (Hrvatska)", "Cuba", "Cyprus", "Czech Republic", "Denmark", "Djibouti", "Dominica", "Dominican Republic", "East Timor", "Ecuador", "Egypt", "El Salvador", "Equatorial Guinea", "Eritrea", "Estonia", "Ethiopia", "Falkland Islands (Malvinas)", "Faroe Islands", "Fiji", "Finland", "France", "France Metropolitan", "French Guiana", "French Polynesia", "French Southern Territories", "Gabon", "Gambia", "Georgia", "Germany", "Ghana", "Gibraltar", "Greece", "Greenland", "Grenada", "Guadeloupe", "Guam", "Guatemala", "Guinea", "Guinea-Bissau", "Guyana", "Haiti", "Heard and Mc Donald Islands", "Holy See (Vatican City State)", "Honduras", "Hong Kong", "Hungary", "Iceland", "India", "Indonesia", "Iran", "Iraq", "Ireland", "Israel", "Italy", "Jamaica", "Japan", "Jordan", "Kazakhstan", "Kenya", "Kiribati", "Kuwait", "Kyrgyzstan", "Lao, People's Democratic Republic", "Latvia", "Lebanon", "Lesotho", "Liberia", "Libyan Arab Jamahiriya", "Liechtenstein", "Lithuania", "Luxembourg", "Macau", "Macedonia, The Former Yugoslav Republic of", "Madagascar", "Malawi", "Malaysia", "Maldives", "Mali", "Malta", "Marshall Islands", "Martinique", "Mauritania", "Mauritius", "Mayotte", "Mexico", "Micronesia, Federated States of", "Moldova, Republic of", "Monaco", "Mongolia", "Montserrat", "Morocco", "Mozambique", "Myanmar", "Namibia", "Nauru", "Nepal", "Netherlands", "Netherlands Antilles", "New Caledonia", "New Zealand", "Nicaragua", "Niger", "Nigeria", "Niue", "Norfolk Island", "North Korea", "Northern Mariana Islands", "Norway", "Oman", "Pakistan", "Palau", "Panama", "Papua New Guinea", "Paraguay", "Peru", "Philippines", "Pitcairn", "Poland", "Portugal", "Puerto Rico", "Qatar", "Reunion", "Romania", "Russian Federation", "Rwanda", "Saint Kitts and Nevis", "Saint Lucia", "Saint Vincent and the Grenadines", "Samoa", "San Marino", "Sao Tome and Principe", "Saudi Arabia", "Senegal", "Seychelles", "Sierra Leone", "Singapore", "Slovakia (Slovak Republic)", "Slovenia", "Solomon Islands", "Somalia", "South Africa", "South Korea", "South Georgia and the South Sandwich Islands", "Spain", "Sri Lanka", "St. Helena", "St. Pierre and Miquelon", "Sudan", "Suriname", "Svalbard and Jan Mayen Islands", "Swaziland", "Sweden", "Switzerland", "Syrian Arab Republic", "Taiwan, Province of China", "Tajikistan", "Tanzania, United Republic of", "Thailand", "Togo", "Tokelau", "Tonga", "Trinidad and Tobago", "Tunisia", "Turkey", "Turkmenistan", "Turks and Caicos Islands", "Tuvalu", "Uganda", "Ukraine", "United Arab Emirates", "United Kingdom", "United States", "United States Minor Outlying Islands", "Uruguay", "Uzbekistan", "Vanuatu", "Venezuela", "Vietnam", "Virgin Islands (British)", "Virgin Islands (U.S.)", "Wallis and Futuna Islands", "Western Sahara", "Yemen", "Yugoslavia", "Zambia", "Zimbabwe"};

    // Search Country
    private async Task<IEnumerable<string>> CountrySearch(string value)
    {
        return string.IsNullOrEmpty(value) ? countries : countries.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
}
