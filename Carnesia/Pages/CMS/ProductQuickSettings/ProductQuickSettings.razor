@page "/product-quick-setting"

@using Carnesia.Domain.CMS.ProductList
@using Carnesia.Domain.Common.POCO
@using Carnesia.Shared.CMS.ProductQuickSettings
@inject IProductList _productList
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudPaper Class="py-16 px-3 ma-2">
	<MudContainer Fixed="true">
		<MudTable Items="@Elements" Dense="@tableCommon.Dense" Hover="@tableCommon.Hover" Bordered="@tableCommon.Bordered" Striped="@tableCommon.Striped" Filter="new Func<ProductQuickSettingDTO,bool>(FilterFuncInitial)">
            <ToolBarContent>
                <MudSpacer />
                <MudSpacer />
                <MudTextField @bind-Value="tableCommon.SearchTerm" Immediate="false" Placeholder="SKU, Product Name, Product Code" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"/>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Product Name</MudTh>
                <MudTh>SKU</MudTh>
                <MudTh>Product Code</MudTh>
                <MudTh>MRP</MudTh>
                <MudTh>Discount</MudTh>
                <MudTh>Discount Type</MudTh>
                <MudTh>Edit</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Product Name">@context.productName</MudTd>
                <MudTd DataLabel="SKU">@context.productsku</MudTd>
                <MudTd DataLabel="Product Code">@context.productCode</MudTd>
                <MudTd DataLabel="MRP">@context.mrp</MudTd>
                <MudTd DataLabel="Discount">@context.discount</MudTd>
                <MudTd DataLabel="Discount Type">@(context.isPercent ? "Percent" : "Cash")</MudTd>
                <MudTd DataLabel="Edit">
                    <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="() => OpenUpdateModal(context)">Edit</MudButton>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>

        <div class="d-flex flex-wrap mt-4">
            <MudSwitch @bind-Checked="@tableCommon.Hover" Color="Color.Primary">Hover</MudSwitch>
            <MudSwitch @bind-Checked="@tableCommon.Dense" Color="Color.Secondary">Dense</MudSwitch>
            <MudSwitch @bind-Checked="@tableCommon.Striped" Color="Color.Tertiary">Striped</MudSwitch>
            <MudSwitch @bind-Checked="@tableCommon.Bordered" Color="Color.Warning">Bordered</MudSwitch>
        </div>
	</MudContainer>
</MudPaper>

@code {
    // Page On Load
    protected override async Task OnInitializedAsync()
    {
        await GetProducts();
    }

    // Table Customaization
    private TableCommon tableCommon = new TableCommon();

    // Product List
    private List<ProductQuickSettingDTO> Elements = new List<ProductQuickSettingDTO>();

    // Get Products
    private async Task GetProducts()
    {
        Elements = await _productList.GetAllProducts();
    }

    // Update Modal
    private async Task OpenUpdateModal(ProductQuickSettingDTO product)
    {
        var parameters = new DialogParameters();
        parameters.Add("FormData", new ProductQuickSettingUpdateDTO()
        {
            productId = product.productId,
            mrp = product.mrp,
            discount = product.discount,
            isNewArrival = product.isNewArrival,
            isPublish = product.isPublish,
            isPercent = product.isPercent
        });

        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
        var dialog = await DialogService.Show<ProduuctQuickUpdateModal>("Update Product", parameters, options).Result;

        if (dialog.Data != null)
        {
            ProductQuickSettingUpdateDTO newProduct = dialog.Data as ProductQuickSettingUpdateDTO;

            try
            {
                var result = await _productList.QuickSetting(newProduct);
                if (result)
                {
                    Snackbar.Add("Product Updated Successfully!", Severity.Success);
                    await GetProducts();
                    return;
                }
                Snackbar.Add("Something Went Wrong!", Severity.Error);
            }
            catch (Exception)
            {
                Snackbar.Add("Something Went Wrong!", Severity.Error);
                throw;
            }
        }
    }

    // Table Search
    private bool FilterFuncInitial(ProductQuickSettingDTO element) => FilterFunc(element, tableCommon.SearchTerm);

    private bool FilterFunc(ProductQuickSettingDTO element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.productName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.productsku.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.productCode.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}
