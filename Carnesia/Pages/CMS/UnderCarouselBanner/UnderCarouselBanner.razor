@page "/under-carousel-banner"

@using Carnesia.Domain.CMS.UnderCarouselBanner
@using Carnesia.Domain.Common.POCO
@using Carnesia.Shared.CMS.UnderCarouselBanner
@inject IUnderCarouselBanner _underBanner
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudPaper Class="pa-16 ma-2">
	<MudContainer Fixed="true">
		<div class="d-flex justify-end mb-5">
			<MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Filled.Add" OnClick="OpenAddBannerModal" >Add New Banner</MudButton>
		</div>

		<MudTable Items="@Elements" Dense="@tableCommon.Dense" Hover="@tableCommon.Hover" Bordered="@tableCommon.Bordered" Striped="@tableCommon.Striped">
			<ToolBarContent>
                <MudSpacer />
                <MudSpacer />
                <MudTextField @bind-Value="tableCommon.SearchTerm" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"                   Class="mt-0"/>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Placement</MudTh>
                <MudTh>Image</MudTh>
                <MudTh>URL</MudTh>
                <MudTh>Publish</MudTh>
                <MudTh>Action</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">@context.bannerName</MudTd>
                <MudTd DataLabel="Placement">@context.bannerPlacement</MudTd>
                <MudTd DataLabel="Image">
                    <MudImage Src="@($"https://carnesiaapi.bespokeit.io/{context.imagePath}")" Alt="@context.bannerName" Elevation="25" Class="rounded-lg" Style="width:50px" />
                </MudTd>
                <MudTd DataLabel="URL">@context.url</MudTd>
                <MudTd DataLabel="Publish">
                    <MudSwitch @bind-Checked="@context.isPublished" Color="Color.Primary" @onclick="(() => TogglePublish(context.id))"/>
                </MudTd>
                <MudTd DataLabel="Action">
                    <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="() => DeleteBanner(context.id)">Delete</MudButton>
                </MudTd>
            </RowTemplate>
			<PagerContent>
                <MudTablePager />
            </PagerContent>
		</MudTable>

		<div class="d-flex flex-wrap mt-4">
            <MudSwitch @bind-Checked="@tableCommon.Hover" Color="Color.Primary">Hover</MudSwitch>
            <MudSwitch @bind-Checked="@tableCommon.Dense" Color="Color.Secondary">Dense</MudSwitch>
            <MudSwitch @bind-Checked="@tableCommon.Striped" Color="Color.Tertiary">Striped</MudSwitch>
            <MudSwitch @bind-Checked="@tableCommon.Bordered" Color="Color.Warning">Bordered</MudSwitch>
        </div>
	</MudContainer>
</MudPaper>

@code {
    // Page On Load
    protected override async Task OnInitializedAsync()
    {
        await GettAllBanners();
    }

    // Table Customaization
    private TableCommon tableCommon = new TableCommon();

    // Table Content
    private IEnumerable<UnderCarouselBannerDTO> Elements = new List<UnderCarouselBannerDTO>();

    // Gett All Banner
    private async Task GettAllBanners()
    {
        Elements = await _underBanner.GetAllBanners();
    }

    // Toggle Publish
    private async Task TogglePublish(int id)
    {
        try
        {

            await _underBanner.PublishToggle(id);
            Snackbar.Add("Published Changed!", Severity.Success);
        }
        catch (Exception)
        {
            Snackbar.Add("Something Went Wrong!", Severity.Error);
            throw;
        }
    }

    // Add New Banner
    private async Task OpenAddBannerModal()
    {
        var parameters = new DialogParameters();
        parameters.Add("FormData", new AddUnderCarouselBannerDTO());

        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
        var dialog = await DialogService.Show<AddUnderCarouselBannerModal>("Add New Banner", parameters, options).Result;

        if (dialog.Data != null)
        {
            AddUnderCarouselBannerDTO newBanner = dialog.Data as AddUnderCarouselBannerDTO;

            try
            {
                await _underBanner.AddBanner(newBanner);
                Snackbar.Add("New Banner Created Successfully!", Severity.Success);
                await GettAllBanners();
            }
            catch (Exception)
            {
                Snackbar.Add("Something Went Wrong!", Severity.Error);
                throw;
            }
        }
    }

    // Delete Banner
    private async Task DeleteBanner(int BannerId)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
        var dialog = await DialogService.Show<DeleteConfirmationModal>("Delete Confirmation", options).Result;

        if (!dialog.Cancelled)
        {
            try
            {
                await _underBanner.DeleteBanner(BannerId);
                Snackbar.Add("Banner Deleted Successfully!", Severity.Success);
                await GettAllBanners();
            }
            catch (Exception)
            {
                Snackbar.Add("Something Went Wrong!", Severity.Error);
                throw;
            }
        }
    }
}
