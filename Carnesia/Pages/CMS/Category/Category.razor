@page "/category"

@using Carnesia.Domain.Common.POCO
@using Carnesia.Domain.CMS.Category
@using Carnesia.Shared.CMS.Category
@using Carnesia.Shared.CommonComponents
@using Syncfusion.XlsIO
@using System.IO
@using System.Data
@inject Microsoft.JSInterop.IJSRuntime JS
@inject IDialogService DialogService
@inject ICategory _category
@inject ISnackbar Snackbar

<MudPaper Class="py-16 px-3 ma-2">
	<MudContainer Fixed="true">
		<div class="d-flex justify-end mb-5">
			<MudButton Variant="Variant.Filled" StartIcon="@Icons.Filled.Add" Color="Color.Primary" OnClick="OpenAddParentCategoryModal">Add New Category</MudButton>
		</div>

		<MudTable RowsPerPage="25" Items="@Elements" Dense="@tableCommon.Dense" Hover="@tableCommon.Hover" Bordered="@tableCommon.Bordered" Striped="@tableCommon.Striped" Filter="new Func<ParentCategoryDTO,bool>(FilterFuncInitial)">
            <ToolBarContent>
                <MudSpacer />
                <MudSpacer />
                <MudTextField Immediate="true" @bind-Value="tableCommon.SearchTerm" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"/>
            </ToolBarContent>
            <HeaderContent>
                <MudTh></MudTh>
                <MudTh>Category Name</MudTh>
                <MudTh>Image</MudTh>
                <MudTh>Action</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="">
                    @if (!context.showDetails)
					{
						<MudIconButton Icon="@Icons.Material.Filled.Add" aria-label="Show" OnClick="() => ShowChild(context.id)" />
					}
					else if (context.showDetails)
					{
						<MudIconButton Icon="@Icons.Filled.Minimize" aria-label="Hide" OnClick="() => ShowChild(context.id)" />
					}
                </MudTd>
                <MudTd DataLabel="Category Name">@context.parentCat</MudTd>
                <MudTd DataLabel="Image">
                    <MudImage @onclick="() => ShowImage(context.imageUrl)" Src="@($"https://oshud.com/{context.imageUrl}")" Alt="@context.parentCat" Elevation="25" Class="rounded-lg" Style="width:50px" />
                </MudTd>
                <MudTd DataLabel="Action">
                    <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="() => OpenUpdateParentCategoryModal(context.id)">Edit</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="() => OpenAddChildCategoryModal(context.id)">Add New Child</MudButton>
                    @*<MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="() => OpenDeleteCategoryModal(context.parentCat, context.id)">Delete</MudButton>*@
                </MudTd>
            </RowTemplate>
            <ChildRowContent>
				@if (context.showDetails)
				{
					<td colspan="4">
						<MudCard Elevation="0">
							<MudCardContent Class="pa-0">
								<MudTable Items="@context.child" Bordered="true" Dense="true" Context="DetailsContext" Hover="true" Elevation="0">
								   <HeaderContent>
										<MudTh></MudTh>
										<MudTh>Parent Name</MudTh>
										<MudTh>Child Name</MudTh>
										<MudTh>Action</MudTh>
								   </HeaderContent>
								   <RowTemplate>
										<MudTd DataLabel="Parent Name">
                                            @if (!DetailsContext.showDetails)
											{
												<MudIconButton Icon="@Icons.Material.Filled.Add" aria-label="Show" OnClick="() => ShowGrand(DetailsContext.id, context.child)" />
											}
											else if (DetailsContext.showDetails)
											{
												<MudIconButton Icon="@Icons.Filled.Minimize" aria-label="Hide" OnClick="() => ShowGrand(DetailsContext.id, context.child)" />
											}
                                        </MudTd>
										<MudTd DataLabel="Parent Name">@context.parentCat</MudTd>
										<MudTd DataLabel="Child Name">@DetailsContext.childCat</MudTd>
										<MudTd DataLabel="Action">
											<MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="() => OpenUpdateChildCategoryModal(DetailsContext.childCat, DetailsContext.id)">
												Edit
											</MudButton>
											<MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="() => OpenAddGrandChildModal(DetailsContext.id)">
												Add Grand Child
											</MudButton>
											@*<MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="() => OpenDeleteCategoryModal(DetailsContext.childCat, DetailsContext.id)">
												Delete
											</MudButton>*@
										</MudTd>
								   </RowTemplate>
								   <ChildRowContent>
										@if (DetailsContext.showDetails)
										{
											<td colspan="4">
												<MudCard Elevation="0">
													<MudCardContent Class="pa-0">
														<MudTable Items="@DetailsContext.grandChild" Bordered="true" Dense="true" Context="GDetailsContext" Hover="true" Elevation="0">
															<HeaderContent>
																<MudTh>Child Name</MudTh>
																<MudTh>Grand Child Name</MudTh>
																<MudTh>Action</MudTh>
															</HeaderContent>
															<RowTemplate>
																<MudTd DataLabel="Child Name">@DetailsContext.childCat</MudTd>
																<MudTd DataLabel="Grand Child Name">@GDetailsContext.gChildCat</MudTd>
																<MudTd DataLabel="Action">

																</MudTd>
															</RowTemplate>
														</MudTable>
													</MudCardContent>
												</MudCard>
											</td>
										}
									</ChildRowContent>
								</MudTable>
							</MudCardContent>
						</MudCard>
					</td>
				}
			</ChildRowContent>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>

        <div class="d-flex flex-wrap mt-4">
            <MudSwitch @bind-Checked="@tableCommon.Hover" Color="Color.Primary">Hover</MudSwitch>
            <MudSwitch @bind-Checked="@tableCommon.Dense" Color="Color.Secondary">Dense</MudSwitch>
            <MudSwitch @bind-Checked="@tableCommon.Striped" Color="Color.Tertiary">Striped</MudSwitch>
            <MudSwitch @bind-Checked="@tableCommon.Bordered" Color="Color.Warning">Bordered</MudSwitch>
        </div>

		<div class="mb-5 d-flex justify-end">
            <MudButton StartIcon="@Icons.Filled.Download" Variant="Variant.Filled" Color="Color.Success" OnClick="CreateDocument">Download XLSL</MudButton>
        </div>
	</MudContainer>
</MudPaper>

@code {
	// Page On Load
	protected override async Task OnInitializedAsync()
	{
		Elements = await _category.GetCategories();
		Categories = await _category.GetCategoriesForXLSL();
	}

	// Table Customaization
	private TableCommon tableCommon = new TableCommon();

	// Table Content
	private IEnumerable<ParentCategoryDTO> Elements = new List<ParentCategoryDTO>();
	
	// For XLSL
	private List<CategoryXLSLDTO> Categories = new List<CategoryXLSLDTO>();

	// Show Details
	private void ShowChild(int id)
	{
		ParentCategoryDTO tmpElements = Elements.First(f => f.id == id);
		tmpElements.showDetails = !tmpElements.showDetails;
	}

	// Show Details
	private void ShowGrand(int id, IList<ChildCategoryDTO> Child)
	{
		ChildCategoryDTO tmpElements = Child.First(f => f.id == id);
		tmpElements.showDetails = !tmpElements.showDetails;
	}

	// Add Parent Category Modal
	private async Task OpenAddParentCategoryModal()
	{
		var parameters = new DialogParameters();
		parameters.Add("FormData", new CreateParentCatDTO());

		var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
		var dialog = await DialogService.Show<AddParentCategoryModal>("Add New Category", parameters, options).Result;

		if (dialog.Data != null)
		{
			CreateParentCatDTO newCategory = dialog.Data as CreateParentCatDTO;

			try
			{
				var result = await _category.CreateParentCat(newCategory);

				if (result)
				{
					Snackbar.Add("New Category Created Successfully!", Severity.Success);
					await OnInitializedAsync();
					return;
				}
				Snackbar.Add("Something Went Wrong!", Severity.Error);
			}
			catch (Exception)
			{
				Snackbar.Add("Something Went Wrong!", Severity.Error);
				throw;
			}
		}
	}

	// Update Parent Category Modal
	private async Task OpenUpdateParentCategoryModal(int parentId)
	{
		var parameters = new DialogParameters();
		parameters.Add("FormData", new ParentUpdateDTO());
		parameters.Add("parentId", parentId);

		var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
		var dialog = await DialogService.Show<UpdateParentModal>("Update Parent Category", parameters, options).Result;

		if (dialog.Data != null)
		{
			ParentUpdateDTO newCategory = dialog.Data as ParentUpdateDTO;

			try
			{
				await _category.UpdateParentCat(newCategory, parentId);
				Snackbar.Add("Parent Category Updated Successfully!", Severity.Success);
				await OnInitializedAsync();
			}
			catch (Exception)
			{
				Snackbar.Add("Something Went Wrong!", Severity.Error);
				throw;
			}
		}
	}

	// Add Child Category Modal
	private async Task OpenAddChildCategoryModal(int parentId)
	{
		var parameters = new DialogParameters();
		parameters.Add("FormData", new CreateChildCategoryDTO()
		{
			parentId = parentId
		});

		var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
		var dialog = await DialogService.Show<AddChildCategoryModal>("Add New Category", parameters, options).Result;

		if (dialog.Data != null)
		{
			CreateChildCategoryDTO newCategory = dialog.Data as CreateChildCategoryDTO;

			try
			{
				await _category.CreateChildCat(newCategory);
				Snackbar.Add("New Category Created Successfully!", Severity.Success);
				await OnInitializedAsync();
			}
			catch (Exception)
			{
				Snackbar.Add("Something Went Wrong!", Severity.Error);
				throw;
			}
		}
	}

	// Update Child Category Modal
	private async Task OpenUpdateChildCategoryModal(string childCat, int catId)
	{
		var parameters = new DialogParameters();
		parameters.Add("FormData", new ChildUpdateDTO()
		{
			childCat = childCat
		});

		var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
		var dialog = await DialogService.Show<UpdateChildModal>("Update Category", parameters, options).Result;

		if (dialog.Data != null)
		{
			ChildUpdateDTO Category = dialog.Data as ChildUpdateDTO;

			try
			{
				await _category.UpdateChildCat(Category, catId);
				Snackbar.Add("Category Updated Successfully!", Severity.Success);
				await OnInitializedAsync();
			}
			catch (Exception)
			{
				Snackbar.Add("Something Went Wrong!", Severity.Error);
				throw;
			}
		}
	}

	// Delete Category Modal
	//private void OpenDeleteCategoryModal(string catName, int catId)
	//{
	//	var parameters = new DialogParameters { ["catName"]=catName, ["catId"]=catId };

	//	var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
	//	DialogService.Show<DeleteCategoryModal>("Delete Category?", parameters, options);
	//}

	// Create Grand Child
	private async Task OpenAddGrandChildModal(int childId)
	{
		var parameters = new DialogParameters();
		parameters.Add("FormData", new CreateGrandChildCatDTO()
			{
				childCatId = childId
			});

		var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
        var dialog = await DialogService.Show<AddGrandChildModal>("Add New Category", parameters, options).Result;

		if (dialog.Data != null)
        {
            CreateGrandChildCatDTO newCategory = dialog.Data as CreateGrandChildCatDTO;

            try
            {
                await _category.CreateGrandChildCat(newCategory);
                Snackbar.Add("New Category Created Successfully!", Severity.Success);
                await OnInitializedAsync();
            }
            catch (Exception)
            {
                Snackbar.Add("Something Went Wrong!", Severity.Error);
                throw;
            }
        }
    }

	// Create Document
    private async Task CreateDocument()
    {
        using (ExcelEngine excelEngine = new ExcelEngine())
        {
            IApplication application = excelEngine.Excel;
            application.DefaultVersion = ExcelVersion.Xlsx;

            //Create a workbook.
            IWorkbook workbook = application.Workbooks.Create(1);
            IWorksheet worksheet = workbook.Worksheets[0];

            //Initialize DataTable and data get from SampleDataTable method.
            DataTable table = ParentDataTable();

            //Export data from DataTable to Excel worksheet.
            worksheet.ImportDataTable(table, true, 1, 1);

            worksheet.UsedRange.AutofitColumns();

            //Save the document as a stream and return the stream.
            using (MemoryStream stream = new MemoryStream())
            {
                //Save the created Excel document to MemoryStream
                workbook.SaveAs(stream);

                //Download the excel file.
                await JS.SaveAs("Categories.xlsx", stream.ToArray());
            }
        }
    }

    private DataTable ParentDataTable()
    {
        DataTable reports = new DataTable();
        reports.Columns.Add("ID", typeof(int));
        reports.Columns.Add("ParentCat");
        reports.Columns.Add("ParentID", typeof(int));
        reports.Columns.Add("ChildCat");
        reports.Columns.Add("ChildID", typeof(int));
        reports.Columns.Add("GrandChildCat");

        foreach (var item in Categories)
        {
            reports.Rows.Add(item.id, item.parentCat, item.parentId, item.childCat, item.childCatId, item.gChildCat);
        }
        return reports;
    }

	// Table Search
    private bool FilterFuncInitial(ParentCategoryDTO element) => FilterFunc(element, tableCommon.SearchTerm);

    private bool FilterFunc(ParentCategoryDTO element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.parentCat.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
		if (element.parentCat.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
        return false;
    }

	// Show Image
    private void ShowImage(string url)
    {
        var parameters = new DialogParameters();
        parameters.Add("ImageUrl", url);

        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
        DialogService.Show<ShowImageModal>("Image", parameters, options);
    }
}
