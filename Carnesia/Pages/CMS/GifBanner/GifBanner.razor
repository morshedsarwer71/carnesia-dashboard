@page "/gif-banner"

@using Carnesia.Domain.Common.POCO
@using Carnesia.Domain.CMS.GifBanner
@using Carnesia.Shared.CMS.GifBanner
@using Carnesia.Shared.CommonComponents
@inject IGifBanner _gifBanner
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudPaper Class="py-16 px-3 ma-2">
	<MudContainer Fixed="true">
		<div class="d-flex justify-end mb-5">
			<MudButton Variant="Variant.Filled" StartIcon="@Icons.Filled.Add" Color="Color.Primary" OnClick="OpenAddBannerModal">Add New Gif Banner</MudButton>
		</div>

		<MudTable Items="@Elements" Dense="@tableCommon.Dense" Hover="@tableCommon.Hover" Bordered="@tableCommon.Bordered" Striped="@tableCommon.Striped" Filter="new Func<GifBannerDTO,bool>(FilterFuncInitial)" >
            <ToolBarContent>
                <MudSpacer />
                <MudSpacer />
                <MudTextField Immediate="true" @bind-Value="tableCommon.SearchTerm" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"/>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>URL</MudTh>
                <MudTh>Description</MudTh>
                <MudTh>Image</MudTh>
                <MudTh>Publish</MudTh>
                <MudTh>Action</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">@context.name</MudTd>
                <MudTd DataLabel="URL">@context.url</MudTd>
                <MudTd DataLabel="URL">@context.description</MudTd>
                <MudTd DataLabel="Image">
                    <MudImage @onclick="() => ShowImage(context.imageWebUrl)" Src="@($"http://carnesiapanelapi.carnesia.com/{context.imageWebUrl}")" Alt="@context.name" Elevation="25" Class="rounded-lg" Style="width:100px" />
                </MudTd>
                <MudTd DataLabel="Publish">
                    <MudSwitch @bind-Checked="@context.isPublish" Color="Color.Primary" @onclick="(() => ToggleBanner(context.id))"/>
                </MudTd>
                <MudTd DataLabel="Action">
                    <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="() => DeleteBanner(context.id)">Delete</MudButton>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>

        <div class="d-flex flex-wrap mt-4">
            <MudSwitch @bind-Checked="@tableCommon.Hover" Color="Color.Primary">Hover</MudSwitch>
            <MudSwitch @bind-Checked="@tableCommon.Dense" Color="Color.Secondary">Dense</MudSwitch>
            <MudSwitch @bind-Checked="@tableCommon.Striped" Color="Color.Tertiary">Striped</MudSwitch>
            <MudSwitch @bind-Checked="@tableCommon.Bordered" Color="Color.Warning">Bordered</MudSwitch>
        </div>

	</MudContainer>
</MudPaper>

@code {
    // Page On Load
    protected override async Task OnInitializedAsync()
    {
        await GetBanners();
    }

    // Table Customaization
    private TableCommon tableCommon = new TableCommon();

    // Table Content
    private IEnumerable<GifBannerDTO> Elements = new List<GifBannerDTO>();

    // Get Gif Banners
    private async Task GetBanners()
    {
        Elements = await _gifBanner.GetGifBanners();
    }

    // Add New Banner
    private async Task OpenAddBannerModal()
    {
        var parameters = new DialogParameters();
        parameters.Add("FormData", new AddGifBannerDTO());

        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
        var dialog = await DialogService.Show<AddGifBannerModal>("Add New Banner", parameters, options).Result;

        if (dialog.Data != null)
        {
            AddGifBannerDTO newBanner = dialog.Data as AddGifBannerDTO;

            try
            {
                await _gifBanner.AddGifBanner(newBanner);
                Snackbar.Add("New Banner Created Successfully!", Severity.Success);
                await GetBanners();
            }
            catch (Exception)
            {
                Snackbar.Add("Something Went Wrong!", Severity.Error);
                throw;
            }
        }
    }

    // Delete Banner
    private async Task DeleteBanner(int BannerId)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
        var dialog = await DialogService.Show<DeleteConfirmationModal>("Delete Confirmation", options).Result;

        if (!dialog.Cancelled)
        {
            try
            {
                await _gifBanner.RemoveBanner(BannerId);
                Snackbar.Add("Banner Deleted Successfully!", Severity.Success);
                await GetBanners();
            }
            catch (Exception)
            {
                Snackbar.Add("Something Went Wrong!", Severity.Error);
                throw;
            }
        }
    }

    // Table Search
    private bool FilterFuncInitial(GifBannerDTO element) => FilterFunc(element, tableCommon.SearchTerm);

    private bool FilterFunc(GifBannerDTO element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.url.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    // Show Image
    private void ShowImage(string url)
    {
        var parameters = new DialogParameters();
        parameters.Add("ImageUrl", url);

        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
        DialogService.Show<ShowImageModal>("Image", parameters, options);
    }

    // Toggle Banner
    private async Task ToggleBanner(int id)
    {
        try
        {
            var result = await _gifBanner.ToggleGifBanner(id);
            if (result)
            {
                Snackbar.Add("Banner Toggled Successfully!", Severity.Success);
                await GetBanners();
                return;
            }
            Snackbar.Add("Something Went Wrong!", Severity.Error);
        }
        catch (Exception)
        {
            Snackbar.Add("Something Went Wrong!", Severity.Error);
            throw;
        }
    }
}
