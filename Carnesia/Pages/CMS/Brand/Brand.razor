@page "/brand"

@using Carnesia.Domain.CMS.Brand
@using Carnesia.Domain.Common.POCO
@using Carnesia.Shared.CMS.Brand
@using Carnesia.Shared.CommonComponents
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IBrand _brand
@using Syncfusion.XlsIO
@using System.IO
@using System.Data
@inject Microsoft.JSInterop.IJSRuntime JS
@inject IParentProduct _parentProduct

<MudPaper Class="py-16 px-3 ma-2">
	<MudContainer Fixed="true">
		<div class="d-flex justify-end mb-5">
			<MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Filled.Add" OnClick="OpenBrandModal" >Add New Brand</MudButton>
		</div>

		<MudTable RowsPerPage="25" Items="@Elements" Dense="@tableCommon.Dense" Hover="@tableCommon.Hover" Bordered="@tableCommon.Bordered" Striped="@tableCommon.Striped" Filter="new Func<BrandDTO,bool>(FilterFuncInitial)">
            <ToolBarContent>
                <MudSpacer />
                <MudSpacer />
                <MudTextField @bind-Value="tableCommon.SearchTerm" Immediate="true" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"/>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Brand Name</MudTh>
                <MudTh>Logo</MudTh>
                <MudTh>Image</MudTh>
                <MudTh>Description</MudTh>
                <MudTh>Publish</MudTh>
                <MudTh>Top Brand</MudTh>
                <MudTh>Action</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Brand Name">@context.name</MudTd>
                <MudTd DataLabel="Logo">
                    <MudImage @onclick="() => ShowImage(context.logoUrl)" Src="@($"https://cscpguide.com/{context.logoUrl}")" Alt="" Elevation="25" Class="rounded-lg" Style="width:100px" />
                </MudTd>
                <MudTd DataLabel="Image">
                    <MudImage @onclick="() => ShowImage(context.imageUrl)" Src="@($"https://cscpguide.com/{context.imageUrl}")" Alt="" Elevation="25" Class="rounded-lg" Style="width:100px" />
                </MudTd>
                <MudTd DataLabel="Description">@context.description</MudTd>
                <MudTd DataLabel="Publish">
                    <MudSwitch @bind-Checked="context.isPublished" Color="Color.Primary" @onclick="(() => PublishUnpublish(context.brandId)) " />
                </MudTd>
                <MudTd DataLabel="Top Brand">
                    <MudSwitch @bind-Checked="context.isTopBrand" Color="Color.Primary" @onclick="(() => ToggleTopBrand(context.brandId)) " />
                </MudTd>
                <MudTd DataLabel="Action">
                    <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="() => OpenUpdateModal(context.brandId)">
                        Edit
                    </MudButton>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>

        <div class="d-flex flex-wrap mt-4">
            <MudSwitch @bind-Checked="@tableCommon.Hover" Color="Color.Primary">Hover</MudSwitch>
            <MudSwitch @bind-Checked="@tableCommon.Dense" Color="Color.Secondary">Dense</MudSwitch>
            <MudSwitch @bind-Checked="@tableCommon.Striped" Color="Color.Tertiary">Striped</MudSwitch>
            <MudSwitch @bind-Checked="@tableCommon.Bordered" Color="Color.Warning">Bordered</MudSwitch>
        </div>

        <div class="mb-5 d-flex justify-end">
            <MudButton StartIcon="@Icons.Filled.Download" Variant="Variant.Filled" Color="Color.Success" OnClick="CreateDocument">Download XLSL</MudButton>
        </div>
	</MudContainer>
</MudPaper>

@code {
    // Page On Load
    protected override async Task OnInitializedAsync()
    {
        Elements = await _brand.GetBrands();
    }

    // Loading
    private bool Loading { get; set; }

    // Table Customaization
    private TableCommon tableCommon = new TableCommon();

    // Table Content
    private IEnumerable<BrandDTO> Elements = new List<BrandDTO>();


    // Add Brand Modal
    private async Task OpenBrandModal()
    {
        var parameters = new DialogParameters();
        parameters.Add("FormData", new CreateBrandDTO());

        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
        var dialog = await DialogService.Show<CreateNewBrandModal>("Add New Brand", parameters, options).Result;

        if (dialog.Data != null)
        {
            CreateBrandDTO newBrand = dialog.Data as CreateBrandDTO;

            try
            {
                await _brand.CreateBrand(newBrand);
                Snackbar.Add("New Brand Created Successfully!", Severity.Success);
                await OnInitializedAsync();
            }
            catch (Exception)
            {
                Snackbar.Add("Something Went Wrong!", Severity.Error);
                throw;
            }
        }
    }

    // Update Brand
    private async Task OpenUpdateModal(int BrandId)
    {
        var parameters = new DialogParameters();
        parameters.Add("FormData", new CreateBrandDTO()
            {
                brandId = BrandId
            });

        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
        var dialog = await DialogService.Show<CreateNewBrandModal>("Update Brand", parameters, options).Result;

        if (dialog.Data != null)
        {
            CreateBrandDTO newBrand = dialog.Data as CreateBrandDTO;

            try
            {
                await _brand.UpdateBrand(newBrand);
                Snackbar.Add("Brand Updated Successfully!", Severity.Success);
                await OnInitializedAsync();
            }
            catch (Exception)
            {
                Snackbar.Add("Something Went Wrong!", Severity.Error);
                throw;
            }
        }
    }

    // Publish Unpublish
    private async Task PublishUnpublish(int id)
    {
        try
        {
            var result = await _brand.ToggleBrand(id);
            if (result)
            {
                Snackbar.Add("Brand Successfully Toggled!", Severity.Success);
                await OnInitializedAsync();
                return;
            }
            Snackbar.Add("Something Went Wrong!", Severity.Error);
        }
        catch (Exception)
        {
            Snackbar.Add("Something Went Wrong!", Severity.Error);
            throw;
        }
    }

    // Toggle Top Brand
    private async Task ToggleTopBrand(int id)
    {
        try
        {
            var result = await _brand.ToggleTopBrands(id);
            if (result)
            {
                Snackbar.Add("Brand Successfully Toggled!", Severity.Success);
                Elements = await _brand.GetBrands();
                return;
            }
            Elements = await _brand.GetBrands();
            Snackbar.Add("Something Went Wrong!", Severity.Error);
        }
        catch (Exception)
        {
            Snackbar.Add("Something Went Wrong!", Severity.Error);
        }
    }

    // Create Document
    private async Task CreateDocument()
    {
        using (ExcelEngine excelEngine = new ExcelEngine())
        {
            IApplication application = excelEngine.Excel;
            application.DefaultVersion = ExcelVersion.Xlsx;

            //Create a workbook.
            IWorkbook workbook = application.Workbooks.Create(1);
            IWorksheet worksheet = workbook.Worksheets[0];

            //Initialize DataTable and data get from SampleDataTable method.
            DataTable table = ParentDataTable();

            //Export data from DataTable to Excel worksheet.
            worksheet.ImportDataTable(table, true, 1, 1);

            worksheet.UsedRange.AutofitColumns();

            //Save the document as a stream and return the stream.
            using (MemoryStream stream = new MemoryStream())
            {
                //Save the created Excel document to MemoryStream
                workbook.SaveAs(stream);

                //Download the excel file.
                await JS.SaveAs("Brands.xlsx", stream.ToArray());
            }
        }
    }

    private DataTable ParentDataTable()
    {
        DataTable reports = new DataTable();
        reports.Columns.Add("ID", typeof(int));
        reports.Columns.Add("BrandName");
        reports.Columns.Add("Description");

        foreach (var item in Elements)
        {
            reports.Rows.Add(item.brandId, item.name, item.description);
        }
        return reports;
    }


    // Table Search
    private bool FilterFuncInitial(BrandDTO element) => FilterFunc(element, tableCommon.SearchTerm);

    private bool FilterFunc(BrandDTO element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    // Show Image
    private void ShowImage(string url)
    {
        var parameters = new DialogParameters();
        parameters.Add("ImageUrl", url);

        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
        DialogService.Show<ShowImageModal>("Image", parameters, options);
    }

}
