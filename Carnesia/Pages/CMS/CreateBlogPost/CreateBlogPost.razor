@page "/create-blogpost"

@using Carnesia.Domain.CMS.BlogPost
@using Blazored.TextEditor
@inject IBase64 _base64
@inject IEncodeDecode _encode
@inject IBlogPost _blogPost
@inject ISnackbar Snackbar

<MudPaper Class="pa-16 ma-2">
	<MudContainer Fixed="true">
		<MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudTextField @bind-Value="FormData.title" class="mb-5" Label="Title" Required="true" RequiredError="Title is required!"/>

                <BlazoredTextEditor @ref="@QuillNative" Placeholder="Blog...">
                    <ToolbarContent>
                        <span class="ql-formats">
                            <select class="ql-font">
                                <option selected=""></option>
                                <option value="serif"></option>
                                <option value="monospace"></option>
                            </select>
                            <select class="ql-size">
                                <option value="small"></option>
                                <option selected=""></option>
                                <option value="large"></option>
                                <option value="huge"></option>
                            </select>
                        </span>
                        <span class="ql-formats">
                            <button class="ql-bold"></button>
                            <button class="ql-italic"></button>
                            <button class="ql-underline"></button>
                            <button class="ql-strike"></button>
                        </span>
                        <span class="ql-formats">
                            <select class="ql-color"></select>
                            <select class="ql-background"></select>
                        </span>
                        <span class="ql-formats">
                            <button class="ql-list" value="ordered"></button>
                            <button class="ql-list" value="bullet"></button>
                            <button class="ql-indent" value="-1"></button>
                            <button class="ql-indent" value="+1"></button>
                            <select class="ql-align">
                                <option selected=""></option>
                                <option value="center"></option>
                                <option value="right"></option>
                                <option value="justify"></option>
                            </select>
                        </span>
                        <span class="ql-formats">
                            <button class="ql-link"></button>
                        </span>
                    </ToolbarContent>
                </BlazoredTextEditor>

                <div class="mt-5">
                    <InputFile id="fileInput" hidden accept=".webp" OnChange="UploadImage" />

                    <MudButton HtmlTag="label"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               StartIcon="@Icons.Filled.CloudUpload"
                               for="fileInput">
                        Upload Image
                    </MudButton>
                    <MudText Class="mt-1">475 * 268(Max 50Kb)</MudText>
                </div>

                <MudImage Src="@($"data:image/webp;base64,{FormData.base64Attch}")" Alt="" Elevation="25" Class="rounded-lg mt-5" Style="width:100px;"/>

                <div class="d-flex align-center justify-space-between mt-6">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" OnClick="CreateNewBlog" Class="ml-auto">Submit</MudButton>
                </div>
        </MudForm>
	</MudContainer>
</MudPaper>

@code {
    // Form Ref
    bool success;
    string[] errors = { };
    MudForm form;

    // Rich Text
    BlazoredTextEditor QuillNative;

    // Blog Data
    private CreateBlogPostDTO FormData = new CreateBlogPostDTO();

    // Upload Image
    private async Task UploadImage(InputFileChangeEventArgs e)
    {
        try
        {
            var ImageBase = await _base64.ConvertToBase64(51200, 475, 268, e);

            FormData.base64Attch = ImageBase;
        }
        catch(Exception error)
        {
            Snackbar.Add(error.Message, Severity.Error);
        }
    }

    // Create New Blog
    private async Task CreateNewBlog()
    {
        if (String.IsNullOrEmpty(FormData.base64Attch))
        {
            Snackbar.Add("Please Add an Image!", Severity.Error);
            return;
        }

        // Temp
        var Temp_Blog = await this.QuillNative.GetHTML();

        FormData.description = await _encode.EncodeStringToBase64(Temp_Blog);

        try
        {
            await _blogPost.CreateBlogPost(FormData);
            Snackbar.Add("New Blog Post Created Successfully!", Severity.Success);
        }
        catch (Exception)
        {
            Snackbar.Add("Something Went Wrong!", Severity.Error);
            throw;
        }
    }
}
