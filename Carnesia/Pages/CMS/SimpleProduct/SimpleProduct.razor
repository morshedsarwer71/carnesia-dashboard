@page "/create-simple-product"

@using Carnesia.Domain.CMS.ChildProduct
@using Carnesia.Domain.CMS.SimpleProduct
@using Carnesia.Shared.CMS.ChildProduct
@using Blazored.TextEditor
@inject IBase64 _base64
@inject IEncodeDecode _encode
@inject IBrand _brand
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject ICategory _category
@inject IParentProduct _parentProduct
@inject IChildProduct _childProduct

<MudPaper Class="pa-16 ma-2">
	<MudContainer Fixed="true">
		<MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudGrid>
                    <MudItem sm="6">
                        <MudAutocomplete Value="SimpleParent.brandName" ValueChanged="(string s) => GetBrandID(s)" Label="Brand" ResetValueOnEmptyText="true" Required="true" SearchFunc="@BrandSearch" />
                    </MudItem>
                    <MudItem sm="6">
                        <MudAutocomplete @bind-Value="SimpleParent.originId" Label="Origin" SearchFunc="@CountrySearch" ResetValueOnEmptyText="true" Required="true" Class="mb-3" />
                    </MudItem>
                    <MudItem sm="6">
                        <MudTextField @bind-Value="ChildProductInfoData.productName" Label="Product Name" Required="true" RequiredError="Product Name is required!"/>
                    </MudItem>
                    <MudItem sm="6">
                        <MudTextField @bind-Value="ChildProductInfoData.productsku" Label="Product SKU" Required="true" RequiredError="Product SKU is required!"/>
                    </MudItem>
                    <MudItem sm="6">
                        <MudTextField @bind-Value="ChildProductInfoData.weight" Label="Product Weight" Required="true" RequiredError="Product Weight is required!"/>
                    </MudItem>
                    <MudItem sm="6">
                        <MudSelect @bind-Value="ChildProductInfoData.uom" Label="Unit of Measurements" Required="true" RequiredError="Unit of Measurements is required!" AnchorOrigin="Origin.BottomCenter">
                            <MudSelectItem Value="@("mg")" />
                            <MudSelectItem Value="@("g")" />
                            <MudSelectItem Value="@("kg")" />
                            <MudSelectItem Value="@("ml")" />
                            <MudSelectItem Value="@("l")" />
                        </MudSelect>
                    </MudItem>
                    <MudItem sm="6">
                        <MudTextField @bind-Value="ChildProductInfoData.productDimension" Label="Product Dimension" Required="true" RequiredError="Product Dimension is required!"/>
                    </MudItem>
                    <MudItem sm="6">
                        <MudNumericField @bind-Value="ChildProductInfoData.productPoints" Label="Product Points"/>
                    </MudItem>
                    <MudItem sm="6">
                        <MudNumericField @bind-Value="ChildProductInfoData.mrp" Label="MRP" Required="true" RequiredError="MRP is required!"/>
                    </MudItem>
                    <MudItem sm="6">
                        <MudGrid Class="align-baseline">
                            <MudItem xs="6">
                                <MudNumericField @bind-Value="ChildProductInfoData.discount" Label="@(ChildProductInfoData.isPercent ? "Discount Percent" : "Cash Discount")"/>
                            </MudItem>
                            <MudItem xs="6">
                                <MudSwitch Class="mt-5" @bind-Checked="@ChildProductInfoData.isPercent" Label="Is Percent" Color="Color.Primary" />
                            </MudItem>
                        </MudGrid>
                    </MudItem>
                    <MudItem sm="6">
                        <MudNumericField @bind-Value="ChildProductInfoData.vatAmount" Label="Vat Amount"/>
                    </MudItem>
                    <MudItem sm="6">
                        <MudNumericField @bind-Value="ChildProductInfoData.shelfLife" Label="Shelf Life" Required="true" RequiredError="Shelf Life is required!" />
                    </MudItem>
                    <MudItem sm="6">
                        <MudTextField @bind-Value="ChildProductInfoData.upSells" Label="Up Sell SKU. Separate with comma" Required="true" RequiredError="Up Sell SKU are required!" />
                    </MudItem>
                    <MudItem sm="6">
                        <MudTextField @bind-Value="ChildProductInfoData.crossSells" Label="Cross Sell SKU. Separate with comma" Required="true" RequiredError="Cross Sell SKU required!" />
                    </MudItem>
                    <MudItem sm="6">
					    <MudTextField @bind-Value="ChildProductInfoData.metaTags" Label="Meta Tags. Separate with comma" Required="true" RequiredError="Meta Tags are required!" />
				    </MudItem>
                    <MudItem sm="6">
					    <MudTextField @bind-Value="ChildProductInfoData.seachTags" Label="Search Tags. Separate with comma" Required="true" RequiredError="Search Tags are required!" />
				    </MudItem>
                    <MudItem sm="6">
					    <MudTextField @bind-Value="ChildProductInfoData.metaTitle" Label="Meta Title" Required="true" RequiredError="Meta Title are required!" />
				    </MudItem>
                    @if (ChildProductInfoData.isSize)
                    {
                        <MudItem sm="6">
                            <MudGrid>
                                <MudItem xs="6">
                                    <MudTextField @bind-Value="ChildProductInfoData.sizeOrQty" Label="Size" Required="true" RequiredError="Size is required!"/>
                                </MudItem>
                                <MudItem xs="6">
                                    <MudSwitch Class="mt-5" @bind-Checked="@ChildProductInfoData.isSize" Label="Is Size" Color="Color.Primary" />
                                </MudItem>
                            </MudGrid>
                        </MudItem>
                    }
                    else
                    {
                        <MudItem sm="6">
                            <MudGrid>
                                <MudItem xs="6">
                                    <MudColorPicker Label="Color Code" @bind-Text="ChildProductInfoData.colorCode" Style="@($"color: {ChildProductInfoData.colorCode};")" ColorPickerMode="ColorPickerMode.HEX" DisableModeSwitch="true" />
                                </MudItem>
                                <MudItem xs="6">
                                    <MudSwitch Class="mt-5" @bind-Checked="@ChildProductInfoData.isSize" Label="Is Size" Color="Color.Primary" />
                                </MudItem>
                            </MudGrid>
                        </MudItem>                        
                        <MudItem sm="6">
                            <MudTextField @bind-Value="ChildProductInfoData.colorName" Label="Color Name" Required="true" RequiredError="Color Name is required!"/>
                        </MudItem>
                    }
                    <MudItem xs="12">
					    <MudTextField @bind-Value="ChildProductInfoData.metaDescription" Label="Meta Description" Lines="5" Required="true" RequiredError="Meta Description required!" />
				    </MudItem>
                    <MudItem xs="12">
					    <BlazoredTextEditor @ref="@QuillNative" Placeholder="Product Description...">
                            <ToolbarContent>
                                <span class="ql-formats">
                                    <select class="ql-font">
                                        <option selected=""></option>
                                        <option value="serif"></option>
                                        <option value="monospace"></option>
                                    </select>
                                    <select class="ql-size">
                                        <option value="small"></option>
                                        <option selected=""></option>
                                        <option value="large"></option>
                                        <option value="huge"></option>
                                    </select>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-bold"></button>
                                    <button class="ql-italic"></button>
                                    <button class="ql-underline"></button>
                                    <button class="ql-strike"></button>
                                </span>
                                <span class="ql-formats">
                                    <select class="ql-color"></select>
                                    <select class="ql-background"></select>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-list" value="ordered"></button>
                                    <button class="ql-list" value="bullet"></button>
                                    <button class="ql-indent" value="-1"></button>
                                    <button class="ql-indent" value="+1"></button>
                                    <select class="ql-align">
                                        <option selected=""></option>
                                        <option value="center"></option>
                                        <option value="right"></option>
                                        <option value="justify"></option>
                                    </select>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-link"></button>
                                </span>
                            </ToolbarContent>
                        </BlazoredTextEditor>
				    </MudItem>
                </MudGrid>

			    <div class="d-flex flex-column mt-10">
                    <MudCheckBox Color="Color.Primary" @bind-Checked="@ChildProductInfoData.isPublish" Class="ml-n2" Label="Is Publish!"/>
                    <MudCheckBox Color="Color.Primary" @bind-Checked="@ChildProductInfoData.isHasFreeProd" Class="ml-n2" Label="Is Has Free Product!"/>
                    <MudCheckBox Color="Color.Primary" @bind-Checked="@ChildProductInfoData.isNewArrival" Class="ml-n2" Label="New Arraival!"/>
                </div>

                @if (ChildProductInfoData.isHasFreeProd)
                {
                    <MudText Class="mt-16">Free Products</MudText>
                    <div class="my-5 d-flex justify-end">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenFreeProductModal">Add Free Product</MudButton>
                    </div>

                    <MudTable Items="@FreeProducts" Hover="true" Dense="true">
                        <HeaderContent>
                            <MudTh>Name</MudTh>
                            <MudTh>SKU</MudTh>
                            <MudTh>Price</MudTh>
                            <MudTh>Number of Products</MudTh>
                            <MudTh>Image</MudTh>
                            <MudTh>Action</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Name">@context.name</MudTd>
                            <MudTd DataLabel="SKU">@context.sku</MudTd>
                            <MudTd DataLabel="Price">@context.price</MudTd>
                            <MudTd DataLabel="Number of Products">@context.numbOfFreeProd</MudTd>
                            <MudTd DataLabel="Image">
                                <MudImage Src="@($"data:image/webp;base64,{context.base64Attch}")" Alt="" Elevation="25" Class="rounded-lg mx-3" Style="width:100px;"/>
                            </MudTd>
                            <MudTd DataLabel="Action">
                                <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="() => RemoveFreeProductFromList(context)">Remove</MudButton>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                }

                <MudText Class="mt-5">Category</MudText>
                <MudGrid>
                    <MudItem md="4" sm="6">
                        <MudAutocomplete Value="CategoryData.parentCatName" ValueChanged="(string s) => GetParentCatId(s)"  SearchFunc="@ParentCatSearch" Label="Category" ResetValueOnEmptyText="true" />
                    </MudItem>
                    <MudItem md="4" sm="6">
                        <MudAutocomplete Value="CategoryData.childCatName" ValueChanged="(string s) => GetChildCatId(s)" Label="Child Category" SearchFunc="@ChildCatSearch" ResetValueOnEmptyText="true" />
                    </MudItem>
                    <MudItem md="4" sm="6">
                        <MudAutocomplete Value="CategoryData.gChildCatName" ValueChanged="(string s) => GetGrandChildId(s)" Label="Grand Child Category" SearchFunc="@GrandChildCatSearch" ResetValueOnEmptyText="true" />
                    </MudItem>
                </MudGrid>

                <div class="mt-5">
                    <InputFile id="fileInput" hidden accept=".webp" OnChange="UploadImage" />

                    <MudButton HtmlTag="label"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               StartIcon="@Icons.Filled.CloudUpload"
                               for="fileInput">
                        Upload Images
                    </MudButton>
                    <MudText Class="mt-1">600 * 600(Max 50Kb)</MudText>
                </div>


                <div class="d-flex jsutify-center mt-5">
                    @foreach(var image in ProductImages)
                    {
                        
                        <MudBadge OnClick="() => RemoveImage(image)" Icon="@Icons.Filled.DeleteOutline" Color="Color.Error" Overlap="true" Class="mx-6 my-4" Style="cursor:pointer">
                            <MudImage Src="@($"data:image/webp;base64,{image.base64Attch}")" Alt="" Elevation="25" Class="rounded-lg mx-3" Style="width:100px;"/>
                        </MudBadge>
                    }
                </div>

                <div class="d-flex align-center justify-end mt-6">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" OnClick="CreateSimpleProduct" Class="ml-auto">Submit</MudButton>
                </div>
        </MudForm>
	</MudContainer>
</MudPaper>

@code {
    // On Page Load
    protected override async Task OnInitializedAsync()
    {
        await GetBrands();
        await GetParentCatsString();
    }

    // Rich Text
    BlazoredTextEditor QuillNative;

    // Form Ref
    bool success;
    string[] errors = { };
    MudForm form;

    // Parent Product Details
    private SimpleProductParentDTO SimpleParent = new SimpleProductParentDTO();

    // Child Product Details
    private ChildProductDetailsDTO ChildProductInfoData = new ChildProductDetailsDTO();

    // Free Product List
    private List<FreeProductDTO> FreeProducts = new List<FreeProductDTO>();

    // Free Product Modal
    private async Task OpenFreeProductModal()
    {
        var parameters = new DialogParameters();
        parameters.Add("FormData", new FreeProductDTO());

        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
        var dialog = await DialogService.Show<AddFreeProductModal>("Add Free Product", parameters, options).Result;

        if (dialog.Data != null)
        {
            FreeProductDTO newFreeProduct = dialog.Data as FreeProductDTO;
            FreeProducts.Add(newFreeProduct);
        }
    }

    // Remove Free Product From List
    private void RemoveFreeProductFromList(FreeProductDTO product)
    {
        FreeProducts.Remove(product);
    }






    // Category
    // Category List
    private string[] ParentCats = new string[]{};
    private string[] ChildCats = new string[]{};
    private string[] GrandChildCats  = new string[]{};

    // Category Class
    private ProductCategoryDTO CategoryData = new ProductCategoryDTO();
    private List<ProductCategoryDTO> ProductCategories = new List<ProductCategoryDTO>();

    // Get Parent As String
    private async Task GetParentCatsString()
    {
        ParentCats = await _category.GetParentCatAsString();
    }

    // Get Parent ID and Child As String
    private async Task GetParentCatId(string s)
    {
        if (String.IsNullOrEmpty(s))
        {
            CategoryData.parentCatName = s;
            if (GrandChildCats.Length > 0)
            {
                Array.Clear(GrandChildCats, 0, GrandChildCats.Length);
                CategoryData.gChildCatName = String.Empty;
            }
            if (ChildCats.Length > 0)
            {
                Array.Clear(ChildCats, 0, ChildCats.Length);
                CategoryData.childCatName = String.Empty;
            }

            return;
        }
        CategoryData.parentCatName = s;

        if (GrandChildCats.Length > 0)
        {
            Array.Clear(GrandChildCats, 0, GrandChildCats.Length);
            CategoryData.gChildCatName = String.Empty;
        }

        CategoryData.childCatName = String.Empty;

        var result = await _category.GetParentCat(s);

        CategoryData.parentCatId = result.id;

        ChildCats = await _category.GetChildCatAsString(result.child);
    }

    // Get Child Cat ID and GChild As String
    private async Task GetChildCatId(string s)
    {
        if (String.IsNullOrEmpty(s))
        {
            CategoryData.childCatName = s;
            if (GrandChildCats.Length > 0)
            {
                Array.Clear(GrandChildCats, 0, GrandChildCats.Length);
                CategoryData.gChildCatName = String.Empty;
            }
            return;
        }

        CategoryData.childCatName = s;

        var result = await _category.GetParentCat(CategoryData.parentCatName);

        var Child = result.child.FirstOrDefault(x => x.childCat == s);

        CategoryData.childCatId = Child.id;

        GrandChildCats = await _category.GetGrandChildCatAsString(Child.grandChild);

        CategoryData.gChildCatName = String.Empty;
    }

    // Get GChild Cat ID
    private async Task GetGrandChildId(string s)
    {
        CategoryData.gChildCatName = s;

        var result = await _category.GetParentCat(CategoryData.parentCatName);

        var Child = result.child.FirstOrDefault(x => x.childCat == CategoryData.childCatName);

        var GrandChild = Child.grandChild.FirstOrDefault(x => x.gChildCat == s);

        CategoryData.gChildCatId = GrandChild.id;
    }

    // Autocomplite Search Func for ParentCat
    private async Task<IEnumerable<string>> ParentCatSearch(string value)
    {
        return string.IsNullOrEmpty(value) ? ParentCats : ParentCats.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    // Autocomplite Search Func for ChildCat
    private async Task<IEnumerable<string>> ChildCatSearch(string value)
    {
        return string.IsNullOrEmpty(value) ? ChildCats : ChildCats.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    // Autocomplite Search Func for GrandChildCat
    private async Task<IEnumerable<string>> GrandChildCatSearch(string value)
    {
        return string.IsNullOrEmpty(value) ? GrandChildCats : GrandChildCats.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }









    // Product Images
    private List<ProductImageDTO> ProductImages = new List<ProductImageDTO>();

    // Upload Image
    private async Task UploadImage(InputFileChangeEventArgs e)
    {
        try
        {
            var ImageBase = await _base64.ConvertToBase64(51200, 600, 600, e);

            var productImage = new ProductImageDTO()
            {
                base64Attch = ImageBase,
                altImageName = e.File.Name
            };

            ProductImages.Add(productImage);
        }
        catch(Exception error)
        {
            Snackbar.Add(error.Message, Severity.Error);
        }
    }

    // Remove Image 
    private void RemoveImage(ProductImageDTO Image)
    {
        ProductImages.Remove(Image);
    }






    // Brands Array
    private string[] Brands;

    private async Task GetBrands()
    {
        Brands = await _brand.GetBrandsNameAsString();
    }

    // Autocomplite Search Func for Brand
    private async Task<IEnumerable<string>> BrandSearch(string value)
    {
        return string.IsNullOrEmpty(value) ? Brands : Brands.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    // Get Brand ID
    private async Task GetBrandID(string s)
    {
        SimpleParent.brandName = s;
        if (!String.IsNullOrEmpty(s))
        {
            var brand = await _brand.GetBrand(s);
            SimpleParent.brandId = brand.brandId;
        }
    }

    // Country Array
    private string[] countries = {"Afghanistan", "Albania", "Algeria", "American Samoa", "Andorra", "Angola", "Anguilla", "Antarctica", "Antigua and Barbuda", "Argentina", "Armenia", "Aruba", "Australia", "Austria", "Azerbaijan", "Bahamas", "Bahrain", "Bangladesh", "Barbados", "Belarus", "Belgium", "Belize", "Benin", "Bermuda", "Bhutan", "Bolivia", "Bosnia and Herzegowina", "Botswana", "Bouvet Island", "Brazil", "British Indian Ocean Territory", "Brunei Darussalam", "Bulgaria", "Burkina Faso", "Burundi", "Cambodia", "Cameroon", "Canada", "Cape Verde", "Cayman Islands", "Central African Republic", "Chad", "Chile", "China", "Christmas Island", "Cocos (Keeling) Islands", "Colombia", "Comoros", "Congo", "Congo, the Democratic Republic of the", "Cook Islands", "Costa Rica", "Cote d'Ivoire", "Croatia (Hrvatska)", "Cuba", "Cyprus", "Czech Republic", "Denmark", "Djibouti", "Dominica", "Dominican Republic", "East Timor", "Ecuador", "Egypt", "El Salvador", "Equatorial Guinea", "Eritrea", "Estonia", "Ethiopia", "Falkland Islands (Malvinas)", "Faroe Islands", "Fiji", "Finland", "France", "France Metropolitan", "French Guiana", "French Polynesia", "French Southern Territories", "Gabon", "Gambia", "Georgia", "Germany", "Ghana", "Gibraltar", "Greece", "Greenland", "Grenada", "Guadeloupe", "Guam", "Guatemala", "Guinea", "Guinea-Bissau", "Guyana", "Haiti", "Heard and Mc Donald Islands", "Holy See (Vatican City State)", "Honduras", "Hong Kong", "Hungary", "Iceland", "India", "Indonesia", "Iran", "Iraq", "Ireland", "Israel", "Italy", "Jamaica", "Japan", "Jordan", "Kazakhstan", "Kenya", "Kiribati", "Kuwait", "Kyrgyzstan", "Lao, People's Democratic Republic", "Latvia", "Lebanon", "Lesotho", "Liberia", "Libyan Arab Jamahiriya", "Liechtenstein", "Lithuania", "Luxembourg", "Macau", "Macedonia, The Former Yugoslav Republic of", "Madagascar", "Malawi", "Malaysia", "Maldives", "Mali", "Malta", "Marshall Islands", "Martinique", "Mauritania", "Mauritius", "Mayotte", "Mexico", "Micronesia, Federated States of", "Moldova, Republic of", "Monaco", "Mongolia", "Montserrat", "Morocco", "Mozambique", "Myanmar", "Namibia", "Nauru", "Nepal", "Netherlands", "Netherlands Antilles", "New Caledonia", "New Zealand", "Nicaragua", "Niger", "Nigeria", "Niue", "Norfolk Island", "North Korea", "Northern Mariana Islands", "Norway", "Oman", "Pakistan", "Palau", "Panama", "Papua New Guinea", "Paraguay", "Peru", "Philippines", "Pitcairn", "Poland", "Portugal", "Puerto Rico", "Qatar", "Reunion", "Romania", "Russian Federation", "Rwanda", "Saint Kitts and Nevis", "Saint Lucia", "Saint Vincent and the Grenadines", "Samoa", "San Marino", "Sao Tome and Principe", "Saudi Arabia", "Senegal", "Seychelles", "Sierra Leone", "Singapore", "Slovakia (Slovak Republic)", "Slovenia", "Solomon Islands", "Somalia", "South Africa", "South Korea", "South Georgia and the South Sandwich Islands", "Spain", "Sri Lanka", "St. Helena", "St. Pierre and Miquelon", "Sudan", "Suriname", "Svalbard and Jan Mayen Islands", "Swaziland", "Sweden", "Switzerland", "Syrian Arab Republic", "Taiwan, Province of China", "Tajikistan", "Tanzania, United Republic of", "Thailand", "Togo", "Tokelau", "Tonga", "Trinidad and Tobago", "Tunisia", "Turkey", "Turkmenistan", "Turks and Caicos Islands", "Tuvalu", "Uganda", "Ukraine", "United Arab Emirates", "United Kingdom", "United States", "United States Minor Outlying Islands", "Uruguay", "Uzbekistan", "Vanuatu", "Venezuela", "Vietnam", "Virgin Islands (British)", "Virgin Islands (U.S.)", "Wallis and Futuna Islands", "Western Sahara", "Yemen", "Yugoslavia", "Zambia", "Zimbabwe"};

    // Search Country
    private async Task<IEnumerable<string>> CountrySearch(string value)
    {
        return string.IsNullOrEmpty(value) ? countries : countries.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }



    // Create Simple Parent
    private async Task CreateParent()
    {
        // Temp
        var Temp_Des = await this.QuillNative.GetHTML();

        SimpleParent.description = await _encode.EncodeStringToBase64(Temp_Des);
        try
        {
            var result = await _parentProduct.CreateParentProductReturnID(SimpleParent);
            Console.WriteLine(result);
            ChildProductInfoData.productParentId = int.Parse(result);
            Console.WriteLine(int.Parse(result));
        }
        catch(Exception)
        {
            throw;
        }
    }

    // Create Child Product
    private ChildProductDTO NewProduct = new ChildProductDTO();

    private async Task NewChildProduct()
    {
        if (ProductImages.Count == 0)
        {
            Snackbar.Add("Please Add Product Image!", Severity.Error);
            return;
        }

        if (String.IsNullOrEmpty(CategoryData.parentCatName))
        {
            Snackbar.Add("Please Add Parent Category!", Severity.Error);
            return;
        }

        if (ChildProductInfoData.isHasFreeProd == true && FreeProducts.Count == 0)
        {
            Snackbar.Add("Please Add Free Product Or Uncheck Is Has Free Product!", Severity.Error);
            return;
        }

        if (ChildProductInfoData.isSize == false && String.IsNullOrEmpty(ChildProductInfoData.colorCode))
        {
            Snackbar.Add("Please Add Color Code!", Severity.Error);
            return;
        }

        ProductCategories.Add(CategoryData);

        NewProduct.productDTO = ChildProductInfoData;
        NewProduct.freeProducts = FreeProducts;
        NewProduct.images = ProductImages;
        NewProduct.prodCategories = ProductCategories;



        try
        {
            await _childProduct.CreateChildProduct(NewProduct);
            Snackbar.Add("Success!", Severity.Success);

            SimpleParent = new SimpleProductParentDTO();
            ChildProductInfoData = new ChildProductDetailsDTO();
            FreeProducts.Clear();
            CategoryData = new ProductCategoryDTO();
            ProductCategories.Clear();
            ProductImages.Clear();
            NewProduct = new ChildProductDTO();
            await this.QuillNative.LoadHTMLContent("<p><br></p>");
            StateHasChanged();
        }
        catch(Exception)
        {
            Snackbar.Add("Something went Wrong!", Severity.Error);
            throw;
        }


    }

    // Create Simple Product
    private async Task CreateSimpleProduct()
    {
        try
        {
            await CreateParent();
            await NewChildProduct();
        }
        catch (Exception)
        {
            throw;
        }
    }
}
