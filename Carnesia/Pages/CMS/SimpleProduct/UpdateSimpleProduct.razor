@page "/update-simple-product/{id:int}"

@using Carnesia.Domain.CMS.ChildProduct
@using Carnesia.Domain.CMS.ParentProduct
@using Carnesia.Shared.CMS.ChildProduct
@using Blazored.TextEditor
@inject IDialogService DialogService
@inject ICategory _category
@inject IParentProduct _parentProduct
@inject IChildProduct _childProduct
@inject IBrand _brand
@inject IBase64 _base64
@inject ISnackbar Snackbar
@inject IEncodeDecode _encodeDecode

<MudPaper Class="ma-2 pa-16">
	<MudContainer Fixed="true">
		<MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
			<MudGrid>
				<MudItem sm="6">
					<MudAutocomplete Value="Product.brandName" ValueChanged="(string s) => GetBrandID(s)" Label="Brand" ResetValueOnEmptyText="true" Required="true" SearchFunc="@BrandSearch" />
				</MudItem>
				<MudItem sm="6">
					<MudAutocomplete @bind-Value="Product.originId" Label="Origin" SearchFunc="@CountrySearch" ResetValueOnEmptyText="true" Required="true" Class="mb-3" />
				</MudItem>
				<MudItem sm="6">
					<MudTextField @bind-Value="Product.productName" Label="Product Name" Required="true" RequiredError="Product Name is required!" />
				</MudItem>
				<MudItem sm="6">
					<MudTextField @bind-Value="Product.productsku" Label="Product SKU" Required="true" RequiredError="Product SKU is required!" />
				</MudItem>
				<MudItem sm="6">
					<MudTextField @bind-Value="Product.weight" Label="Product Weight" Required="true" RequiredError="Product Weight is required!" />
				</MudItem>
				<MudItem sm="6">
					<MudSelect @bind-Value="Product.uom" Label="Unit of Measurements" Required="true" RequiredError="Unit of Measurements is required!" AnchorOrigin="Origin.BottomCenter">
						<MudSelectItem Value="@("mg")" />
						<MudSelectItem Value="@("g")" />
						<MudSelectItem Value="@("kg")" />
						<MudSelectItem Value="@("ml")" />
						<MudSelectItem Value="@("l")" />
					</MudSelect>
				</MudItem>
				<MudItem sm="6">
					<MudTextField @bind-Value="Product.productDimension" Label="Product Dimension" Required="true" RequiredError="Product Dimension is required!" />
				</MudItem>
				<MudItem sm="6">
					<MudNumericField @bind-Value="Product.productPoints" Label="Product Points" />
				</MudItem>
				<MudItem sm="6">
					<MudNumericField @bind-Value="Product.mrp" Label="MRP" Required="true" RequiredError="MRP is required!" />
				</MudItem>
				<MudItem sm="6">
					<MudGrid Class="align-baseline">
						<MudItem xs="6">
							<MudNumericField @bind-Value="Product.discount" Label="@(Product.isPercent ? "Discount Percent" : "Cash Discount")" />
						</MudItem>
						<MudItem xs="6">
							<MudSwitch Class="mt-5" @bind-Checked="@Product.isPercent" Label="Is Percent" Color="Color.Primary" />
						</MudItem>
					</MudGrid>
				</MudItem>
				<MudItem sm="6">
					<MudNumericField @bind-Value="Product.vatAmount" Label="Vat Amount" />
				</MudItem>
				<MudItem sm="6">
					<MudNumericField @bind-Value="Product.shelfLife" Label="Shelf Life" Required="true" RequiredError="Shelf Life is required!" />
				</MudItem>
				<MudItem sm="6">
					<MudTextField @bind-Value="Product.upSells" Label="Up Sell SKU. Separate with comma" Required="true" RequiredError="Up Sell SKU are required!" />
				</MudItem>
				<MudItem sm="6">
					<MudTextField @bind-Value="Product.crossSells" Label="Cross Sell SKU. Separate with comma" Required="true" RequiredError="Cross Sell SKU required!" />
				</MudItem>
				<MudItem sm="6">
					<MudTextField @bind-Value="Product.metaTags" Label="Meta Tags. Separate with comma" Required="true" RequiredError="Meta Tags are required!" />
				</MudItem>
				<MudItem sm="6">
					<MudTextField @bind-Value="Product.seachTags" Label="Search Tags. Separate with comma" Required="true" RequiredError="Search Tags are required!" />
				</MudItem>
				<MudItem sm="6">
					<MudTextField @bind-Value="Product.metaTitle" Label="Meta Title" Required="true" RequiredError="Meta Title are required!" />
				</MudItem>
				@if (Product.isSize)
				{
					<MudItem sm="6">
						<MudGrid>
							<MudItem xs="6">
								<MudTextField @bind-Value="Product.sizeOrQty" Label="Text Variant" Required="true" RequiredError="Text Variant is required!" />
							</MudItem>
							<MudItem xs="6">
								<MudSwitch Class="mt-5" @bind-Checked="@Product.isSize" Label="Is Text Variant" Color="Color.Primary" />
							</MudItem>
						</MudGrid>
					</MudItem>
				}
				else
				{
					<MudItem sm="6">
						<MudGrid>
							<MudItem xs="6">
								<MudColorPicker Label="Color Code" @bind-Text="Product.colorCode" Style="@($"color: {Product.colorCode};")" ColorPickerMode="ColorPickerMode.HEX" DisableAlpha="true" DisableModeSwitch="true" />
							</MudItem>
							<MudItem xs="6">
								<MudSwitch Class="mt-5" @bind-Checked="@Product.isSize" Label="Is Text Variant" Color="Color.Primary" />
							</MudItem>
						</MudGrid>
					</MudItem>
					<MudItem sm="6">
						<MudTextField @bind-Value="Product.colorName" Label="Color Name" Required="true" RequiredError="Color Name is required!" />
					</MudItem>
				}
				<MudItem xs="12">
					<MudGrid>
						<MudItem sm="6">
							<MudTextField @bind-Value="Product.metaDescription" Label="Meta Description" Lines="5" Required="true" RequiredError="Meta Description required!" />
						</MudItem>
						<MudItem sm="6">
							<MudTextField @bind-Value="Product.description" Label="Description" Lines="5" Required="true" RequiredError="Description required!" />
						</MudItem>
					</MudGrid>
				</MudItem>
				<MudItem xs="12">
					<BlazoredTextEditor @ref="@QuillNative" Placeholder="Product Description...">
						<ToolbarContent>
							<span class="ql-formats">
								<select class="ql-font">
									<option selected=""></option>
									<option value="serif"></option>
									<option value="monospace"></option>
								</select>
								<select class="ql-size">
									<option value="small"></option>
									<option selected=""></option>
									<option value="large"></option>
									<option value="huge"></option>
								</select>
							</span>
							<span class="ql-formats">
								<button class="ql-bold"></button>
								<button class="ql-italic"></button>
								<button class="ql-underline"></button>
								<button class="ql-strike"></button>
							</span>
							<span class="ql-formats">
								<select class="ql-color"></select>
								<select class="ql-background"></select>
							</span>
							<span class="ql-formats">
								<button class="ql-list" value="ordered"></button>
								<button class="ql-list" value="bullet"></button>
								<button class="ql-indent" value="-1"></button>
								<button class="ql-indent" value="+1"></button>
								<select class="ql-align">
									<option selected=""></option>
									<option value="center"></option>
									<option value="right"></option>
									<option value="justify"></option>
								</select>
							</span>
							<span class="ql-formats">
								<button class="ql-link"></button>
							</span>
						</ToolbarContent>
					</BlazoredTextEditor>
				</MudItem>
			</MudGrid>

			<div class="d-flex flex-column mt-10">
				<MudCheckBox Color="Color.Primary" @bind-Checked="@Product.isPublish" Class="ml-n2" Label="Is Publish!" />
				<MudCheckBox Color="Color.Primary" @bind-Checked="@Product.isHasFreeProd" Class="ml-n2" Label="Is Has Free Product!" />
				<MudCheckBox Color="Color.Primary" @bind-Checked="@Product.isNewArrival" Class="ml-n2" Label="New Arrival!" />
			</div>

			@if (Product.isHasFreeProd)
			{
				<MudText Class="mt-16">Free Products</MudText>
				<div class="my-5 d-flex justify-end">
					<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenFreeProductModal">Add Free Product</MudButton>
				</div>

				<MudTable Items="@Product.freeProducts" Hover="true" Dense="true">
					<HeaderContent>
						<MudTh>Name</MudTh>
						<MudTh>SKU</MudTh>
						<MudTh>Price</MudTh>
						<MudTh>Number of Products</MudTh>
						<MudTh>Image</MudTh>
						<MudTh>Action</MudTh>
					</HeaderContent>
					<RowTemplate>
						<MudTd DataLabel="Name">@context.name</MudTd>
						<MudTd DataLabel="SKU">@context.sku</MudTd>
						<MudTd DataLabel="Price">@context.price</MudTd>
						<MudTd DataLabel="Number of Products">@context.numbOfFreeProd</MudTd>
						<MudTd DataLabel="Image">
							<MudImage Src="@($"data:image/webp;base64,{context.base64Attch}")" Alt="" Elevation="25" Class="rounded-lg mx-3" Style="width:100px;" />
						</MudTd>
						<MudTd DataLabel="Action">
							<MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="() => RemoveFreeProductFromList(context.sku)">Remove</MudButton>
						</MudTd>
					</RowTemplate>
				</MudTable>
			}

			<MudText Class="mt-5">Category</MudText>
			<MudGrid>
				<MudItem md="4" sm="6">
					<MudAutocomplete Value="CategoryData.parentCatName" ValueChanged="(string s) => GetParentCatId(s)" SearchFunc="@ParentCatSearch" Label="Category" ResetValueOnEmptyText="true" />
				</MudItem>
				<MudItem md="4" sm="6">
					<MudAutocomplete Value="CategoryData.childCatName" ValueChanged="(string s) => GetChildCatId(s)" Label="Child Category" SearchFunc="@ChildCatSearch" ResetValueOnEmptyText="true" />
				</MudItem>
				<MudItem md="4" sm="6">
					<MudAutocomplete Value="CategoryData.gChildCatName" ValueChanged="(string s) => GetGrandChildId(s)" Label="Grand Child Category" SearchFunc="@GrandChildCatSearch" ResetValueOnEmptyText="true" />
				</MudItem>
			</MudGrid>

			<div class="d-flex justify-end mt-5">
				<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="UpdateProduct">Update Product</MudButton>
			</div>

			<div class="mt-5">
				<InputFile id="fileInput" hidden accept=".webp" OnChange="UploadImage" />

				<MudButton HtmlTag="label"
						   Variant="Variant.Filled"
						   Color="Color.Primary"
						   StartIcon="@Icons.Filled.CloudUpload"
						   for="fileInput">
					Upload Images
				</MudButton>
				<MudText Class="mt-1">600 * 600(.webp only. Max 50Kb)</MudText>
			</div>

			<div class="d-flex mt-5">
				@if (Product.images != null)
				{
					@foreach (var image in Product.images)
					{

						<MudBadge Icon="@Icons.Filled.DeleteOutline" OnClick="() =>RemoveImage(image.id)" Color="Color.Error" Overlap="true" Class="mx-6 my-4" Style="cursor:pointer">
							<MudImage Src="@($"https://carnesiaapi.bespokeit.io/{image.imageUrl}")" Alt="" Elevation="25" Class="rounded-lg mx-3" Style="width:100px;" />
						</MudBadge>
					}
				}
				@foreach (var image in ProductImages)
				{

					<MudBadge OnClick="() => DeleteImage(image)" Icon="@Icons.Filled.DeleteOutline" Color="Color.Error" Overlap="true" Class="mx-6 my-4" Style="cursor:pointer">
						<MudImage Src="@($"data:image/webp;base64,{image.base64Attch}")" Alt="" Elevation="25" Class="rounded-lg mx-3" Style="width:100px;" />
					</MudBadge>
				}
			</div>

			<div class="d-flex justify-end mt-5">
				<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="UpdateImage">Update Image</MudButton>
			</div>
		</MudForm>
	</MudContainer>
</MudPaper>

@code {
	// On Page Load
	protected override async Task OnInitializedAsync()
	{
		await GetParentCatsString();
		await GetBrands();
		await GetProduct();
		await DecodeRich();
		await GetChildAndGrandCatsString();
	}

	// Form Ref
	bool success;
	string[] errors = { };
	MudForm form;

	[Parameter]
	public int id { get; set; }

	// Rich Text
	BlazoredTextEditor QuillNative;

	// Product
	private SingleChildProductDTO Product = new SingleChildProductDTO();

	// Get Product
	private async Task GetProduct()
	{
		Product = await _childProduct.GetChildById(id);
	}

	// Brands Array
	private string[] Brands;

	private async Task GetBrands()
	{
		Brands = await _brand.GetBrandsNameAsString();
	}

	// Autocomplite Search Func for Brand
	private async Task<IEnumerable<string>> BrandSearch(string value)
	{
		return string.IsNullOrEmpty(value) ? Brands : Brands.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
	}

	// Get Brand ID
	private async Task GetBrandID(string s)
	{
		Product.brandName = s;
		if (!String.IsNullOrEmpty(s))
		{
			var brand = await _brand.GetBrand(s);
			Product.brandId = brand.brandId;
		}
	}

	// Country Array
	private string[] countries = { "Afghanistan", "Albania", "Algeria", "American Samoa", "Andorra", "Angola", "Anguilla", "Antarctica", "Antigua and Barbuda", "Argentina", "Armenia", "Aruba", "Australia", "Austria", "Azerbaijan", "Bahamas", "Bahrain", "Bangladesh", "Barbados", "Belarus", "Belgium", "Belize", "Benin", "Bermuda", "Bhutan", "Bolivia", "Bosnia and Herzegowina", "Botswana", "Bouvet Island", "Brazil", "British Indian Ocean Territory", "Brunei Darussalam", "Bulgaria", "Burkina Faso", "Burundi", "Cambodia", "Cameroon", "Canada", "Cape Verde", "Cayman Islands", "Central African Republic", "Chad", "Chile", "China", "Christmas Island", "Cocos (Keeling) Islands", "Colombia", "Comoros", "Congo", "Congo, the Democratic Republic of the", "Cook Islands", "Costa Rica", "Cote d'Ivoire", "Croatia (Hrvatska)", "Cuba", "Cyprus", "Czech Republic", "Denmark", "Djibouti", "Dominica", "Dominican Republic", "East Timor", "Ecuador", "Egypt", "El Salvador", "Equatorial Guinea", "Eritrea", "Estonia", "Ethiopia", "Falkland Islands (Malvinas)", "Faroe Islands", "Fiji", "Finland", "France", "France Metropolitan", "French Guiana", "French Polynesia", "French Southern Territories", "Gabon", "Gambia", "Georgia", "Germany", "Ghana", "Gibraltar", "Greece", "Greenland", "Grenada", "Guadeloupe", "Guam", "Guatemala", "Guinea", "Guinea-Bissau", "Guyana", "Haiti", "Heard and Mc Donald Islands", "Holy See (Vatican City State)", "Honduras", "Hong Kong", "Hungary", "Iceland", "India", "Indonesia", "Iran", "Iraq", "Ireland", "Israel", "Italy", "Jamaica", "Japan", "Jordan", "Kazakhstan", "Kenya", "Kiribati", "Kuwait", "Kyrgyzstan", "Lao, People's Democratic Republic", "Latvia", "Lebanon", "Lesotho", "Liberia", "Libyan Arab Jamahiriya", "Liechtenstein", "Lithuania", "Luxembourg", "Macau", "Macedonia, The Former Yugoslav Republic of", "Madagascar", "Malawi", "Malaysia", "Maldives", "Mali", "Malta", "Marshall Islands", "Martinique", "Mauritania", "Mauritius", "Mayotte", "Mexico", "Micronesia, Federated States of", "Moldova, Republic of", "Monaco", "Mongolia", "Montserrat", "Morocco", "Mozambique", "Myanmar", "Namibia", "Nauru", "Nepal", "Netherlands", "Netherlands Antilles", "New Caledonia", "New Zealand", "Nicaragua", "Niger", "Nigeria", "Niue", "Norfolk Island", "North Korea", "Northern Mariana Islands", "Norway", "Oman", "Pakistan", "Palau", "Panama", "Papua New Guinea", "Paraguay", "Peru", "Philippines", "Pitcairn", "Poland", "Portugal", "Puerto Rico", "Qatar", "Reunion", "Romania", "Russian Federation", "Rwanda", "Saint Kitts and Nevis", "Saint Lucia", "Saint Vincent and the Grenadines", "Samoa", "San Marino", "Sao Tome and Principe", "Saudi Arabia", "Senegal", "Seychelles", "Sierra Leone", "Singapore", "Slovakia (Slovak Republic)", "Slovenia", "Solomon Islands", "Somalia", "South Africa", "South Korea", "South Georgia and the South Sandwich Islands", "Spain", "Sri Lanka", "St. Helena", "St. Pierre and Miquelon", "Sudan", "Suriname", "Svalbard and Jan Mayen Islands", "Swaziland", "Sweden", "Switzerland", "Syrian Arab Republic", "Taiwan, Province of China", "Tajikistan", "Tanzania, United Republic of", "Thailand", "Togo", "Tokelau", "Tonga", "Trinidad and Tobago", "Tunisia", "Turkey", "Turkmenistan", "Turks and Caicos Islands", "Tuvalu", "Uganda", "Ukraine", "United Arab Emirates", "United Kingdom", "United States", "United States Minor Outlying Islands", "Uruguay", "Uzbekistan", "Vanuatu", "Venezuela", "Vietnam", "Virgin Islands (British)", "Virgin Islands (U.S.)", "Wallis and Futuna Islands", "Western Sahara", "Yemen", "Yugoslavia", "Zambia", "Zimbabwe" };

	// Search Country
	private async Task<IEnumerable<string>> CountrySearch(string value)
	{
		return string.IsNullOrEmpty(value) ? countries : countries.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
	}

	// Decode Rich Text
	private async Task DecodeRich()
	{
		var DecodedDescription = await _encodeDecode.DecodeBase64ToString(Product.richDescription);
		await this.QuillNative.LoadHTMLContent(DecodedDescription);
	}

	// Free Product Modal
	private async Task OpenFreeProductModal()
	{
		var parameters = new DialogParameters();
		parameters.Add("FormData", new FreeProductDTO());

		var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
		var dialog = await DialogService.Show<AddFreeProductModal>("Add Free Product", parameters, options).Result;

		if (dialog.Data != null)
		{
			FreeProductDTO newFreeProduct = dialog.Data as FreeProductDTO;
			Product.freeProducts.Add(newFreeProduct);
		}
	}

	// Remove Free Product From List
	private void RemoveFreeProductFromList(string sku)
	{
		int index = Product.freeProducts.FindIndex(e => e.sku == sku);

		Product.freeProducts.RemoveAt(index);
	}

	// Category
	// Category List
	private string[] ParentCats = new string[] { };
	private string[] ChildCats = new string[] { };
	private string[] GrandChildCats = new string[] { };

	// Category Class
	private ProductCategoryDTO CategoryData = new ProductCategoryDTO();
	private List<ProductCategoryDTO> CategoryList = new List<ProductCategoryDTO>();

	// Get Parent As String
	private async Task GetParentCatsString()
	{
		ParentCats = await _category.GetParentCatAsString();
	}

	// Get Child And Grand As String
	private async Task GetChildAndGrandCatsString()
	{
		if (Product.prodCategories.Count() > 0)
		{
			CategoryData.parentCatId = Product.prodCategories[0].parentCatId;
			CategoryData.parentCatName = Product.prodCategories[0].parentCatName;
			CategoryData.childCatId = Product.prodCategories[0].childCatId;
			CategoryData.childCatName = Product.prodCategories[0].childCatName;
			CategoryData.gChildCatId = Product.prodCategories[0].gChildCatId;
			CategoryData.gChildCatName = Product.prodCategories[0].gChildCatName;

			if (Product.prodCategories[0].parentCatId > 0)
			{
				ChildCats = await _category.GetChildCatAsStringByParentId(Product.prodCategories[0].parentCatId);
			}
			if (Product.prodCategories[0].childCatId > 0)
			{
				GrandChildCats = await _category.GetGrandChildCatAsStringByChildId(Product.prodCategories[0].childCatId);
			}
		}
	}

	// Get Parent ID and Child As String
	private async Task GetParentCatId(string s)
	{
		if (String.IsNullOrEmpty(s))
		{
			CategoryData.parentCatName = s;
			if (GrandChildCats.Length > 0)
			{
				Array.Clear(GrandChildCats, 0, GrandChildCats.Length);
				CategoryData.gChildCatName = String.Empty;
			}
			if (ChildCats.Length > 0)
			{
				Array.Clear(ChildCats, 0, ChildCats.Length);
				CategoryData.childCatName = String.Empty;
			}

			return;
		}
		CategoryData.parentCatName = s;

		if (GrandChildCats.Length > 0)
		{
			Array.Clear(GrandChildCats, 0, GrandChildCats.Length);
			CategoryData.gChildCatName = String.Empty;
		}

		CategoryData.childCatName = String.Empty;

		var result = await _category.GetParentCat(s);

		CategoryData.parentCatId = result.id;

		ChildCats = await _category.GetChildCatAsString(result.child);
	}

	// Get Child Cat ID and GChild As String
	private async Task GetChildCatId(string s)
	{
		if (String.IsNullOrEmpty(s))
		{
			CategoryData.childCatName = s;
			if (GrandChildCats.Length > 0)
			{
				Array.Clear(GrandChildCats, 0, GrandChildCats.Length);
				CategoryData.gChildCatName = String.Empty;
			}
			return;
		}

		CategoryData.childCatName = s;

		var result = await _category.GetParentCat(CategoryData.parentCatName);

		var Child = result.child.FirstOrDefault(x => x.childCat == s);

		CategoryData.childCatId = Child.id;

		GrandChildCats = await _category.GetGrandChildCatAsString(Child.grandChild);

		CategoryData.gChildCatName = String.Empty;
	}

	// Get GChild Cat ID
	private async Task GetGrandChildId(string s)
	{
		CategoryData.gChildCatName = s;

		if (!String.IsNullOrEmpty(s))
		{
			var result = await _category.GetParentCat(CategoryData.parentCatName);

			var Child = result.child.FirstOrDefault(x => x.childCat == CategoryData.childCatName);

			var GrandChild = Child.grandChild.FirstOrDefault(x => x.gChildCat == s);

			CategoryData.gChildCatId = GrandChild.id;
		}
	}

	// Autocomplite Search Func for ParentCat
	private async Task<IEnumerable<string>> ParentCatSearch(string value)
	{
		return string.IsNullOrEmpty(value) ? ParentCats : ParentCats.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
	}

	// Autocomplite Search Func for ChildCat
	private async Task<IEnumerable<string>> ChildCatSearch(string value)
	{
		return string.IsNullOrEmpty(value) ? ChildCats : ChildCats.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
	}

	// Autocomplite Search Func for GrandChildCat
	private async Task<IEnumerable<string>> GrandChildCatSearch(string value)
	{
		return string.IsNullOrEmpty(value) ? GrandChildCats : GrandChildCats.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
	}

	// Product Images
	private List<ProductImageDTO> ProductImages = new List<ProductImageDTO>();

	// Upload Image
	private async Task UploadImage(InputFileChangeEventArgs e)
	{
		try
		{
			var ImageBase = await _base64.ConvertToBase64(51200, 600, 600, e);

			var productImage = new ProductImageDTO()
				{
					base64Attch = ImageBase,
					altImageName = e.File.Name
				};

			ProductImages.Add(productImage);
		}
		catch (Exception error)
		{
			Snackbar.Add(error.Message, Severity.Error);
		}
	}

	// Remove Image
	private void DeleteImage(ProductImageDTO Image)
	{
		ProductImages.Remove(Image);
	}

	// Update Image
	private UpdateProductImageDTO ImageUpdateList = new UpdateProductImageDTO();

	private async Task UpdateImage()
	{
		ImageUpdateList.images = ProductImages;
		try
		{
			await _childProduct.UpdateImage(ImageUpdateList, Product.id);
			Snackbar.Add("Image Updated Successfully!", Severity.Success);
			ProductImages.Clear();
			await GetProduct();
		}
		catch (Exception)
		{
			throw;
		}
	}

	// Remove Image From Database
	private async Task RemoveImage(int id)
	{
		try
		{
			await _childProduct.DeleteImage(id);
			Snackbar.Add("Image Deleted Successfully!", Severity.Success);
			await GetProduct();
		}
		catch (Exception)
		{
			throw;
		}
	}

	// Update Parent
	private ParentProductDTO Parent = new ParentProductDTO();

	private async Task<bool> UpdateParent()
	{
		Parent.brandID = Product.brandId;
		Parent.originId = Product.originId;
		Parent.id = Product.productParentID;
		Parent.name = null;
		Parent.brand = Product.brandName;
		Parent.productType = "Simple";
		var Temp_Des = await this.QuillNative.GetHTML();
		Parent.description = await _encodeDecode.EncodeStringToBase64(Temp_Des);

		try
		{
			var result = await _parentProduct.UpdateParentProduct(Parent);

			return result;
		}
		catch (Exception)
		{
			throw;
		}
	}


	// Update Product
	private ChildProductUpdateDTO UpdatedProduct = new ChildProductUpdateDTO();

	private async Task UpdateProduct()
	{
		if (Product.isHasFreeProd == true && Product.freeProducts.Count == 0)
		{
			Snackbar.Add("Please Add Free Product Or Uncheck Is Has Free Product!", Severity.Error);
			return;
		}

		if (Product.isSize == false && String.IsNullOrEmpty(Product.colorCode))
		{
			Snackbar.Add("Please Add Color Code!", Severity.Error);
			return;
		}

		CategoryList.Add(CategoryData);

		UpdatedProduct.updateFreeProducts = Product.freeProducts;
		UpdatedProduct.updateProductDTO = Product;
		UpdatedProduct.updateProdCategories = CategoryList;

		try
		{
			var Presult = await UpdateParent();

			if (Presult == false)
			{
				Snackbar.Add("Something went Wrong!", Severity.Error);
				return;
			}
			var result = await _childProduct.UpdateChildProduct(UpdatedProduct);

			if (result == "Product Updated Successfully")
			{
				Snackbar.Add(result, Severity.Success);
				await GetProduct();
				return;
			}

			Snackbar.Add(result, Severity.Error);
		}
		catch (Exception) { Snackbar.Add("Internal Server Error!", Severity.Error); }
	}
}
