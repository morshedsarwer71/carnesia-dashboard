@page "/bulk-image-upload"
@using Carnesia.Domain.CMS.ChildProduct
@using Syncfusion.XlsIO
@using System.IO
@using System.Data
@inject Microsoft.JSInterop.IJSRuntime JS
@inject IChildProduct _childProduct
@inject ISnackbar Snackbar

<MudPaper Class="py-16 px-3 ma-2">
	<MudContainer Fixed="true">
		<div class="d-flex justify-center mb-5">
            <a href="./BulkImage.xlsx" download target="_top">
			    <MudButton Class="me-3" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ArrowDownward" Style="background-color: yellowgreen; color: white;">
                    Download CSV Template
                </MudButton>
            </a>

			<InputFile id="fileInput" hidden accept=".xlsx" OnChange="UploadFile"/>
            <MudButton HtmlTag="label"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       StartIcon="@Icons.Filled.CloudUpload"
                       for="fileInput">
                Upload File
            </MudButton>
		</div>

        <MudTable Items="@Images" Dense="true" Loading="Loading" LoadingProgressColor="Color.Info" >
            <HeaderContent>
                <MudTh>Image URL</MudTh>
                <MudTh>Image Name</MudTh>
                <MudTh>ALT Text</MudTh>
                <MudTh>Product Id</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Image URL">@context.url</MudTd>
                <MudTd DataLabel="Image Name">@context.imageName</MudTd>
                <MudTd DataLabel="ALT Text">@context.altImageName</MudTd>
                <MudTd DataLabel="Product Id">@context.productCode</MudTd>
            </RowTemplate>
        </MudTable>

        <div class="d-flex justify-end mt-5">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="Images.Count <= 0 ? true : false" OnClick="CreateBulkImages">Submit</MudButton>
        </div>

        @if (RejectedImages.Count > 0)
        {
            <MudText>Rejected Images</MudText>
            <MudTable Items="@RejectedImages" Dense="true" >
                <HeaderContent>
                    <MudTh>Image URL</MudTh>
                    <MudTh>Image Name</MudTh>
                    <MudTh>ALT Text</MudTh>
                    <MudTh>Product Code</MudTh>
                    <MudTh>Description</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Image URL">@context.url</MudTd>
                    <MudTd DataLabel="Image Name">@context.imageName</MudTd>
                    <MudTd DataLabel="ALT Text">@context.altImageName</MudTd>
                    <MudTd DataLabel="Product Code">@context.productCode</MudTd>
                    <MudTd DataLabel="Description">@context.description</MudTd>
                </RowTemplate>
            </MudTable>
            <div class="mb-5 d-flex justify-end">
                <MudButton StartIcon="@Icons.Filled.Download" Variant="Variant.Filled" Color="Color.Success" Disabled="RejectedImages.Count > 0 ? false : true" OnClick="CreateDocument">Download XLSL</MudButton>
            </div>
        }
	</MudContainer>
</MudPaper>

@code {
    // Loading
    private bool Loading { get; set; }

    // Image List
    private List<BulkImageUploadDTO> Images = new List<BulkImageUploadDTO>();
    private List<BulkImageUploadDTO> RejectedImages = new List<BulkImageUploadDTO>();

    // Upload .xlsx
    private async Task UploadFile (InputFileChangeEventArgs e)
    {
        Loading = true;
        try
        {
            Images.Clear();
            Images =  await _childProduct.UploadXLSXFileForImage(e);
            Loading = false;
        }
        catch (Exception)
        {
            Snackbar.Add("Error", Severity.Error);
            Loading = false;
        }
    }

    // Create Bulk Images
    private async Task CreateBulkImages()
    {
        Loading = true;
        try
        {
            RejectedImages = await _childProduct.CreateBulkImages(Images);
            Snackbar.Add("Images Created Successfully!", Severity.Success);
            Loading = false;
        }
        catch (Exception)
        {
            Snackbar.Add("Error", Severity.Error);
            Loading = false;
        }
    }

    // Create Document
    private async Task CreateDocument()
    {
        using (ExcelEngine excelEngine = new ExcelEngine())
        {
            IApplication application = excelEngine.Excel;
            application.DefaultVersion = ExcelVersion.Xlsx;

            //Create a workbook.
            IWorkbook workbook = application.Workbooks.Create(1);
            IWorksheet worksheet = workbook.Worksheets[0];

            //Initialize DataTable and data get from SampleDataTable method.
            DataTable table = ParentDataTable();

            //Export data from DataTable to Excel worksheet.
            worksheet.ImportDataTable(table, true, 1, 1);

            worksheet.UsedRange.AutofitColumns();

            //Save the document as a stream and return the stream.
            using (MemoryStream stream = new MemoryStream())
            {
                //Save the created Excel document to MemoryStream
                workbook.SaveAs(stream);

                //Download the excel file.
                await JS.SaveAs("CategoryBulkError.xlsx", stream.ToArray());
            }
        }
    }

    private DataTable ParentDataTable()
    {
        DataTable reports = new DataTable();
        reports.Columns.Add("ImageURL");
        reports.Columns.Add("ImageName");
        reports.Columns.Add("AltTest");
        reports.Columns.Add("ProductCode");
        reports.Columns.Add("Description");

        foreach (var item in RejectedImages)
        {
            reports.Rows.Add(item.url, item.imageName, item.altImageName, item.productCode, item.description);
        }
        return reports;
    }
}
