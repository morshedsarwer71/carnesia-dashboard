@page "/update-combo/{id:int}"

@using Carnesia.Domain.CMS.ComboProducts
@using Carnesia.Shared.CMS.Combo
@inject IEncodeDecode _encodeDecode
@inject IProducts _products
@inject ISnackbar Snackbar
@inject IBase64 _base64
@inject IDialogService DialogService
@inject ICombo _combo

<MudPaper Class="ma-2 pa-16">
    <MudContainer Fixed="true">
        <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
            <MudGrid Class="mb-5">
                <MudItem sm="6">
                    <MudTextField @bind-Value="FormData.comboProductName" Label="Combo Name" Required="true" RequiredError="Combo name is required!" />
                </MudItem>
                <MudItem sm="6">
                    <MudNumericField Label="Sell Quantity" @bind-Value="FormData.sellQuantity" />
                </MudItem>
                @*<MudItem sm="6">
                    <MudAutocomplete Label="Product SKU" SearchFunc="@ProductSKUSearch" @bind-Value="FormData.sku" Disabled="@(FormData.bcType == "Combo" || FormData.bcType == "Clearance")" Required="@(FormData.bcType == "Bogo")" ResetValueOnEmptyText="true" />
                </MudItem>*@
                <MudItem sm="6">
                    <MudDatePicker Label="Start Date" DateFormat="yyyy-MM-dd" @bind-Text="FormData.startDate" />
                </MudItem>
                <MudItem sm="6">
                    <MudTimePicker Label="Start Time" @bind-Time="StartTime" />
                </MudItem>
                <MudItem sm="6">
                    <MudDatePicker Label="End Date" DateFormat="yyyy-MM-dd" @bind-Text="FormData.endDate" />
                </MudItem>
                <MudItem sm="6">
                    <MudTimePicker Label="End Time" @bind-Time="EndTime" />
                </MudItem>
                <MudItem sm="6">
                    <MudNumericField Label="Regular Price" @bind-Value="FormData.regularPrice" />
                </MudItem>
                <MudItem sm="6">
                    <MudNumericField Label="Combo Price" @bind-Value="FormData.comboPrice" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField Lines="5" @bind-Value="FormData.description" Label="Description" Required="true" RequiredError="Description is required!" />
                </MudItem>
                <MudItem xs="12">
                    <BlazoredTextEditor @ref="@QuillNative" Placeholder="Product Description...">
                        <ToolbarContent>
                            <span class="ql-formats">
                                <select class="ql-font">
                                    <option selected=""></option>
                                    <option value="serif"></option>
                                    <option value="monospace"></option>
                                </select>
                                <select class="ql-size">
                                    <option value="small"></option>
                                    <option selected=""></option>
                                    <option value="large"></option>
                                    <option value="huge"></option>
                                </select>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-bold"></button>
                                <button class="ql-italic"></button>
                                <button class="ql-underline"></button>
                                <button class="ql-strike"></button>
                            </span>
                            <span class="ql-formats">
                                <select class="ql-color"></select>
                                <select class="ql-background"></select>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-list" value="ordered"></button>
                                <button class="ql-list" value="bullet"></button>
                                <button class="ql-indent" value="-1"></button>
                                <button class="ql-indent" value="+1"></button>
                                <select class="ql-align">
                                    <option selected=""></option>
                                    <option value="center"></option>
                                    <option value="right"></option>
                                    <option value="justify"></option>
                                </select>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-link"></button>
                            </span>
                        </ToolbarContent>
                    </BlazoredTextEditor>
                </MudItem>
            </MudGrid>

            <div class="my-5 d-flex justify-end">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenProductModal">Add Product</MudButton>
            </div>

            <MudTable Items="@FormData.products" Hover="true" Dense="true">
                <HeaderContent>
                    <MudTh>SKU</MudTh>
                    <MudTh>Regular Price</MudTh>
                    <MudTh>Quantity</MudTh>
                    <MudTh>Discount Type</MudTh>
                    <MudTh>Discount Ammount</MudTh>
                    <MudTh>After Discount</MudTh>
                    <MudTh>Action</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="SKU">@context.sku</MudTd>
                    <MudTd DataLabel="Regular Price">@context.regularPrice</MudTd>
                    <MudTd DataLabel="Quantity">@context.quantity</MudTd>
                    <MudTd DataLabel="Discount Type">@context.discountType</MudTd>
                    <MudTd DataLabel="Discount Ammount">@context.discountAmount</MudTd>
                    <MudTd DataLabel="After Discount">@context.afterDiscAmount</MudTd>
                    <MudTd DataLabel="Action">
                        <MudButton OnClick="() => RemoveProduct(context.id)">
                            <MudIcon Icon="@Icons.Filled.Delete" Color="Color.Error" />
                        </MudButton>
                    </MudTd>
                </RowTemplate>
            </MudTable>

            <div class="mt-5">
                <InputFile id="fileInput" hidden accept=".webp" OnChange="UploadImage" />

                <MudButton HtmlTag="label"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Filled.CloudUpload"
                           for="fileInput">
                    Upload Images
                </MudButton>
                <MudText Class="mt-1">600 * 600(Max 50Kb)</MudText>
            </div>

            <MudImage Src="@($"data:image/webp;base64,{FormData.base64Attch}")" Alt="" Elevation="25" Class="rounded-lg mt-3" Style="width:200px;" />

            <div class="d-flex align-center justify-space-between">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto" OnClick="UpdateDetails">Update</MudButton>
            </div>
        </MudForm>
    </MudContainer>
</MudPaper>

@code {
    // Page On Load
    protected override async Task OnInitializedAsync()
    {
        //ProductSKU = await _products.GetProductsAsSKU();
        await GetCombo();
        await SetTime();

        var DecodedDescription = await _encodeDecode.DecodeBase64ToString(FormData.richDescription);
        await this.QuillNative.LoadHTMLContent(DecodedDescription);
    }

    [Parameter]
    public int id { get; set; }

    // Form Ref
    bool success;
    string[] errors = { };
    MudForm form;

    // Rich Text
    BlazoredTextEditor QuillNative;

    // Details
    private ComboListDTO FormData = new ComboListDTO();

    // Get Campaign
    private async Task GetCombo()
    {
        FormData = await _combo.GetComboById(id);
    }

    //Time
    private TimeSpan? StartTime = new TimeSpan();
    private TimeSpan? EndTime = new TimeSpan();

    // Set Time
    private async Task SetTime()
    {
        StartTime = TimeSpan.Parse(FormData.startTime.Remove(FormData.startTime.Length - 5));
        EndTime = TimeSpan.Parse(FormData.endTime.Remove(FormData.endTime.Length - 5));
    }

    // Product SKU List
    //private string[] ProductSKU = new string[] { };

    // Autocomplite Search Func for ParentCat
    //private async Task<IEnumerable<string>> ProductSKUSearch(string value)
    //{
    //    return string.IsNullOrEmpty(value) ? ProductSKU : ProductSKU.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    //}

    // Upload Image
    private async Task UploadImage(InputFileChangeEventArgs e)
    {
        try
        {
            FormData.base64Attch = await _base64.ConvertToBase64(153600, 1080, 420, e);
        }
        catch (Exception error)
        {
            Snackbar.Add(error.Message, Severity.Error);
        }
    }

    // Delete Product
    private async Task RemoveProduct(int id)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
        var dialog = await DialogService.Show<DeleteConfirmationModal>("Delete Confirmation", options).Result;

        if (!dialog.Cancelled)
        {
            try
            {
                var result = await _combo.RemoveProduct(id);
                if (result)
                {
                    Snackbar.Add("Product Deleted Successfully!", Severity.Success);
                    await GetCombo();
                    return;
                }
                Snackbar.Add("Something Went Wrong!", Severity.Error);
            }
            catch (Exception)
            {
                throw;
            }
        }
    }

    // Add Product Modal
    private async Task OpenProductModal()
    {
        var parameters = new DialogParameters();
        parameters.Add("FormData", new AddComboProductDTO()
            {
                comboCode = FormData.comboCode
            });

        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
        var dialog = await DialogService.Show<AddComboProductModal>("Add New Product", parameters, options).Result;

        if (dialog.Data != null)
        {
            AddComboProductDTO newProduct = dialog.Data as AddComboProductDTO;

            if (newProduct.discountType == "Cash")
            {
                newProduct.afterDiscAmount = newProduct.regularPrice - newProduct.discountAmount;
            }
            else
            {
                newProduct.afterDiscAmount = newProduct.regularPrice - ((newProduct.regularPrice * newProduct.discountAmount) / 100);
            }

            newProduct.productId = await _products.GetProductIdBySku(newProduct.sku);

            try
            {
                var result = await _combo.AddProduct(newProduct);
                if (result)
                {
                    Snackbar.Add("Product Added Successfully!", Severity.Success);
                    await GetCombo();
                    return;
                }
                Snackbar.Add("Something Went Wrong!", Severity.Error);

            }
            catch (Exception)
            {
                throw;
            }
        }
    }

    // Update Combo Details
    private async Task UpdateDetails()
    {
        var Temp_Des = await this.QuillNative.GetHTML();

        FormData.richDescription = await _encodeDecode.EncodeStringToBase64(Temp_Des);
        try
        {

            var comboDetails = new ComboListDTO()
                {
                    comboProductName = FormData.comboProductName,
                    //productId = FormData.productId,
                    regularPrice = FormData.regularPrice,
                    comboPrice = FormData.comboPrice,
                    description = FormData.description,
                    richDescription = FormData.richDescription,
                    isApproved = FormData.isApproved,
                    base64Attch = FormData.base64Attch,
                    comboId = FormData.comboId,
                    startDate = $"{FormData.startDate}T{StartTime}.000Z",
                    endDate = $"{FormData.endDate}T{EndTime}.000Z",
                };

            var result = await _combo.UpdateCombo(comboDetails);

            if (result)
            {
                Snackbar.Add("Combo Details Updated Successfully!", Severity.Success);
                return;
            }
            Snackbar.Add("Something Went Wrong!", Severity.Error);
        }
        catch (Exception) { throw; }
    }
}
