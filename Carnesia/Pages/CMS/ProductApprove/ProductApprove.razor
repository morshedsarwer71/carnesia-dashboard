@page "/product-approve"

@using Carnesia.Domain.CMS.ProductList
@using Carnesia.Domain.Common.POCO
@inject IProductList _productList
@inject ISnackbar Snackbar

<MudPaper Class="ma-2 pa-16">
	<MudContainer Fixed="true">
        <MudTable Items="@Elements" Dense="@tableCommon.Dense" Hover="@tableCommon.Hover" Bordered="@tableCommon.Bordered" Striped="@tableCommon.Striped" Filter="new Func<ProductQuickSettingDTO,bool>(FilterFuncInitial)">
            <ToolBarContent>
                <MudSpacer />
                <MudSpacer />
                <MudTextField @bind-Value="tableCommon.SearchTerm" Immediate="false" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"/>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Product Name</MudTh>
                <MudTh>SKU</MudTh>
                <MudTh>Product Code</MudTh>
                <MudTh>MRP</MudTh>
                <MudTh>New MRP</MudTh>
                <MudTh>Discount</MudTh>
                <MudTh>Discount Type</MudTh>
                <MudTh>Approve</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Product Name">@context.productName</MudTd>
                <MudTd DataLabel="SKU">@context.productsku</MudTd>
                <MudTd DataLabel="Product Code">@context.productCode</MudTd>
                <MudTd DataLabel="MRP">@context.mrp</MudTd>
                <MudTd DataLabel="New MRP">@context.newMRP</MudTd>
                <MudTd DataLabel="Discount">@context.discount</MudTd>
                <MudTd DataLabel="Discount Type">@(context.isPercent ? "Percent" : "Cash")</MudTd>
                <MudTd DataLabel="Approve">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => ApproveProduct(context.productPriceId)">Approve</MudButton>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>

        <div class="d-flex flex-wrap mt-4">
            <MudSwitch @bind-Checked="@tableCommon.Hover" Color="Color.Primary">Hover</MudSwitch>
            <MudSwitch @bind-Checked="@tableCommon.Dense" Color="Color.Secondary">Dense</MudSwitch>
            <MudSwitch @bind-Checked="@tableCommon.Striped" Color="Color.Tertiary">Striped</MudSwitch>
            <MudSwitch @bind-Checked="@tableCommon.Bordered" Color="Color.Warning">Bordered</MudSwitch>
        </div>
	</MudContainer>
</MudPaper>

@code {
    // Page On Load
    protected override async Task OnInitializedAsync()
    {
        await GetProducts();
    }

    // Table Customaization
    private TableCommon tableCommon = new TableCommon();

    // Product List
    private List<ProductQuickSettingDTO> Elements = new List<ProductQuickSettingDTO>();

    // Get Products
    private async Task GetProducts()
    {
        Elements = await _productList.GetAllUnapprovedProducts();
    }

    // Approve Product
    private async Task ApproveProduct(int id)
    {
        try
        {
            var result = await _productList.ApproveProduct(id);
            if (result)
            {
                Snackbar.Add("Product Approved Successfully!", Severity.Success);
                await GetProducts();
                return;
            }
            Snackbar.Add("Something Went Wrong!", Severity.Error);
        }
        catch (Exception)
        {
            Snackbar.Add("Something Went Wrong!", Severity.Error);
            throw;
        }
    }

    // Table Search
    private bool FilterFuncInitial(ProductQuickSettingDTO element) => FilterFunc(element, tableCommon.SearchTerm);

    private bool FilterFunc(ProductQuickSettingDTO element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.productName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.productsku.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.productCode.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}
