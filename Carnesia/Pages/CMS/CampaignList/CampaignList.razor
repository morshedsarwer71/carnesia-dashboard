@page "/campaign-list"

@using Carnesia.Domain.CMS.Campaign
@using Carnesia.Domain.Common.POCO
@using Carnesia.Shared.CommonComponents
@using Carnesia.Shared.CMS.CampaignCarousel
@using Carnesia.Domain.CMS.CampaignCarousel
@inject ICampaignList _campaign
@inject ICampaignCarousel _carousel
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject IJSRuntime IJS

<MudPaper Class="py-16 px-3 ma-2">
	<MudContainer Fixed="true">
		<div class="d-flex justify-end mb-5">
			<MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Filled.Add" OnClick="NavigateToCreateCampaign" >Add New Campaign</MudButton>
		</div>

		<MudTable RowsPerPage="25" Items="@Elements" Dense="@tableCommon.Dense" Hover="@tableCommon.Hover" Bordered="@tableCommon.Bordered" Striped="@tableCommon.Striped" Filter="new Func<CampaignDTO,bool>(FilterFuncInitial)" Loading="Loading" LoadingProgressColor="Color.Info" >
            <ToolBarContent>
                <MudSpacer />
                <MudSpacer />
                <MudTextField Immediate="true" @bind-Value="tableCommon.SearchTerm" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"/>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Campaign Name</MudTh>
                <MudTh>Platform</MudTh>
                <MudTh>Start Date</MudTh>
                <MudTh>End Date</MudTh>
                <MudTh>Image</MudTh>
                <MudTh>Publish</MudTh>
                <MudTh>Home</MudTh>
                <MudTh>Carousel/Section</MudTh>
                <MudTh>Action</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Campaign Name">@context.campaignName</MudTd>
                <MudTd DataLabel="Platform">@context.platformType</MudTd>
                <MudTd DataLabel="Start Date">@context.startDate</MudTd>
                <MudTd DataLabel="End Date">@context.endDate</MudTd>
                <MudTd DataLabel="Image">
                    <MudImage @onclick="() => ShowImage(context.imageWebUrl)" Src="@($"https://localhost:7090/{context.imageWebUrl}")" Alt="@context.campaignName" Elevation="25" Class="rounded-lg" Style="width:100px" />
                </MudTd>
                <MudTd DataLabel="Publish">
                    <MudSwitch @bind-Checked="@context.isPublish" Color="Color.Primary" @onclick="(() => TogglePublish(context.id))"/>
                </MudTd>
                <MudTd DataLabel="Home">
                    <MudSwitch @bind-Checked="@context.isHome" Color="Color.Primary" @onclick="(() => ToggleHome(context.id))"/>
                </MudTd>
                <MudTd DataLabel="Carousel/Section">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => OpenCarouselModal(context.id)">Carousel</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => GoToSection(context.id)">Section</MudButton>
                </MudTd>
                <MudTd DataLabel="Action">
                    <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="() => NavigateToUpdate(context.id)">Edit</MudButton>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>

        <div class="d-flex flex-wrap mt-4">
            <MudSwitch @bind-Checked="@tableCommon.Hover" Color="Color.Primary">Hover</MudSwitch>
            <MudSwitch @bind-Checked="@tableCommon.Dense" Color="Color.Secondary">Dense</MudSwitch>
            <MudSwitch @bind-Checked="@tableCommon.Striped" Color="Color.Tertiary">Striped</MudSwitch>
            <MudSwitch @bind-Checked="@tableCommon.Bordered" Color="Color.Warning">Bordered</MudSwitch>
        </div>
	</MudContainer>
</MudPaper>

@code {
    // Page On Load
    protected override async Task OnInitializedAsync()
    {
        await GetCampaigns();
    }

    // Go to Section
    private async Task GoToSection(int id)
    {
        await IJS.InvokeAsync<object>("open", new object[] { $"create-campaign-section/{id}", "_blank" });
    }

    // Loading
    private bool Loading { get; set; }

    // Table Customaization
    private TableCommon tableCommon = new TableCommon();

    // Table Content
    private IEnumerable<CampaignDTO> Elements = new List<CampaignDTO>();

    // Get Campaigns
    private async Task GetCampaigns()
    {
        Loading = true;
        try
        {
            Elements = await _campaign.GetCampaigns();
            Loading = false;
        }catch(Exception e)
        {
            Console.WriteLine(e.Message);
            Loading = false;
        }
    }

    // Toggle Publish
    private async Task TogglePublish(int id)
    {
        try
        {
            var result = await _campaign.Publishtoggle(id);
            if (result)
            {
                Snackbar.Add("Published Changed!", Severity.Success);
                await GetCampaigns();
                return;
            }
            Snackbar.Add("Toggle failed!", Severity.Error);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            Snackbar.Add("Internal server error!", Severity.Error);
        }
    }

    // Toggle Home
    private async Task ToggleHome(int id)
    {
        try
        {
            var result = await _campaign.ToggleHomePlacement(id);
            if (result)
            {
                Snackbar.Add("Campaign Toggled Successfully!", Severity.Success);
                await GetCampaigns();
                return;
            }
            Snackbar.Add("Toggle failed!", Severity.Error);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            Snackbar.Add("Internal server error!", Severity.Error);
        }
    }

    // Navigate To Create Campaign
    private void NavigateToCreateCampaign()
    {
        NavigationManager.NavigateTo("create-campaign");
    }

    // Navigate To Campaign Update 
    private void NavigateToUpdate(int id)
    {
        NavigationManager.NavigateTo($"update-campaign/{id}");
    }

    // Add Carousel
    private async Task OpenCarouselModal(int id)
    {
        var parameters = new DialogParameters();
        parameters.Add("FormData", new CampaignCarouselDTO{campaignId = id});

        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
        var dialog = await DialogService.Show<CreateCampaignCarouselModal>("Add New Carousel", parameters, options).Result;

        if (dialog.Data != null)
        {
            CampaignCarouselDTO newCarousel = dialog.Data as CampaignCarouselDTO;

            try
            {
                var result = await _carousel.CreateCarousel(newCarousel);

                if (result)
                {
                    Snackbar.Add("New Carousel Created Successfully!", Severity.Success);
                    return;
                }

                Snackbar.Add("Carousel Creation Failed!", Severity.Error);
            }
            catch (Exception)
            {
                Snackbar.Add("Internal Server Error!", Severity.Error);
            }
        }
    }

    // Table Search
    private bool FilterFuncInitial(CampaignDTO element) => FilterFunc(element, tableCommon.SearchTerm);

    private bool FilterFunc(CampaignDTO element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.campaignName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.platformType.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    // Show Image
    private void ShowImage(string url)
    {
        var parameters = new DialogParameters();
        parameters.Add("ImageUrl", url);

        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
        DialogService.Show<ShowImageModal>("Image", parameters, options);
    }
}
