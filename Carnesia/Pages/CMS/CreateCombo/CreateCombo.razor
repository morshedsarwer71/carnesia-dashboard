@page "/create-combo"

@using Carnesia.Domain.CMS.ComboProducts
@using Carnesia.Domain.CRM.Vouchers.StoreVoucher.CreateStoreVoucher;
@using Carnesia.Shared.CMS.Combo
@inject IProducts _products
@inject ISnackbar Snackbar
@inject IBase64 _base64
@inject IDialogService DialogService
@inject ICombo _combo
@inject IStore _store

<MudPaper Class="py-16 px-3 ma-2">
	<MudContainer Fixed="true">
		<MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
			<MudGrid Class="mb-5">
				<MudItem sm="6">
					<MudTextField @bind-Value="FormData.comboProductName" Label="Combo/Bogo Name" Required="true" RequiredError="Combo name is required!" />
				</MudItem>
				<MudItem sm="6">
					<MudSelect T="string" Label="Stores" MultiSelection="true" @bind-Value="value" Required="true">
						@foreach (var store in stores)
						{
							<MudSelectItem T="string" Value="@store">@store</MudSelectItem>
						}
					</MudSelect>
				</MudItem>
				<MudItem sm="6">
					<MudDatePicker Label="Start Date" DateFormat="yyyy-MM-dd" @bind-Text="StartDate" />
				</MudItem>
				<MudItem sm="6">
					<MudTimePicker Label="Start Time" @bind-Time="StartTime" />
				</MudItem>
				<MudItem sm="6">
					<MudDatePicker Label="End Date" DateFormat="yyyy-MM-dd" @bind-Text="EndDate" />
				</MudItem>
				<MudItem sm="6">
					<MudTimePicker Label="End Time" @bind-Time="EndTime" />
				</MudItem>
				<MudItem sm="6">
					<MudSelect @bind-Value="FormData.bcType" Label="Combo/Bogo Type" Immediate="true" AnchorOrigin="Origin.BottomCenter">
						<MudSelectItem Value="@("Bogo")" />
						<MudSelectItem Value="@("Combo")" />
						<MudSelectItem Value="@("Clearance")" />
					</MudSelect>
				</MudItem>
				<MudItem sm="6">
					<MudNumericField Label="Sell Quantity" @bind-Value="FormData.sellQuantity" Required="true" RequiredError="Sell quantity is required!" />
				</MudItem>
				@*<MudItem sm="6">
					<MudAutocomplete Label="Parent Bogo Product" SearchFunc="@ProductSKUSearch" @bind-Value="FormData.sku" Disabled="@(FormData.bcType == "Combo" || FormData.bcType == "Clearance")" Required="@(FormData.bcType == "Bogo")" ResetValueOnEmptyText="true" />
				</MudItem>*@
				<MudItem sm="6">
					<MudNumericField Label="Regular Price" @bind-Value="FormData.regularPrice" Required="true" RequiredError="Regular price is required!" />
				</MudItem>
				<MudItem sm="6">
					<MudNumericField Label="Combo/Bogo Price" @bind-Value="FormData.comboPrice" Required="true" RequiredError="Combo/Bogo price is required!" />
				</MudItem>
				<MudItem xs="12">
					<MudTextField @bind-Value="FormData.description" Lines="5" Label="Description" Required="true" RequiredError="Description is required!" />
				</MudItem>
			</MudGrid>

			<div class="my-5 d-flex justify-end">
				<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenProductModal">Add Product</MudButton>
			</div>

			<MudTable Items="@Products" Hover="true" Dense="true">
				<HeaderContent>
					<MudTh>SKU</MudTh>
					<MudTh>Product Name</MudTh>
					<MudTh>Regular Price</MudTh>
					<MudTh>Quantity</MudTh>
					<MudTh>Discount Type</MudTh>
					<MudTh>Discount Ammount</MudTh>
					<MudTh>After Discount</MudTh>
					<MudTh>Action</MudTh>
				</HeaderContent>
				<RowTemplate>
					<MudTd DataLabel="SKU">@context.sku</MudTd>
					<MudTd DataLabel="Product Name">@context.productName</MudTd>
					<MudTd DataLabel="Regular Price">@context.regularPrice</MudTd>
					<MudTd DataLabel="Quantity">@context.quantity</MudTd>
					<MudTd DataLabel="Discount Type">@context.discountType</MudTd>
					<MudTd DataLabel="Discount Ammount">@context.discountAmount</MudTd>
					<MudTd DataLabel="After Discount">@context.afterDiscAmount</MudTd>
					<MudTd DataLabel="Action">
						<MudButton OnClick="() => RemoveProduct(context)">
							<MudIcon Icon="@Icons.Filled.Delete" Color="Color.Error" />
						</MudButton>
					</MudTd>
				</RowTemplate>
			</MudTable>

			<div class="mt-5">
				<InputFile id="fileInput" hidden accept=".webp" OnChange="UploadImage" />

				<MudButton HtmlTag="label"
						   Variant="Variant.Filled"
						   Color="Color.Primary"
						   StartIcon="@Icons.Filled.CloudUpload"
						   for="fileInput">
					Upload Images
				</MudButton>
				<MudText Class="mt-1">600 * 600(Max 50Kb)</MudText>
			</div>

			<MudImage Src="@($"data:image/webp;base64,{FormData.base64Attch}")" Alt="" Elevation="25" Class="rounded-lg mt-3" Style="width:200px;" />

			<div class="d-flex align-center justify-space-between">
				<MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto" OnClick="CreateNewCombo">Submit</MudButton>
			</div>
		</MudForm>
	</MudContainer>
</MudPaper>

@code {
	// New Date Time
	public static string TodayDate = DateTime.Now.ToString("yyyy-MM-dd");

	// Page On Load
	protected override async Task OnInitializedAsync()
	{
		await GetStoresName();
		//ProductSKU = await _products.GetProductsAsSKU();
	}
	// Form Ref
	bool success;
	string[] errors = { };
	MudForm form;

	// Start End Date Time
	private string StartDate { get; set; } = TodayDate;
	private string EndDate { get; set; } = TodayDate;
	private TimeSpan? StartTime = new TimeSpan();
	private TimeSpan? EndTime = new TimeSpan();

	//Store
	private string? value { get; set; }

	private string[] stores = new string[] { };

	// Store List
	private List<ComboStoreIdsDTO> Stores = new List<ComboStoreIdsDTO>();

	// Get All Stores
	private async Task GetStoresName()
	{
		stores = await _store.GetStoreNameAsString();
	}

	// Get Store Id
	private async Task GetStoreIds()
	{
		string[] storeList = value.Split(", ");
		foreach (var store in storeList)
		{
			var temp_Store = await _store.GetStore(store);

			var Store = new ComboStoreIdsDTO()
				{
					storeId = temp_Store.storeId
				};

			Stores.Add(Store);
		}
	}

	// Products
	private List<AddComboProductDTO> Products = new List<AddComboProductDTO>();

	// Details
	private AddComboDetailsDTO FormData = new AddComboDetailsDTO();

	// Product SKU List
	//private string[] ProductSKU = new string[] { };

	// Autocomplite Search Func for ParentCat
	//private async Task<IEnumerable<string>> ProductSKUSearch(string value)
	//{
	//	return string.IsNullOrEmpty(value) ? ProductSKU : ProductSKU.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
	//}

	// Upload Image
	private async Task UploadImage(InputFileChangeEventArgs e)
	{
		try
		{
			FormData.base64Attch = await _base64.ConvertToBase64(153600, 1080, 420, e);
		}
		catch (Exception error)
		{
			Snackbar.Add(error.Message, Severity.Error);
		}
	}

	// Remove Products
	private void RemoveProduct(AddComboProductDTO product)
	{
		Products.Remove(product);
	}

	// Add Product Modal
	private async Task OpenProductModal()
	{
		var parameters = new DialogParameters();
		parameters.Add("FormData", new AddComboProductDTO());

		var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
		var dialog = await DialogService.Show<AddComboProductModal>("Add New Product", parameters, options).Result;

		if (dialog.Data != null)
		{
			AddComboProductDTO newProduct = dialog.Data as AddComboProductDTO;
			bool isThere = Products.Any(x => x.sku == newProduct.sku);

			if (isThere)
			{
				Snackbar.Add("This Product Already Exists!", Severity.Error);
				return;
			}


			if (newProduct.discountType == "Cash")
			{
				newProduct.afterDiscAmount = newProduct.regularPrice - newProduct.discountAmount;
			}
			else
			{
				newProduct.afterDiscAmount = newProduct.regularPrice - ((newProduct.regularPrice * newProduct.discountAmount) / 100);
			}

			Products.Add(newProduct);
		}
	}

	// Create New Combo
	private AddComboDTO NewCombo = new AddComboDTO();

	private async Task CreateNewCombo()
	{
		//if (String.IsNullOrEmpty(FormData.sku) && FormData.bcType == "Bogo")
		//{
		//	Snackbar.Add("Parent Bogo Product is required!", Severity.Error);
		//	return;
		//}

		if (Products.Count() <= 0)
		{
			Snackbar.Add("Child Combo Products is required!", Severity.Error);
			return;
		}

		if (String.IsNullOrEmpty(StartDate) || String.IsNullOrEmpty(EndDate))
		{
			Snackbar.Add("Start & End Date is required!", Severity.Error);
			return;
		}

		if (String.IsNullOrEmpty(FormData.base64Attch))
		{
			Snackbar.Add("Campaign image is required!", Severity.Error);
			return;
		}

		//if(FormData.bcType == "Bogo")
		//{
		//	FormData.productId = await _products.GetProductIdBySku(FormData.sku);
		//}

		FormData.startDate = $"{StartDate}T{StartTime}.000Z";
		FormData.endDate = $"{EndDate}T{EndTime}.000Z";

		await GetStoreIds();

		NewCombo.comboProductDTO = FormData;
		NewCombo.comboProductTags = Products;
		NewCombo.comboProductStores = Stores;

		try
		{
			var result = await _combo.CreateCombo(NewCombo);
			if (result)
			{
				Snackbar.Add("New Combo/Bogo Created Successfully!", Severity.Success);
				Products.Clear();
				NewCombo = new AddComboDTO();
				FormData = new AddComboDetailsDTO();

				StartDate = TodayDate;
				EndDate = TodayDate;
				StartTime = new TimeSpan();
				EndTime = new TimeSpan();
				value = null;
				Stores = new List<ComboStoreIdsDTO>();
				return;
			}

			Snackbar.Add("Combo/Bogo Creation Failed!", Severity.Error);
		}
		catch (Exception)
		{

			throw;
		}
	}
}
