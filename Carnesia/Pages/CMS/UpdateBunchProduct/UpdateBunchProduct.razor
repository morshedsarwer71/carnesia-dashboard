@page "/bunch/{id:int}"

@using Carnesia.Domain.CMS.BunchProduct
@using Carnesia.Shared.CMS.BunchProduct
@inject IBase64 _base64
@inject IProducts _products
@inject IBunchProduct _bunchProduct
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudPaper Class="ma-2 pa-16">
	<MudContainer Fixed="true">
		<MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudGrid Class="mb-5">
                    <MudItem xs="12">
                        <MudTextField @bind-Value="FormData.name" Label="Bunch Name" Required="true" RequiredError="Bunch name is required!"/>
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="FormData.description" Label="Description" Lines="5" Required="true" RequiredError="Description is required!"/>
                    </MudItem>
                </MudGrid>

                <div class="my-5 d-flex justify-end">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenProductModal" >Add Product</MudButton>
                </div>

                <MudTable Items="@FormData.bunchProductTags" Hover="true" Dense="true">
                    <HeaderContent>
                        <MudTh>Product</MudTh>
                        <MudTh>SKU</MudTh>
                        <MudTh>Code</MudTh>
                        <MudTh>Action</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Product">@context.product</MudTd>
                        <MudTd DataLabel="SKU">@context.sku</MudTd>
                        <MudTd DataLabel="Code">@context.productCode</MudTd>
                        <MudTd DataLabel="Action">
                            <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="() => DeleteProduct(context.id)" >Delete</MudButton>
                        </MudTd>
                    </RowTemplate>
                </MudTable>

                <div class="mt-5">
                    <InputFile id="fileInput" hidden accept=".webp" OnChange="UploadImage" />

                    <MudButton HtmlTag="label"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               StartIcon="@Icons.Filled.CloudUpload"
                               for="fileInput">
                        Upload Images
                    </MudButton>
                    <MudText Class="mt-1">600 * 600(Max 50Kb)</MudText>
                </div>

                <MudImage Src="@($"data:image/webp;base64,{FormData.base64Attch}")" Alt="" Elevation="25" Class="rounded-lg mt-3" Style="width:200px;"/>

                <div class="d-flex align-center justify-space-between"> 
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto" OnClick="UpdateBunch">Update</MudButton>
                </div>
        </MudForm>
	</MudContainer>
</MudPaper>

@code {
    [Parameter]
    public int id { get; set; }

    // Page On Load
    protected override async Task OnInitializedAsync()
    {
        await GetBunchById();
    }

    // Form Ref
    bool success;
    string[] errors = { };
    MudForm form;

    // Bunch
    private SingleBunchProductDTO FormData = new SingleBunchProductDTO();

    // Get Bunch
    private async Task GetBunchById()
    {
        FormData = await _bunchProduct.GetBunchById(id);
    }

    // Upload Image
    private async Task UploadImage(InputFileChangeEventArgs e)
    {
        try
        {
            FormData.base64Attch = await _base64.ConvertToBase64(153600, 1080, 420, e);
        }
        catch(Exception error)
        {
            Snackbar.Add(error.Message, Severity.Error);
        }
    }

    // Add Product Modal
    private async Task OpenProductModal()
    {
        var parameters = new DialogParameters();
        parameters.Add("FormData", new AddBunchProductProductsDTO(){
            bunchProductCode = FormData.code
        });

        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
        var dialog = await DialogService.Show<AddProductsModal>("Add New Product", parameters, options).Result;

        if (dialog.Data != null)
        {
            AddBunchProductProductsDTO newProduct = dialog.Data as AddBunchProductProductsDTO;

            newProduct.productId = await _products.GetProductIdBySku(newProduct.sku);

            try
            {
                var result = await _bunchProduct.AddNewProduct(newProduct);

                if (result)
                {
                    await GetBunchById();
                    Snackbar.Add("Product Added Successfully!", Severity.Success);
                    return;
                }
                Snackbar.Add("Something went wrong!", Severity.Error);
            }
            catch (Exception)
            {
                throw;
            }
        }
    }

    // Delete Product
    private async Task DeleteProduct(int id)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
        var dialog = await DialogService.Show<DeleteConfirmationModal>("Delete Confirmation", options).Result;

        if (!dialog.Cancelled)
        {
            try
            {
                var result = await _bunchProduct.DeleteProduct(id);
                if (result)
                {
                    Snackbar.Add("Product Deleted Successfully!", Severity.Success);
                    await GetBunchById();
                    return;
                }
                Snackbar.Add("Something Went Wrong!", Severity.Error);
            }
            catch (Exception)
            {
                throw;
            }
        }
    }

    // Update Bunch
    private async Task UpdateBunch()
    {
        try
        {
            var result = await _bunchProduct.UpdateBunch(FormData);

            if (result)
            {
                Snackbar.Add("Bunch Updated Successfully!", Severity.Success);
                await GetBunchById();
                return;
            }
            Snackbar.Add("Something Went Wrong!", Severity.Error);
        }catch(Exception){ throw; }
    }
}
