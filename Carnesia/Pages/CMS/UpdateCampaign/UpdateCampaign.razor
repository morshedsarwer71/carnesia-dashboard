@page "/update-campaign/{id:int}"
@using Carnesia.Domain.CMS.Campaign
@using Carnesia.Shared.CMS.CreateCampaign
@using Syncfusion.XlsIO
@using System.IO
@using System.Data
@inject Microsoft.JSInterop.IJSRuntime JS
@inject ICampaignList _campaignList
@inject ICreateCampaign _createCampaign
@inject IProducts _products
@inject IBase64 _base64
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudPaper Class="pa-16 ma-2">
	<MudContainer Fixed="true">
		<MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
			<MudGrid Class="justify-center">
                <MudItem sm="6">
                    <MudTextField @bind-Value="campaign.campaignName" Label="Campaign Name" Required="true" RequiredError="Campaign name is required!"/>
                </MudItem>
                <MudItem sm="6">
                    <MudSelect Disabled="true" @bind-Value="campaign.platformType" Label="Platform" Required="true" RequiredError="Platform type is required!" AnchorOrigin="Origin.BottomCenter">
                        <MudSelectItem Value="@("App")" />
                        <MudSelectItem Value="@("Web")" />
                        <MudSelectItem Value="@("General")" />
                    </MudSelect>
                </MudItem>
                <MudItem sm="6">
                    <MudDatePicker Label="Start Date" DateFormat="yyyy-MM-dd" @bind-Text="campaign.startDate" />
                </MudItem>
                <MudItem sm="6">
                    <MudTimePicker Label="Start Time" @bind-Time="StartTime" />
                </MudItem>
                <MudItem sm="6">
                    <MudDatePicker Label="End Date" DateFormat="yyyy-MM-dd" @bind-Text="campaign.endDate" />
                </MudItem>
                <MudItem sm="6">
                    <MudTimePicker Label="End Time" @bind-Time="EndTime" />
                </MudItem>
                <MudItem sm="11">
                    <MudTextField Lines="5" @bind-Value="campaign.description" Label="Description" Required="true" RequiredError="Description is required!"/>
                </MudItem>
            </MudGrid>
            <div class="mt-5">
                <InputFile id="fileInput" hidden accept=".webp" OnChange="UploadImage" />

                <MudButton HtmlTag="label"
                            Variant="Variant.Filled"
                            Color="Color.Primary"
                            StartIcon="@Icons.Filled.CloudUpload"
                            for="fileInput">
                    Upload Images
                </MudButton>
                <MudText Class="mt-1">1080 * 420(.webp only. Max 100Kb)</MudText>
            </div>

            <MudImage Src="@($"data:image/webp;base64,{campaign.base64Attch}")" Alt="" Elevation="25" Class="rounded-lg mt-3" Style="width:200px;"/>

            <div class="d-flex align-center justify-space-between mt-6">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto" OnClick="UpdateDetails">Update Campaign</MudButton>
            </div>

            <div class="d-flex justify-end my-5">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Filled.Add" OnClick="OpenProductModal" >Add Product</MudButton>
            </div>

            <MudText Typo="Typo.h5" Class="mb-5">Regular Products</MudText>
            <div class="d-flex justify-end">
                <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="CreateDocumentTable" Class="mr-1">Download CSV</MudButton>
                <InputFile id="fileInputXLSX" hidden accept=".xlsx" OnChange="UploadFiles" />
                <MudButton HtmlTag="label"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Filled.CloudUpload"
                           for="fileInputXLSX">
                    Upload XLSX
                </MudButton>
            </div>
            <MudTable Items="@campaign.products" Hover="true" Dense="true" Loading="Loading">
                <HeaderContent>
                    <MudTh>SKU</MudTh>
                    <MudTh>Product Name</MudTh>
                    <MudTh>Stock</MudTh>
                    <MudTh>Regular Price</MudTh>
                    <MudTh>Discount Type</MudTh>
                    <MudTh>Discount Amount</MudTh>
                    <MudTh>After Discount</MudTh>
                    <MudTh>Max Order Quantity</MudTh>
                    <MudTh>Is Combo</MudTh>
                    <MudTh>Action</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="SKU">@context.productSku</MudTd>
                    <MudTd DataLabel="Product Name">@context.productName</MudTd>
                    <MudTd DataLabel="Stock">@context.stock</MudTd>
                    <MudTd DataLabel="Regular Price">@context.regularPrice</MudTd>
                    <MudTd DataLabel="Discount Type">@context.discType</MudTd>
                    <MudTd DataLabel="Discount Amount">@context.discAmount</MudTd>
                    <MudTd DataLabel="After Discount">@context.atrDiscAmount</MudTd>
                    <MudTd DataLabel="Max Order Quantity">@context.maxOrderQty</MudTd>
                    <MudTd DataLabel="Is Combo">@context.isCombo</MudTd>
                    <MudTd DataLabel="Action">
                        <MudButton Disabled="context.isCombo" OnClick="() => OpenUpdateModal(context)" >
                            <MudIcon Icon="@Icons.Filled.Edit" Color="Color.Warning" />
                        </MudButton>
                        <MudButton OnClick="() => DeleteProduct(context.id)" >
                            <MudIcon Icon="@Icons.Filled.Delete" Color="Color.Error" />
                        </MudButton>
                    </MudTd>
                </RowTemplate>
            </MudTable>

            <MudText Typo="Typo.h5" Class="mt-10 mb-5">Combo Products</MudText>
            <MudTable Items="@campaign.combos" Hover="true" Dense="true">
                <HeaderContent>
                    <MudTh>Combo Name</MudTh>
                    <MudTh>Regular Price</MudTh>
                    <MudTh>Discount Price</MudTh>
                    <MudTh>Action</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Combo Name">@context.comboProductName</MudTd>
                    <MudTd DataLabel="Regular Price">@context.regularPrice</MudTd>
                    <MudTd DataLabel="Discount Price">@context.comboPrice</MudTd>
                    <MudTd DataLabel="Action">
                        <MudButton OnClick="() => DeleteProduct(context.id)" >
                            <MudIcon Icon="@Icons.Filled.Delete" Color="Color.Error" />
                        </MudButton>
                    </MudTd>
                </RowTemplate>
            </MudTable>
		</MudForm>
	</MudContainer>
</MudPaper>

@code {
    [Parameter]
    public int id { get; set; }

    // Page On Load
    protected override async Task OnInitializedAsync()
    {
        await GetCampaign();
        await SetTime();
    }

    // Loading
    private bool Loading { get; set; }

    // Campaign
    private CampaignDTO campaign = new CampaignDTO();

    //Time
    private TimeSpan? StartTime = new TimeSpan();
    private TimeSpan? EndTime = new TimeSpan();

    // Get Campaign
    private async Task GetCampaign()
    {
        campaign = await _campaignList.GetCampaignByID(id);
    }

    // Set Time
    private async Task SetTime()
    {
        StartTime = TimeSpan.Parse(campaign.startTime.Remove(campaign.startTime.Length - 5));
        EndTime = TimeSpan.Parse(campaign.endTime.Remove(campaign.endTime.Length - 5));
    }

    // Form Ref
    bool success;
    string[] errors = { };
    MudForm form;

    // Upload Image
    private async Task UploadImage(InputFileChangeEventArgs e)
    {
        try
        {
            campaign.base64Attch = await _base64.ConvertToBase64(102000, 1080, 420, e);
        }
        catch(Exception error)
        {
            Snackbar.Add(error.Message, Severity.Error);
        }
    }

    // Update Campaign Details
    private async Task UpdateDetails()
    {
        try
        {
            var CampaignDetails = new AddCampaignDetailsDTO()
                {
                    campaignName = campaign.campaignName,
                    startDate = $"{campaign.startDate}T{StartTime}.000Z",
                    endDate = $"{campaign.endDate}T{EndTime}.000Z",
                    description = campaign.description,
                    isPublish = campaign.isPublish,
                    base64Attch = campaign.base64Attch
                };

            var result = await _createCampaign.UpdateCampaignDetails(CampaignDetails, id);

            if (result)
            {
                Snackbar.Add("Campaign Details Updated Successfully!", Severity.Success);
                return;
            }
            Snackbar.Add("Something Went Wrong!", Severity.Error);
        }catch(Exception){ throw; }
    }

    // Add Product Modal
    private async Task OpenProductModal()
    {
        var parameters = new DialogParameters();
        parameters.Add("FormData", new AddCampaignProductDTO(){campaignCode = campaign.campaignCode});

        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
        var dialog = await DialogService.Show<AddProductModal>("Add New Product", parameters, options).Result;

        if (dialog.Data != null)
        {
            AddCampaignProductDTO newProduct = dialog.Data as AddCampaignProductDTO;

            if (newProduct.discType == "Cash")
            {
                newProduct.discPrice = newProduct.regularPrice - newProduct.discAmount;
            }
            else
            {
                newProduct.discPrice = newProduct.regularPrice - ((newProduct.regularPrice * newProduct.discAmount) / 100);
            }

            newProduct.productId = await _products.GetProductIdBySku(newProduct.sku);

            try
            {
                var result = await _createCampaign.AddProductToCampaign(newProduct);
                if (result)
                {
                    Snackbar.Add("New Product Added Successfully!", Severity.Success);
                    await GetCampaign();
                    return;
                }
                Snackbar.Add("Something Went Wrong!", Severity.Error);

            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
                throw;
            }
        }
    }

    // Delete Product
    private async Task DeleteProduct(int id)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
        var dialog = await DialogService.Show<DeleteConfirmationModal>("Delete Confirmation", options).Result;

        if (!dialog.Cancelled)
        {
            try
            {
                var result = await _createCampaign.DeleteCampaignProduct(id);
                if (result)
                {
                    Snackbar.Add("Product Deleted Successfully!", Severity.Success);
                    await GetCampaign();
                    return;
                }
                Snackbar.Add("Something Went Wrong!", Severity.Error);
            }
            catch (Exception)
            {
                throw;
            }
        }
    }

    // Update Product
    private async Task OpenUpdateModal(CampaignProductDTO product)
    {
        var parameters = new DialogParameters();
        parameters.Add("FormData", product);

        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
        var dialog = await DialogService.Show<UpdateCampaignProductModal>("Update Product", parameters, options).Result;

        if (dialog.Data != null)
        {
            CampaignProductDTO newProduct = dialog.Data as CampaignProductDTO;

            if (newProduct.discType == "Cash")
            {
                newProduct.atrDiscAmount = newProduct.regularPrice - newProduct.discAmount;
            }
            else
            {
                newProduct.atrDiscAmount = newProduct.regularPrice - ((newProduct.regularPrice * newProduct.discAmount) / 100);
            }

            var UpdatedProduct = new CampaignProductUpdateDTO
            {
                productId = newProduct.productId,
                discAmount = newProduct.discAmount,
                discPrice = newProduct.atrDiscAmount,
                discType = newProduct.discType,
                stock = newProduct.stock,
                regularPrice = newProduct.regularPrice,
                isCombo = newProduct.isCombo,
                comboId = newProduct.comboId,
                maxOrderQty = newProduct.maxOrderQty
            };

            try
            {
                var result = await _createCampaign.UpdateCampaignProduct(UpdatedProduct, newProduct.id);
                if (result)
                {
                    Snackbar.Add("Product Updated Successfully!", Severity.Success);
                    await GetCampaign();
                    return;
                }
                Snackbar.Add("Something Went Wrong!", Severity.Error);

            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }
        }
    }

    // Create Document Table
    private async Task CreateDocumentTable()
    {
        using (ExcelEngine excelEngine = new ExcelEngine())
        {
            IApplication application = excelEngine.Excel;
            application.DefaultVersion = ExcelVersion.Xlsx;

            //Create a workbook.
            IWorkbook workbook = application.Workbooks.Create(1);
            IWorksheet worksheet = workbook.Worksheets[0];

            //Initialize DataTable and data get from SampleDataTable method.
            DataTable table = ProductDataTableTable();

            //Export data from DataTable to Excel worksheet.
            worksheet.ImportDataTable(table, true, 1, 1);

            worksheet.UsedRange.AutofitColumns();

            //Save the document as a stream and return the stream.
            using (MemoryStream stream = new MemoryStream())
            {
                //Save the created Excel document to MemoryStream
                workbook.SaveAs(stream);

                //Download the excel file.
                await JS.SaveAs("Products.xlsx", stream.ToArray());
            }
        }
    }

    private DataTable ProductDataTableTable()
    {
        DataTable reports = new DataTable();
        reports.Columns.Add("Id", typeof(int));
        reports.Columns.Add("ProductSKU");
        reports.Columns.Add("ProductName");
        reports.Columns.Add("DiscType");
        reports.Columns.Add("DiscAmount", typeof(decimal));
        reports.Columns.Add("Stock", typeof(int));
        reports.Columns.Add("MaxOrder", typeof(int));

        foreach (var item in campaign.products)
        {
            reports.Rows.Add(item.productId, item.productSku, item.productName, item.discType, item.discAmount, item.stock, item.maxOrderQty);
        }
        return reports;
    }

    // Bulk Upload
    private List<CampaignProductUpdateDTO> BulkProducts = new List<CampaignProductUpdateDTO>();

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        Loading = true;
        try
        {
            BulkProducts.Clear();
            BulkProducts = await _createCampaign.UploadProductUpdateExcelFile(e);
            await BulkUpdateModal();
            Loading = false;
        }
        catch (Exception er)
        {
            Console.WriteLine(er.Message);
            Snackbar.Add("Internal Server Error!", Severity.Error);
            Loading = false;
        }
    }

    // Update Product Bulk
    private async Task BulkUpdateModal()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
        var dialog = await DialogService.Show<UpdateProductConfirmationModal>("Update Confirmation", options).Result;

        if (!dialog.Cancelled)
        {
            await BulkUpdate();
        }
    }

    private async Task BulkUpdate()
    {
        try
        {
            var result = await _createCampaign.ProductBulkUpdate(BulkProducts, campaign.campaignCode);

            if (result)
            {
                Snackbar.Add("Products Updated Successfully!", Severity.Success);
                await GetCampaign();
                return;
            }
            Snackbar.Add("Products Update Failed!", Severity.Error);
        }
        catch(Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }
}
