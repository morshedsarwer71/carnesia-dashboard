@page "/side-text"

@using Carnesia.Domain.CMS.PaymentOffer
@using Carnesia.Domain.Common.POCO
@using Carnesia.Shared.CMS.PaymentOffer
@inject IPaymentOffer _paymentOffer
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudPaper Class="py-16 px-3 ma-2">
	<MudContainer Fixed="true">
		<div class="d-flex justify-end">
			<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenOfferModal">Add New Side Offer Text</MudButton>
		</div>

		<MudTable Items="@Elements" Dense="@tableCommon.Dense" Hover="@tableCommon.Hover" Bordered="@tableCommon.Bordered" Striped="@tableCommon.Striped" Filter="new Func<SideTextDTO,bool>(FilterFuncInitial)">
            <ToolBarContent>
                <MudSpacer />
                <MudSpacer />
                <MudTextField @bind-Value="tableCommon.SearchTerm" Immediate="true" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"/>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Offer Text</MudTh>
                <MudTh>Created At</MudTh>
                <MudTh>Publish</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Offer Text">@context.offerText</MudTd>
                <MudTd DataLabel="Created At">@context.createdAt</MudTd>
                <MudTd DataLabel="Publish">
                    <MudSwitch @bind-Checked="context.isPublish" Color="Color.Primary" @onclick="(() => TogglePublish(context.id))" />
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>

        <div class="d-flex flex-wrap mt-4">
            <MudSwitch @bind-Checked="@tableCommon.Hover" Color="Color.Primary">Hover</MudSwitch>
            <MudSwitch @bind-Checked="@tableCommon.Dense" Color="Color.Secondary">Dense</MudSwitch>
            <MudSwitch @bind-Checked="@tableCommon.Striped" Color="Color.Tertiary">Striped</MudSwitch>
            <MudSwitch @bind-Checked="@tableCommon.Bordered" Color="Color.Warning">Bordered</MudSwitch>
        </div>
	</MudContainer>
</MudPaper>

@code{
    // Page On Load
    protected override async Task OnInitializedAsync()
    {
        await GetTexts();
    }

    // Api URL
    private string apiURL = "PaymentOffer/sideText";
    private string apiToggleURL = "PaymentOffer/TogglepublishSideText/";

    // Table Customaization
    private TableCommon tableCommon = new TableCommon();

    // Table Content
    private List<SideTextDTO> Elements = new List<SideTextDTO>();

    // Get Texts 
    private async Task GetTexts()
    {
        Elements = await _paymentOffer.GetSideTexts(apiURL);
    }

    // Table Search
    private bool FilterFuncInitial(SideTextDTO element) => FilterFunc(element, tableCommon.SearchTerm);

    private bool FilterFunc(SideTextDTO element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.offerText.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    // Toggle Publish
    private async Task TogglePublish(int id)
    {
        try
        {
            var result = await _paymentOffer.ToggleSideText(apiToggleURL, id);
            if (result)
            {
                Snackbar.Add("Side Text Successfully Toggled!", Severity.Success);
                await GetTexts();
                return;
            }
            await GetTexts();
            Snackbar.Add("Something Went Wrong!", Severity.Error);
        }
        catch (Exception)
        {
            Snackbar.Add("Something Went Wrong!", Severity.Error);
        }
    }

    // Add Offer Text Modal
    private async Task OpenOfferModal()
    {
        var parameters = new DialogParameters();
        parameters.Add("FormData", new AddTextDTO());

        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
        var dialog = await DialogService.Show<AddOfferTextModal>("Add New Offer Text", parameters, options).Result;

        if (dialog.Data != null)
        {
            AddTextDTO newOffer = dialog.Data as AddTextDTO;

            try
            {
                var result = await _paymentOffer.CreateNewOffer(apiURL, newOffer);

                if (result)
                {
                    Snackbar.Add("New Offer Created Successfully!", Severity.Success);
                    await GetTexts();
                    return;
                }
                Snackbar.Add("Something Went Wrong!", Severity.Error);
            }
            catch (Exception)
            {
                Snackbar.Add("Something Went Wrong!", Severity.Error);
                throw;
            }
        }
    }
    
}
