@page "/create-compound-product"

@using Carnesia.Domain.CMS.ChildProduct
@using Carnesia.Shared.CMS.ChildProduct
@inject IDialogService DialogService
@inject ICategory _category
@inject IParentProduct _parentProduct
@inject IChildProduct _childProduct
@inject IBase64 _base64
@inject ISnackbar Snackbar

<MudPaper Class="pa-16 ma-2">
	<MudContainer Fixed="true">
		<MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudGrid>
                    <MudItem sm="6"> 
                        <MudAutocomplete Value="ChildProductInfoData.productParentName" ValueChanged="(string s) => GetParentId(s)" Label="Parent Product" SearchFunc="@ParentProductSearch" ResetValueOnEmptyText="true" Required="true" />
                    </MudItem>
                    <MudItem sm="6">
                        <MudTextField @bind-Value="ChildProductInfoData.productName" Label="Product Name" Required="true" RequiredError="Product Name is required!"/>
                    </MudItem>
                    <MudItem sm="6">
                        <MudTextField @bind-Value="ChildProductInfoData.productsku" Label="Product SKU" Required="true" RequiredError="Product SKU is required!"/>
                    </MudItem>
                    <MudItem sm="6">
                        <MudTextField @bind-Value="ChildProductInfoData.productDimension" Label="Product Dimension" Required="true" RequiredError="Product Dimension is required!"/>
                    </MudItem>
                    <MudItem sm="6">
                        <MudNumericField @bind-Value="ChildProductInfoData.weight" Label="Product Weight" Required="true" RequiredError="Product Weight is required!"/>
                    </MudItem>
                    <MudItem sm="6">
                        <MudSelect @bind-Value="ChildProductInfoData.uom" Label="Unit of Measurements" Required="true" RequiredError="Unit of Measurements is required!" AnchorOrigin="Origin.BottomCenter">
                            <MudSelectItem Value="@("mg")" />
                            <MudSelectItem Value="@("g")" />
                            <MudSelectItem Value="@("kg")" />
                            <MudSelectItem Value="@("ml")" />
                            <MudSelectItem Value="@("l")" />
                        </MudSelect>
                    </MudItem>
                    <MudItem sm="6">
                        <MudNumericField @bind-Value="ChildProductInfoData.productPoints" Label="Product Points"/>
                    </MudItem>
                    <MudItem sm="6">
                        <MudNumericField @bind-Value="ChildProductInfoData.mrp" Label="MRP" Required="true" RequiredError="MRP is required!"/>
                    </MudItem>
                    <MudItem sm="6">
                        <MudGrid Class="align-baseline">
                            <MudItem xs="6">
                                <MudNumericField @bind-Value="ChildProductInfoData.discount" Label="@(ChildProductInfoData.isPercent ? "Discount Percent" : "Cash Discount")"/>
                            </MudItem>
                            <MudItem xs="6">
                                <MudSwitch Class="mt-5" @bind-Checked="@ChildProductInfoData.isPercent" Label="Is Percent" Color="Color.Primary" />
                            </MudItem>
                        </MudGrid>
                    </MudItem>
                    <MudItem sm="6">
                        <MudNumericField @bind-Value="ChildProductInfoData.vatAmount" Label="Vat Amount"/>
                    </MudItem>
                    <MudItem sm="6">
                        <MudNumericField @bind-Value="ChildProductInfoData.shelfLife" Label="Shelf Life" Required="true" RequiredError="Shelf Life is required!" />
                    </MudItem>
                    <MudItem sm="6">
                        <MudTextField @bind-Value="ChildProductInfoData.upSells" Label="Up Sell SKU. Separate with comma" Required="true" RequiredError="Up Sell SKU are required!" />
                    </MudItem>
                    <MudItem sm="6">
                        <MudTextField @bind-Value="ChildProductInfoData.crossSells" Label="Cross Sell SKU. Separate with comma" Required="true" RequiredError="Cross Sell SKU required!" />
                    </MudItem>
                    <MudItem sm="6">
					    <MudTextField @bind-Value="ChildProductInfoData.metaTags" Label="Meta Tags. Separate with comma" Required="true" RequiredError="Meta Tags are required!" />
				    </MudItem>
                    <MudItem sm="6">
					    <MudTextField @bind-Value="ChildProductInfoData.seachTags" Label="Search Tags. Separate with comma" Required="true" RequiredError="Search Tags are required!" />
				    </MudItem>
                    <MudItem sm="6">
					    <MudTextField @bind-Value="ChildProductInfoData.metaTitle" Label="Meta Title" Required="true" RequiredError="Meta Title are required!" />
				    </MudItem>
                    @if (ChildProductInfoData.isSize)
                    {
                        <MudItem sm="6">
                            <MudGrid>
                                <MudItem xs="6">
                                    <MudTextField @bind-Value="ChildProductInfoData.sizeOrQty" Label="Text Variant" Required="true" RequiredError="Text Variant is required!"/>
                                </MudItem>
                                <MudItem xs="6">
                                    <MudSwitch Class="mt-5" @bind-Checked="@ChildProductInfoData.isSize" Label="Is Text Variant" Color="Color.Primary" />
                                </MudItem>
                            </MudGrid>
                        </MudItem>
                    }
                    else
                    {
                        <MudItem sm="6">
                            <MudGrid>
                                <MudItem xs="6">
                                    <MudColorPicker Label="Color Code" @bind-Text="ChildProductInfoData.colorCode" Style="@($"color: {ChildProductInfoData.colorCode};")" ColorPickerMode="ColorPickerMode.HEX" DisableModeSwitch="true" />
                                </MudItem>
                                <MudItem xs="6"> 
                                    <MudSwitch Class="mt-5" @bind-Checked="@ChildProductInfoData.isSize" Label="Is Text Variant" Color="Color.Primary" />
                                </MudItem>
                            </MudGrid>
                        </MudItem>                        
                        <MudItem sm="6">
                            <MudTextField @bind-Value="ChildProductInfoData.colorName" Label="Color Name" Required="true" RequiredError="Color Name is required!"/>
                        </MudItem>
                    }
                    <MudItem xs="12">
					    <MudTextField @bind-Value="ChildProductInfoData.metaDescription" Label="Meta Description" Lines="5" Required="true" RequiredError="Meta Description required!" />
				    </MudItem>
                </MudGrid>

			    <div class="d-flex flex-column">
                    <MudCheckBox Color="Color.Primary" @bind-Checked="@ChildProductInfoData.isPublish" Class="ml-n2" Label="Is Publish!"/>
                    <MudCheckBox Color="Color.Primary" @bind-Checked="@ChildProductInfoData.isHasFreeProd" Class="ml-n2" Label="Is Has Free Product!"/>
                    <MudCheckBox Color="Color.Primary" @bind-Checked="@ChildProductInfoData.isNewArrival" Class="ml-n2" Label="New Arraival!"/>
                </div>

                @if (ChildProductInfoData.isHasFreeProd)
                {
                    <MudText Class="mt-16">Free Products</MudText>
                    <div class="my-5 d-flex justify-end">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenFreeProductModal">Add Free Product</MudButton>
                    </div>

                    <MudTable Items="@FreeProducts" Hover="true" Dense="true">
                        <HeaderContent>
                            <MudTh>Name</MudTh>
                            <MudTh>SKU</MudTh>
                            <MudTh>Price</MudTh>
                            <MudTh>Number of Products</MudTh>
                            <MudTh>Image</MudTh>
                            <MudTh>Action</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Name">@context.name</MudTd>
                            <MudTd DataLabel="SKU">@context.sku</MudTd>
                            <MudTd DataLabel="Price">@context.price</MudTd>
                            <MudTd DataLabel="Number of Products">@context.numbOfFreeProd</MudTd>
                            <MudTd DataLabel="Image">
                                <MudImage Src="@($"data:image/webp;base64,{context.base64Attch}")" Alt="" Elevation="25" Class="rounded-lg mx-3" Style="width:100px;"/>
                            </MudTd>
                            <MudTd DataLabel="Action">
                                <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="() => RemoveFreeProductFromList(context)">Remove</MudButton>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                }

                <MudText Class="mt-5">Category</MudText>
                <MudGrid>
                    <MudItem md="4" sm="6">
                        <MudAutocomplete Value="CategoryData.parentCatName" ValueChanged="(string s) => GetParentCatId(s)"  SearchFunc="@ParentCatSearch" Label="Category" ResetValueOnEmptyText="true" />
                    </MudItem>
                    <MudItem md="4" sm="6">
                        <MudAutocomplete Value="CategoryData.childCatName" ValueChanged="(string s) => GetChildCatId(s)" Label="Child Category" SearchFunc="@ChildCatSearch" ResetValueOnEmptyText="true" />
                    </MudItem>
                    <MudItem md="4" sm="6">
                        <MudAutocomplete Value="CategoryData.gChildCatName" ValueChanged="(string s) => GetGrandChildId(s)" Label="Grand Child Category" SearchFunc="@GrandChildCatSearch" ResetValueOnEmptyText="true" />
                    </MudItem>
                </MudGrid>

                <div class="mt-5">
                    <InputFile id="fileInput" hidden accept=".webp" OnChange="UploadImage" />

                    <MudButton HtmlTag="label"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               StartIcon="@Icons.Filled.CloudUpload"
                               for="fileInput">
                        Upload Images
                    </MudButton>
                    <MudText Class="mt-1">600 * 600(Max 50Kb)</MudText>
                </div>


                <div class="d-flex jsutify-center mt-5">
                    @foreach(var image in ProductImages)
                    {
                        
                        <MudBadge OnClick="() => RemoveImage(image)" Icon="@Icons.Filled.DeleteOutline" Color="Color.Error" Overlap="true" Class="mx-6 my-4" Style="cursor:pointer">
                            <MudImage Src="@($"data:image/webp;base64,{image.base64Attch}")" Alt="" Elevation="25" Class="rounded-lg mx-3" Style="width:100px;"/>
                        </MudBadge>
                    }
                </div>

                <div class="d-flex align-center justify-end mt-6">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" OnClick="NewChildProduct" Class="ml-auto">Submit</MudButton>
                </div>
        </MudForm>
	</MudContainer>
</MudPaper>

@code {
    // On Page Load
    protected override async Task OnInitializedAsync()
    {
        await GetParentCatsString();
        await GetParentProductAsString();
    }

    // Form Ref
    bool success;
    string[] errors = { };
    MudForm form;




    // Child Product Details
    private ChildProductDetailsDTO ChildProductInfoData = new ChildProductDetailsDTO();





    // Free Product List
    private List<FreeProductDTO> FreeProducts = new List<FreeProductDTO>();

    // Free Product Modal
    private async Task OpenFreeProductModal()
    {
        var parameters = new DialogParameters();
        parameters.Add("FormData", new FreeProductDTO());

        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
        var dialog = await DialogService.Show<AddFreeProductModal>("Add Free Product", parameters, options).Result;

        if (dialog.Data != null)
        {
            FreeProductDTO newFreeProduct = dialog.Data as FreeProductDTO;
            FreeProducts.Add(newFreeProduct);
        }
    }

    // Remove Free Product From List
    private void RemoveFreeProductFromList(FreeProductDTO product)
    {
        FreeProducts.Remove(product);
    }






    // Category
    // Category List
    private string[] ParentCats = new string[]{};
    private string[] ChildCats = new string[]{};
    private string[] GrandChildCats  = new string[]{};

    // Category Class
    private ProductCategoryDTO CategoryData = new ProductCategoryDTO();
    private List<ProductCategoryDTO> ProductCategories = new List<ProductCategoryDTO>();

    // Get Parent As String
    private async Task GetParentCatsString()
    {
        ParentCats = await _category.GetParentCatAsString();
    }

    // Get Parent ID and Child As String
    private async Task GetParentCatId(string s)
    {
        if (String.IsNullOrEmpty(s))
        {
            CategoryData.parentCatName = s;
            if (GrandChildCats.Length > 0)
            {
                Array.Clear(GrandChildCats, 0, GrandChildCats.Length);
                CategoryData.gChildCatName = String.Empty;
            }
            if (ChildCats.Length > 0)
            {
                Array.Clear(ChildCats, 0, ChildCats.Length);
                CategoryData.childCatName = String.Empty;
            }

            return;
        }
        CategoryData.parentCatName = s;

        if (GrandChildCats.Length > 0)
        {
            Array.Clear(GrandChildCats, 0, GrandChildCats.Length);
            CategoryData.gChildCatName = String.Empty;
        }

        CategoryData.childCatName = String.Empty;

        var result = await _category.GetParentCat(s);

        CategoryData.parentCatId = result.id;

        ChildCats = await _category.GetChildCatAsString(result.child);
    }

    // Get Child Cat ID and GChild As String
    private async Task GetChildCatId(string s)
    {
        if (String.IsNullOrEmpty(s))
        {
            CategoryData.childCatName = s;
            if (GrandChildCats.Length > 0)
            {
                Array.Clear(GrandChildCats, 0, GrandChildCats.Length);
                CategoryData.gChildCatName = String.Empty;
            }
            return;
        }

        CategoryData.childCatName = s;

        var result = await _category.GetParentCat(CategoryData.parentCatName);

        var Child = result.child.FirstOrDefault(x => x.childCat == s);

        CategoryData.childCatId = Child.id;

        GrandChildCats = await _category.GetGrandChildCatAsString(Child.grandChild);

        CategoryData.gChildCatName = String.Empty;
    }

    // Get GChild Cat ID
    private async Task GetGrandChildId(string s)
    {
        CategoryData.gChildCatName = s;

        var result = await _category.GetParentCat(CategoryData.parentCatName);

        var Child = result.child.FirstOrDefault(x => x.childCat == CategoryData.childCatName);

        var GrandChild = Child.grandChild.FirstOrDefault(x => x.gChildCat == s);

        CategoryData.gChildCatId = GrandChild.id;
    }

    // Autocomplite Search Func for ParentCat
    private async Task<IEnumerable<string>> ParentCatSearch(string value)
    {
        return string.IsNullOrEmpty(value) ? ParentCats : ParentCats.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    // Autocomplite Search Func for ChildCat
    private async Task<IEnumerable<string>> ChildCatSearch(string value)
    {
        return string.IsNullOrEmpty(value) ? ChildCats : ChildCats.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    // Autocomplite Search Func for GrandChildCat
    private async Task<IEnumerable<string>> GrandChildCatSearch(string value)
    {
        return string.IsNullOrEmpty(value) ? GrandChildCats : GrandChildCats.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }







    // Product Images
    private List<ProductImageDTO> ProductImages = new List<ProductImageDTO>();

    // Upload Image
    private async Task UploadImage(InputFileChangeEventArgs e)
    {
        try
        {
            var ImageBase = await _base64.ConvertToBase64(51200, 600, 600, e);

            var productImage = new ProductImageDTO()
            {
                base64Attch = ImageBase,
                altImageName = e.File.Name
            };

            ProductImages.Add(productImage);
        }
        catch(Exception error)
        {
            Snackbar.Add(error.Message, Severity.Error);
        }
    }

    // Remove Image 
    private void RemoveImage(ProductImageDTO Image)
    {
        ProductImages.Remove(Image);
    }


    // Parent Product As String
    private string[] ParentProducts = new string[]{};

    // Get Parent Product As String
    private async Task GetParentProductAsString()
    {
        ParentProducts = await _parentProduct.GetParentProductAsString();
    }

    // Get Parent Product Id
    private async Task GetParentId(string s)
    {
        if (!String.IsNullOrEmpty(s))
        {
            ChildProductInfoData.productParentName = s;
            ChildProductInfoData.productParentId = await _parentProduct.GetParentProductID(s);
            return;
        }
        ChildProductInfoData.productParentName = s;
    }

    // Autocomplite Search Func for Parent Product
    private async Task<IEnumerable<string>> ParentProductSearch(string value)
    {
        return string.IsNullOrEmpty(value) ? ParentProducts : ParentProducts.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }





    // Create Child Product
    private ChildProductDTO NewProduct = new ChildProductDTO();

    private async Task NewChildProduct()
    {
        if (ProductImages.Count == 0)
        {
            Snackbar.Add("Please Add Product Image!", Severity.Error);
            return;
        }

        if (String.IsNullOrEmpty(CategoryData.parentCatName))
        {
            Snackbar.Add("Please Add Parent Category!", Severity.Error);
            return;
        }

        if (ChildProductInfoData.isHasFreeProd == true && FreeProducts.Count == 0)
        {
            Snackbar.Add("Please Add Free Product Or Uncheck Is Has Free Product!", Severity.Error);
            return;
        }

        if (ChildProductInfoData.isSize == false && String.IsNullOrEmpty(ChildProductInfoData.colorCode))
        {
            Snackbar.Add("Please Add Color Code!", Severity.Error);
            return;
        }

        ProductCategories.Add(CategoryData);

        NewProduct.productDTO = ChildProductInfoData;
        NewProduct.freeProducts = FreeProducts;
        NewProduct.images = ProductImages;
        NewProduct.prodCategories = ProductCategories;

        try
        {
            await _childProduct.CreateChildProduct(NewProduct);
            Snackbar.Add("Success!", Severity.Success);

            form.Reset();
            ChildProductInfoData = new ChildProductDetailsDTO();
            FreeProducts.Clear();
            CategoryData = new ProductCategoryDTO();
            ProductCategories.Clear();
            ProductImages.Clear();
            NewProduct = new ChildProductDTO();
        }
        catch(Exception)
        {
            Snackbar.Add("Something went Wrong!", Severity.Error);
            throw;
        }


    }
}
