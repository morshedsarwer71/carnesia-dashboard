@using Carnesia.Domain.WMS.PO.POCO
@using Carnesia.Domain.Common.POCO
@inject ISnackbar Snackbar

<MudDialog DisableSidePadding="true">
    <DialogContent>
        <div Style="max-height: 90vh; overflow-y: scroll">
            <MudPaper Class="pa-16 ma-2" Elevation="0">
                <MudContainer Fixed="true">
                    <MudPaper Width="400px" Square="true">
                        <MudList Clickable="true">
                            <MudListItem><MudText Typo="Typo.h4">PO ID: 123456</MudText></MudListItem>
                            <MudDivider />
                            <MudListItem>Created On: 22-Jan-2022</MudListItem>
                            <MudDivider />
                            <MudListItem>Supplier: Arham Trade International</MudListItem>
                            <MudDivider />
                            <MudListItem>Receiving Warehouse: Dhanmondi-W102</MudListItem>
                            <MudDivider />
                            <MudListItem>Arriving Time: 24-Jan-2022 12:00:00 PM</MudListItem>
                        </MudList>
                    </MudPaper>
                </MudContainer>
            </MudPaper>

        <MudPaper Class="pa-16 ma-2">
	        <MudContainer Fixed="true">
	            <MudTable Items="@Elements" MultiSelection="true" Dense="@tableCommon.Dense" Hover="@tableCommon.Hover" CanCancelEdit="@true" @bind-SelectedItems="@selectedItems"                              SortLabel="Sort By" CommitEditTooltip="Commit Edit" OnCommitEditClick="@(() => Snackbar.Add("Item Updated"))" RowEditPreview="BackupItem"                                                  RowEditCancel="ResetItemToOriginalValues" IsEditRowSwitchingBlocked="@true">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">PO List Details</MudText>
                        <MudSpacer />
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh><MudTableSortLabel SortBy="new Func<POListViewDetailsPoco, object>(x=>x.SKU)">SKU Code</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<POListViewDetailsPoco, object>(x=>x.Name)">Product Name</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<POListViewDetailsPoco, object>(x=>x.QTY)">PO Quantity</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortBy="new Func<POListViewDetailsPoco, object>(x=>x.LiftingPrice)">Lifting Price</MudTableSortLabel></MudTh>
                        <MudTh>Value</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="SKU Code">@context.SKU</MudTd>
                        <MudTd DataLabel="Name">@context.Name</MudTd>
                        <MudTd DataLabel="PO Quantity">@context.QTY</MudTd>
                        <MudTd DataLabel="Lifting Price">@context.LiftingPrice</MudTd>
                        <MudTd DataLabel="Value">@(@context.QTY * @context.LiftingPrice)</MudTd>
                    </RowTemplate>
                    <RowEditingTemplate>
                        <MudTd DataLabel="SKU Code">@context.SKU</MudTd>
                        <MudTd DataLabel="Name">@context.Name</MudTd>
                        <MudTd DataLabel="PO Quantity">
                            <MudTextField @bind-Value="@context.QTY" Required />
                        </MudTd>
                        <MudTd DataLabel="Lifting Price">
                            <MudNumericField @bind-Value="@context.LiftingPrice" Required Min="1" />
                        </MudTd>
                        <MudTd DataLabel="Value">@(@context.QTY * @context.LiftingPrice)</MudTd>
                    </RowEditingTemplate>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>

                <MudSwitch @bind-Checked="@tableCommon.Hover" Color="Color.Primary">Hover</MudSwitch>
                <MudSwitch @bind-Checked="@tableCommon.Dense" Color="Color.Secondary">Dense</MudSwitch>

                <MudGrid>
                    <MudItem md="6">
                        <MudPaper Width="400px" Square="true" Class="mt-10">
                            <MudList Clickable="true">
                                <MudListItem>Total Quantity: 100</MudListItem>
                                <MudDivider />
                                <MudListItem>Total Lifting Price: 100</MudListItem>
                                <MudDivider />
                                <MudListItem>Total Value: 10000</MudListItem>
                            </MudList>
                        </MudPaper>
                    </MudItem>
                    <MudItem md="6">
                        <div class="d-flex justify-end">
                            <MudButtonGroup Class="mt-10" Color="Color.Primary" Variant="Variant.Filled" OverrideStyles="false">
                                <MudButton Color="Color.Secondary" Variant="Variant.Filled">Remove Selected</MudButton>
                                <MudButton Color="Color.Success" Variant="Variant.Filled">Approve Selected</MudButton>
                                <MudButton Color="Color.Primary" Variant="Variant.Filled">Print</MudButton>
                            </MudButtonGroup>
                        </div>
                    </MudItem>
                </MudGrid>
	        </MudContainer>
        </MudPaper>
        </div>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    // Table Customization
    private TableCommon tableCommon = new TableCommon();

    // Table Content
    private IEnumerable<POListViewDetailsPoco> Elements = new List<POListViewDetailsPoco>();

    // Selected Item
    private HashSet<POListViewDetailsPoco> selectedItems = new HashSet<POListViewDetailsPoco>();

    // Before Edit
    private POListViewDetailsPoco beforeEdit;

    // Backup Item 
    private void BackupItem(object element)
    {
        beforeEdit = new()
        {
            QTY = ((POListViewDetailsPoco)element).QTY,
            LiftingPrice = ((POListViewDetailsPoco)element).LiftingPrice
        };
    }

    // Reset Items If Edit Cancel
    private void ResetItemToOriginalValues(object element)
    {
        ((POListViewDetailsPoco)element).QTY = beforeEdit.QTY;
        ((POListViewDetailsPoco)element).LiftingPrice = beforeEdit.LiftingPrice;
    }
}
