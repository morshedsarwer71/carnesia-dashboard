@using Carnesia.Domain.Vendor.Models
@using Carnesia.Domain.Vendor.POCO
@using Carnesia.Domain.Common.POCO
@using Carnesia.Shared.VendorManagement.VendorUpdate
@using Syncfusion.XlsIO
@using System.IO
@using System.Data
@inject Microsoft.JSInterop.IJSRuntime JS
@inject IVendor _vendor
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudPaper Class="px-16 pb-16 pt-10 ma-2 mt-10">
	<MudContainer Fixed="true">
		<MudTable Items="@Vendors" Dense="@table.Dense" Hover="@table.Hover" Bordered="@table.Bordered" Striped="@table.Striped">
            <ToolBarContent>
                <MudSpacer />
                <MudSpacer />
                <MudTextField @bind-Value="table.SearchTerm" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"                                       IconSize="Size.Medium" Class="mt-0"/>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Vendor Name</MudTh>
                <MudTh>Importer</MudTh>
                <MudTh>Initial</MudTh>
                <MudTh>Owner</MudTh>
                <MudTh>Phone Number</MudTh>
                <MudTh>Bank Account Details</MudTh>
                <MudTh>Manager Name</MudTh>
                <MudTh>Address One</MudTh>
                <MudTh>Address Two</MudTh>
                <MudTh>Action</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Vendor Name">@context.name</MudTd>
                <MudTd DataLabel="Importer">@context.importer</MudTd>
                <MudTd DataLabel="Initial">@context.initial</MudTd>
                <MudTd DataLabel="Owner">@context.owner</MudTd>
                <MudTd DataLabel="Phone Number">@context.phoneNumber</MudTd>
                <MudTd DataLabel="Bank Account Details">@context.bankAccountDetails</MudTd>
                <MudTd DataLabel="Manager Name">@context.managerName</MudTd>
                <MudTd DataLabel="Address One">@context.addressOne</MudTd>
                <MudTd DataLabel="Address Two">@context.addressTwo</MudTd>
                <MudTd DataLabel="Action">
                    <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="() => OpenUpdateModal(context)" >Edit</MudButton>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>

        <div class="d-flex flex-wrap mt-4">
            <MudSwitch @bind-Checked="@table.Hover" Color="Color.Primary">Hover</MudSwitch>
            <MudSwitch @bind-Checked="@table.Dense" Color="Color.Secondary">Dense</MudSwitch>
            <MudSwitch @bind-Checked="@table.Striped" Color="Color.Tertiary">Striped</MudSwitch>
            <MudSwitch @bind-Checked="@table.Bordered" Color="Color.Warning">Bordered</MudSwitch>
        </div>

        <div class="mb-5 d-flex justify-end">
            <MudButton StartIcon="@Icons.Filled.Download" Variant="Variant.Filled" Color="Color.Success" OnClick="CreateDocument">Download XLSL</MudButton>
        </div>
	</MudContainer>
</MudPaper>

@code {
    // Table Content
    private IEnumerable<VendorDTO> Vendors = new List<VendorDTO>();

    // Table Customization
    public TableCommon table = new TableCommon();

    protected override async Task OnInitializedAsync()
    {
        Vendors = await _vendor.GetVendorsAsync();
    }

    // Update Vendor
    private async Task OpenUpdateModal(VendorDTO Vendor)
    {
        var parameters = new DialogParameters();
        parameters.Add("FormData", new VendorDTO()
        {
            vendorId = Vendor.vendorId,
            name = Vendor.name,
            initial = Vendor.initial,
            owner = Vendor.owner,
            bankAccountDetails = Vendor.bankAccountDetails,
            managerName = Vendor.managerName,
            phoneNumber = Vendor.phoneNumber,
            importer = Vendor.importer,
            addressOne = Vendor.addressOne,
            addressTwo = Vendor.addressTwo
        });

        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
        var dialog = await DialogService.Show<VendorUpdateModal>("Update Vendor", parameters, options).Result;

        if (dialog.Data != null)
        {
            VendorDTO newVendor = dialog.Data as VendorDTO;

            try
            {
                var result = await _vendor.UpdateVendor(newVendor);
                if (result == true)
                {
                    Snackbar.Add("Vendor Updated Successfully!", Severity.Success);
                    await OnInitializedAsync();
                    return;
                }
                Snackbar.Add("Something Went Wrong!", Severity.Error);
            }
            catch (Exception)
            {
                Snackbar.Add("Something Went Wrong!", Severity.Error);
                throw;
            }
        }
    }

    // Create Document
    private async Task CreateDocument()
    {
        using (ExcelEngine excelEngine = new ExcelEngine())
        {
            IApplication application = excelEngine.Excel;
            application.DefaultVersion = ExcelVersion.Xlsx;

            //Create a workbook.
            IWorkbook workbook = application.Workbooks.Create(1);
            IWorksheet worksheet = workbook.Worksheets[0];

            //Initialize DataTable and data get from SampleDataTable method.
            DataTable table = ParentDataTable();

            //Export data from DataTable to Excel worksheet.
            worksheet.ImportDataTable(table, true, 1, 1);

            worksheet.UsedRange.AutofitColumns();

            //Save the document as a stream and return the stream.
            using (MemoryStream stream = new MemoryStream())
            {
                //Save the created Excel document to MemoryStream
                workbook.SaveAs(stream);

                //Download the excel file.
                await JS.SaveAs("Vendors.xlsx", stream.ToArray());
            }
        }
    }

    private DataTable ParentDataTable()
    {
        DataTable reports = new DataTable();
        reports.Columns.Add("ID", typeof(int));
        reports.Columns.Add("VendorName");
        reports.Columns.Add("Importer");
        reports.Columns.Add("Initial");
        reports.Columns.Add("Owner");
        reports.Columns.Add("PhoneNumber");
        reports.Columns.Add("BankAccountDetails");
        reports.Columns.Add("ManagerName");
        reports.Columns.Add("AddressOne");
        reports.Columns.Add("AddressTwo");

        foreach (var item in Vendors)
        {
            reports.Rows.Add(item.vendorId, item.name, item.importer, item.initial, item.owner, item.phoneNumber, item.bankAccountDetails, item.managerName, item.addressOne, item.addressTwo);
        }
        return reports;
    }
}
