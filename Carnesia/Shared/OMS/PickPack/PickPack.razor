@using Carnesia.Domain.OMS.PickPack
@inject ISnackbar Snackbar
@inject IPickPack _pickPack

<MudPaper Class="px-3 py-16 ma-2">
    <MudContainer Fixed="true">
        <MudText Typo="Typo.h3">Order ID: @orderIdShow</MudText>

        @*		<MudGrid Class="justify-center">
        <MudItem sm="6">
        <MudSelect @bind-Value="isCombo" Label="Product Type" AnchorOrigin="Origin.BottomCenter">
        <MudSelectItem Value="0">General Product</MudSelectItem>
        <MudSelectItem Value="1">Combo</MudSelectItem>
        </MudSelect>
        </MudItem>
        </MudGrid>*@
        <MudGrid Class="justify-center">
            <MudItem sm="3">
                <MudTextField @bind-Value="orderId" Immediate="true" Label="Order ID" OnKeyPress="orderEnter" />
            </MudItem>
            <MudItem sm="3">
                <MudTextField @bind-Value="uid" Immediate="true" Label="UID" OnKeyPress="UidEnter" />
            </MudItem>
        </MudGrid>

        <MudGrid Class="justify-center mb-3">
            <MudItem sm="6" Class="d-flex justify-end">
                <MudButton Variant="Variant.Filled" Color="Color.Primary">Add</MudButton>
            </MudItem>
        </MudGrid>

        <MudText Typo="Typo.h6">Customer Instruction: @Picklist.instructions</MudText>
        <MudText Typo="Typo.h6">Expiry Date: @Picklist.expiryDate</MudText>
        <MudText Typo="Typo.h6">Expiry Status: @Picklist.expStatus</MudText>

        @if (Elements.Count > 0)
        {
            <MudTable Class="mt-5" Items="Elements" Hover="true" Striped="true" Dense="true" Loading="Loading" LoadingProgressColor="Color.Info">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">General Products</MudText>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Picklist ID</MudTh>
                    <MudTh>Product Code</MudTh>
                    <MudTh>SKU</MudTh>
                    <MudTh>Product Name</MudTh>
                    <MudTh>QTY</MudTh>
                    <MudTh>Packed QTY</MudTh>
                    <MudTh>To Be Scanned</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Picklist ID">@context.pickListId</MudTd>
                    <MudTd DataLabel="Product Code">@context.productCode</MudTd>
                    <MudTd DataLabel="SKU">@context.sku</MudTd>
                    <MudTd DataLabel="Product Name">@context.productName</MudTd>
                    <MudTd DataLabel="QTY">@context.totalQty</MudTd>
                    <MudTd DataLabel="Packed QTY">@context.totalPickedQty</MudTd>
                    <MudTd DataLabel="To Be Scanned">@(context.totalQty - context.totalPickedQty)</MudTd>
                    </RowTemplate>
                </MudTable>
        }

        @if (Combos.Count > 0)
        {
            <MudTable Class="mt-5" Items="Combos" Hover="true" Striped="true" Dense="true" Loading="Loading" LoadingProgressColor="Color.Info">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Bogo/Combo Products</MudText>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Picklist ID</MudTh>
                    <MudTh>Product Code</MudTh>
                    <MudTh>SKU</MudTh>
                    <MudTh>Product Name</MudTh>
                    <MudTh>QTY</MudTh>
                    <MudTh>Packed QTY</MudTh>
                    <MudTh>To Be Scanned</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Picklist ID">@context.pickListId</MudTd>
                    <MudTd DataLabel="Product Code">@context.productCode</MudTd>
                    <MudTd DataLabel="SKU">@context.sku</MudTd>
                    <MudTd DataLabel="Product Name">@context.productName</MudTd>
                    <MudTd DataLabel="QTY">@context.totalQty</MudTd>
                    <MudTd DataLabel="Packed QTY">@context.totalPickedQty</MudTd>
                    <MudTd DataLabel="To Be Scanned">@(context.totalQty - context.totalPickedQty)</MudTd>
                    </RowTemplate>
                </MudTable>
        }

        <div class="d-flex justify-end mt-5">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="Elements.Count <= 0 || Loading" OnClick="ConfirmPickList">Submit</MudButton>
        </div>
    </MudContainer>
</MudPaper>

@code {
    // Table Content
    private PickPackDTO Picklist = new PickPackDTO();
    private List<pickPackProductsDTO> Elements = new List<pickPackProductsDTO>();
    private List<pickPackProductsDTO> Combos = new List<pickPackProductsDTO>();

    // Loading
    private bool Loading { get; set; }

    // Order ID
    private string orderId { get; set; }
    private string orderIdShow { get; set; }
    private string uid { get; set; }
    //private int isCombo { get; set; } = 0;

    // Press Enter
    private async Task orderEnter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter" || e.Code == "13")
        {
            if (!String.IsNullOrEmpty(orderId))
            {
                orderIdShow = orderId;
                orderId = String.Empty;
                await GetDataByTRN();
            }
        }
    }

    private async Task UidEnter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            if (!String.IsNullOrEmpty(uid) && uid.Length == 15 && !String.IsNullOrEmpty(orderIdShow))
            {
                await AddUID();
            }
        }
    }

    // Enter TRN
    private async Task GetDataByTRN()
    {
        Loading = true;
        try
        {
            var result = await _pickPack.GetPickPackByTRN(orderIdShow);

            if (result.message != "Success")
            {
                Snackbar.Add(result.message, Severity.Error);
                Loading = false;
                return;
            }

            Picklist = result;
            Elements = result.pickPacks;
            Combos = result.combos;
            Loading = false;
        }
        catch (Exception e)
        {
            Loading = false;
            Console.WriteLine(e.Message);
            Snackbar.Add("Internal server error!", Severity.Error);
        }
    }

    // Enter UID
    private async Task AddUID()
    {
        Loading = true;
        try
        {
            var result = await _pickPack.AddUID(orderIdShow, uid);

            if (result.message != "Success")
            {
                Snackbar.Add(result.message, Severity.Error);
                Loading = false;
                return;
            }
            Picklist = result;
            Elements = result.pickPacks;
            Combos = result.combos;
            uid = String.Empty;
            Loading = false;
        }
        catch (Exception e)
        {
            Loading = false;
            Console.WriteLine(e.Message);
            Snackbar.Add("Internal server error!", Severity.Error);
        }

    }

    // Confirm Picklist
    private async Task ConfirmPickList()
    {
        Loading = true;
        try
        {
            var result = await _pickPack.ConfirmPicklist(orderIdShow);

            if (result.message != "Success")
            {
                Snackbar.Add(result.message, Severity.Error);
                Loading = false;
                return;
            }
            Picklist = new PickPackDTO();
            Elements = new List<pickPackProductsDTO>();
            Loading = false;
            Snackbar.Add(result.message, Severity.Success);
        }
        catch (Exception e)
        {
            Loading = false;
            Console.WriteLine(e.Message);
            Snackbar.Add("Internal server error!", Severity.Error);
        }
    }
}
