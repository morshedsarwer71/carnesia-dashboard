@using Carnesia.Domain.OMS.ClosedOrder;
@inject IClosedOrder _closedOrder


<MudDialog>
	<DialogContent>
		<div Style="max-height: 90vh; overflow-y: scroll">
			<MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
				<MudNumericField Min="1" @bind-Value="FormData.delivery" Label="Delivery" Immediate="true" Required="true" RequiredError="Delivery is required!" />
				<MudNumericField Min="1" @bind-Value="FormData.packaging" Label="Packaging" Immediate="true" Required="true" RequiredError="Packaging is required!" />
				<MudNumericField Min="1" @bind-Value="FormData.productQuality" Label="Product Quality" Immediate="true" Required="true" RequiredError="Product Quality is required!" />
				<MudNumericField Min="1" @bind-Value="FormData.customerSupport" Label="Customer Support" Immediate="true" Required="true" RequiredError="Customer Support is required!" />
				<MudTextField @bind-Value="FormData.feedback" Lines="5" Label="FeedBack" Immediate="true" Required="true" RequiredError="FeedBack required!" />

				<div class="d-flex justify-end my-5">
					<MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto">Submit</MudButton>
				</div>
			</MudForm>
		</div>
	</DialogContent>
</MudDialog>

@code {
	[CascadingParameter] MudDialogInstance MudDialog { get; set; }

	[Parameter]
	public string TrnCode { get; set; }
	private CustomerFeedbackDTO FormData = new CustomerFeedbackDTO();

	// Create New Feedback
	private async Task NewFeedBack()
	{
		try
		{
			FormData.average = (FormData.delivery + FormData.packaging + FormData.productQuality + FormData.customerSupport) / 4;
			FormData.trnCode = TrnCode;
			var result = await _closedOrder.TakeFeedBack(FormData);
		}
		catch (Exception)
		{
			
			throw;
		}
	}

	// Form Ref
	bool success;
	string[] errors = { };
	MudForm form;
}
