@using Carnesia.Domain.OMS.ReturnManagement.ReceiveReturn
@using Carnesia.Domain.OMS.PickPack
@inject IReceiveReturn _receiveReturn
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudPaper Class="px-16 pb-16 pt-10 ma-2 mt-10">
    <MudContainer Fixed="true">

        <MudText Typo="Typo.h3">Order ID: @orderIdShow</MudText>

        <MudGrid Class="justify-center">
            <MudItem sm="4">
                <MudTextField @bind-Value="orderId" Label="Scan Order ID" Immediate="true" Variant="Variant.Text" OnKeyPress="AddOrder" />
            </MudItem>
            <MudItem sm="4">
                <MudTextField @bind-Value="uid" Label="Scan UID" Immediate="true" Variant="Variant.Text" OnKeyPress="AddUID" />
            </MudItem>
            <MudItem sm="8">
                <div class="d-flex justify-end mt-5">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary">Add</MudButton>
                </div>
            </MudItem>
        </MudGrid>

        @if (Elements.Count > 0)
        {
            <MudTable Class="mt-5" Items="@Elements" Hover="true">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">General Products</MudText>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>SKU</MudTh>
                    <MudTh>Product Name</MudTh>
                    <MudTh>Quantity</MudTh>
                    <MudTh>Picked Qty</MudTh>
                    <MudTh>Returned Qty</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="SKU">@context.sku</MudTd>
                    <MudTd DataLabel="Product Name">@context.productName</MudTd>
                    <MudTd DataLabel="Quantity">@context.totalQty</MudTd>
                    <MudTd DataLabel="Picked Qty">@context.totalPickedQty</MudTd>
                    <MudTd DataLabel="Returned Qty">@context.totalReturnQty</MudTd>
                </RowTemplate>
            </MudTable>
        }

        @if (Combos.Count > 0)
        {
            <MudTable Class="mt-5" Items="@Combos" Hover="true">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Bogo/Combo Products</MudText>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Code</MudTh>
                    <MudTh>Product Name</MudTh>
                    <MudTh>Type</MudTh>
                    <MudTh>Quantity</MudTh>
                    <MudTh>Returned Qty</MudTh>
                    <MudTh>Return</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Code">@context.productCode</MudTd>
                    <MudTd DataLabel="Product Name">@context.productName</MudTd>
                    <MudTd DataLabel="Type">@context.sku</MudTd>
                    <MudTd DataLabel="Quantity">@context.totalQty</MudTd>
                    <MudTd DataLabel="Returned Qty">@context.totalReturnQty</MudTd>
                    <MudTd DataLabel="Return">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => OpenComboReturnModal(context.productCode)">Return</MudButton>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        }

        <div class="d-flex justify-end mt-5">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CommitReturn" Disabled="Elements.Count <= 0 && Combos.Count <= 0">Submit</MudButton>
        </div>
    </MudContainer>
</MudPaper>

@code {
    // Order Id, UID
    private string orderId { get; set; }
    private string orderIdShow { get; set; }
    private string uid { get; set; }

    // Return Type
    private bool ReturnType { get; set; } = false;

    // Table Content
    private List<pickPackProductsDTO> Elements = new List<pickPackProductsDTO>();
    private List<pickPackProductsDTO> Combos = new List<pickPackProductsDTO>();

    // Press Enter
    private async Task AddOrder(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            if (!String.IsNullOrEmpty(orderId))
            {
                orderIdShow = orderId;
                orderId = String.Empty;

                await GetOrderDetails();
            }
        }
    }

    private async Task AddUID(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            if (uid.Length == 15 && !String.IsNullOrEmpty(orderIdShow))
            {
                await ReceiveItem();
            }
        }
    }

    // Get Order Details
    private async Task GetOrderDetails()
    {
        try
        {
            var result = await _receiveReturn.GetOrderDetails(orderIdShow);

            if (result.message != "Success")
            {
                Snackbar.Add(result.message, Severity.Error);
                return;
            }

            Elements = result.pickPacks;
            Combos = result.combos;
            Snackbar.Add(result.message, Severity.Success);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            Snackbar.Add("Internal server error!", Severity.Error);
        }
    }

    // Receive Item
    private async Task ReceiveItem()
    {
        try
        {
            var result = await _receiveReturn.ReturnItem(orderIdShow, uid, ReturnType);

            if (result.message != "Success")
            {
                Snackbar.Add(result.message, Severity.Error);
                return;
            }

            Elements = result.pickPacks;
            Snackbar.Add(result.message, Severity.Success);
            uid = String.Empty;
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            Snackbar.Add("Internal server error!", Severity.Error);
        }
    }

    // Submit Return
    private async Task CommitReturn()
    {
        try
        {
            var result = await _receiveReturn.CommitReturn(orderIdShow);

            Snackbar.Add(result, Severity.Success);
        }
        catch (Exception)
        {

            throw;
        }
    }

    // Open Return Modal
    private async Task OpenComboReturnModal(string bccode)
    {
        var parameters = new DialogParameters();
        parameters.Add("BcCode", bccode);
        parameters.Add("TrnCode", orderIdShow);

        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = false, MaxWidth = MaxWidth.Large, DisableBackdropClick = true };
        var dialog = await DialogService.Show<ComboReturnModal>($"Return {bccode}", parameters, options).Result;

        if (!dialog.Cancelled)
        {
            Snackbar.Add("Combo returned successfully!", Severity.Success);

            await GetOrderDetails();

    }
    }

    // Confirmation Modal
    private void OpenDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, };
        DialogService.Show<ConfirmationModal>("Confirmation", options);
    }
}
