@using Carnesia.Domain.OMS.ReturnManagement.PendingReturn
@using Carnesia.Domain.OMS.AssignDelivery.Dispatch
@inject IAssignOrder _assignOrder
@inject IReceiveReturn _receiveReturn

<MudPaper Class="px-3 py-16 ma-2">
	<MudContainer Fixed="true">
		<MudGrid>
			<MudItem md="3" sm="6">
				<MudTextField @bind-Value="Filter.orderCode" Label="Order ID" Variant="Variant.Text"/>
			</MudItem>
			<MudItem md="3" sm="6">
				<MudSelect @bind-Value="Filter.courierId" Label="Courier" AnchorOrigin="Origin.BottomCenter">
					<MudSelectItem Value="0">Select Courier</MudSelectItem>
					@foreach (var item in Couriers)
					{
						<MudSelectItem Value="item.id">@item.name</MudSelectItem>
					}
				</MudSelect>
			</MudItem>
			<MudItem md="3" sm="6">
				<MudTextField @bind-Value="Filter.delivedryRcvId" Label="Delivery Receiver" Variant="Variant.Text"/>
			</MudItem>
			<MudItem md="3" sm="6">
				<MudDatePicker Label="From" @bind-Date="Filter.returnFromDate"/>
			</MudItem>
			<MudItem md="3" sm="6">
				<MudDatePicker Label="To" @bind-Date="Filter.returnToDate"/>
			</MudItem>
		</MudGrid>

		<div class="d-flex justify-end my-3">
			<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => GetOrdersByFilter()">Filter</MudButton>
		</div>

		<MudTable Items="@Elements" Loading="Loading" LoadingProgressColor="Color.Info">
			<HeaderContent>
				@*<MudTh></MudTh>*@
				<MudTh>Order ID</MudTh>
				<MudTh>Order Date</MudTh>
				<MudTh>Return Date</MudTh>
				<MudTh>Selling Price</MudTh>
				<MudTh>Receivable Qty.</MudTh>
				<MudTh>Amount</MudTh>
			</HeaderContent>
			<RowTemplate>
				@*<MudTd DataLabel="">
					@if (!context.ShowDetails)
					{
						<MudIconButton Icon="@Icons.Material.Filled.Add" aria-label="Show" OnClick="() => ShowBtnPress(context.OrderID)" />
					}
					else if (context.ShowDetails)
					{
						<MudIconButton Icon="@Icons.Filled.Minimize" aria-label="Hide" OnClick="() => ShowBtnPress(context.OrderID)" />
					}
				</MudTd>*@
				<MudTd DataLabel="Order ID">@context.orderCode</MudTd>
				<MudTd DataLabel="Order Date">@context.orderDate</MudTd>
				<MudTd DataLabel="Return Date">@context.returnDate</MudTd>
				<MudTd DataLabel="Selling Price">@context.sellingPrice</MudTd>
				<MudTd DataLabel="Receivable Qty.">@context.totalQty</MudTd>
				<MudTd DataLabel="Amount">@context.amount</MudTd>
			</RowTemplate>
			@*<ChildRowContent>
				@if (context.ShowDetails)
				{
					<td colspan="7">
						<MudCard Elevation="0">
							<MudCardContent Class="pa-0">
								<MudTable Items="@context.Details" Context="DetailsContext" Hover="true" Elevation="0">
								   <HeaderContent>
										<MudTh>SKU</MudTh>
										<MudTh>Product Name</MudTh>
								   </HeaderContent>
								   <RowTemplate>
										<MudTd DataLabel="SKU">@DetailsContext.SKU</MudTd>
										<MudTd DataLabel="Product Name">@DetailsContext.ProductName</MudTd>
								   </RowTemplate>
								</MudTable>
							</MudCardContent>
						</MudCard>
					</td>
				}
			</ChildRowContent>*@
			<PagerContent>
				<MudTablePager />
			</PagerContent>
		</MudTable>
	</MudContainer>
</MudPaper>

@code {
	// Page On Load
	protected override async Task OnInitializedAsync()
	{
		await GetOrders();
		await GetCouriers();
	}

	// Loading 
	private bool Loading { get; set; }

	// Table Content
	private List<PendingReturnDTO> Elements = new List<PendingReturnDTO>();

	// Filter
	private PendingReturnsFilterDTO Filter = new PendingReturnsFilterDTO();

	// Get Orders
	private async Task GetOrders()
	{
		Loading = true;
		try
		{
			Elements = await _receiveReturn.GetPendingReturns();
			Loading = false;
		}
		catch(Exception e)
		{
			Console.WriteLine(e.Message);
			Loading = false;
		}
	}

	private async Task GetOrdersByFilter()
	{
		Loading = true;
		try
		{
			Elements = await _receiveReturn.GetPendingReturnsByFilter(Filter);
			Loading = false;
		}
		catch(Exception e)
		{
			Console.WriteLine(e.Message);
			Loading = false;
		}
	}

	// Courier List
	private List<CourierDTO> Couriers = new List<CourierDTO>();

	// Get Couriers
	private async Task GetCouriers()
	{
		Couriers = await _assignOrder.GetCouriers();
	}

	// Show Details
	private void ShowBtnPress(string orderId)
	{
		PendingReturnDTO tmpElements = Elements.First(f => f.orderCode == orderId);
		tmpElements.ShowDetails = !tmpElements.ShowDetails;
	}
}
