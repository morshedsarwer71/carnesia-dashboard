@using Carnesia.Domain.Common.POCO
@using Carnesia.Domain.HRM.PanelUser
@inject IPanelUser _panelUser
@inject ISnackbar Snackbar

<MudPaper Class="px-16 pb-16 pt-10 ma-2 mt-10">
	<MudContainer Fixed="true">
		<MudTable RowsPerPage="25" Items="@Elements" Dense="@tableCommon.Dense" Hover="@tableCommon.Hover" Bordered="@tableCommon.Bordered" Striped="@tableCommon.Striped" Filter="new Func<PanelUserListDTO,bool>(FilterFuncInitial)">
			<ToolBarContent>
				<MudSpacer />
				<MudSpacer />
				<MudTextField @bind-Value="tableCommon.SearchTerm" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" />
			</ToolBarContent>
			<HeaderContent>
				<MudTh>Name</MudTh>
				<MudTh>User Name</MudTh>
				<MudTh>Phone Number</MudTh>
				<MudTh>Email</MudTh>
				<MudTh>Department</MudTh>
				<MudTh>Designation</MudTh>
				<MudTh>Store</MudTh>
				<MudTh>Role</MudTh>
				<MudTh>Team</MudTh>
				<MudTh>Active</MudTh>
			</HeaderContent>
			<RowTemplate>
				<MudTd DataLabel="Name">@context.firstName @context.lastName</MudTd>
				<MudTd DataLabel="User Name">@context.username</MudTd>
				<MudTd DataLabel="Phone Number">@context.phoneNumber</MudTd>
				<MudTd DataLabel="Email">@context.email</MudTd>
				<MudTd DataLabel="Department">@context.department</MudTd>
				<MudTd DataLabel="Designation">@context.designation</MudTd>
				<MudTd DataLabel="Store">@context.storeName</MudTd>
				<MudTd DataLabel="Role">@context.roleType</MudTd>
				<MudTd DataLabel="Team">@context.team</MudTd>
				@*<MudTd DataLabel="Action">@context.isActive</MudTd>*@
				<MudTd DataLabel="Publish">
                    <MudSwitch @bind-Checked="@context.isActive" Color="Color.Primary" @onclick="(() => ToggleUser(context.id))"/>			
                </MudTd>
			</RowTemplate>
			<PagerContent>
				<MudTablePager />
			</PagerContent>
		</MudTable>

		<div class="d-flex flex-wrap mt-4">
			<MudSwitch @bind-Checked="@tableCommon.Hover" Color="Color.Primary">Hover</MudSwitch>
			<MudSwitch @bind-Checked="@tableCommon.Dense" Color="Color.Secondary">Dense</MudSwitch>
			<MudSwitch @bind-Checked="@tableCommon.Striped" Color="Color.Tertiary">Striped</MudSwitch>
			<MudSwitch @bind-Checked="@tableCommon.Bordered" Color="Color.Warning">Bordered</MudSwitch>
		</div>
	</MudContainer>
</MudPaper>

@code {
	// Page On Load
	protected override async Task OnInitializedAsync()
	{
		await GetUsers();
	}


	// Table Customization
	private TableCommon tableCommon = new TableCommon();

	// Table Content
	private List<PanelUserListDTO> Elements = new List<PanelUserListDTO>();

	// Get Users
	private async Task GetUsers()
	{
		Elements = await _panelUser.GetUsers();
	}

	//Togle User
	private async Task ToggleUser(string id)
	{
		try
		{
			var result = await _panelUser.ToggleUser(id);
			if (result)
			{
				Snackbar.Add("Toggled Successfully!", Severity.Success);
				await GetUsers();
				return;
			}
			Snackbar.Add("Toggle failed!", Severity.Error);
		}
		catch(Exception e)
		{
			Snackbar.Add("Internal Server Error!", Severity.Error);
			Console.WriteLine(e.Message);
		}
	}

	// Table Search
	private bool FilterFuncInitial(PanelUserListDTO element) => FilterFunc(element, tableCommon.SearchTerm);

	private bool FilterFunc(PanelUserListDTO element, string searchString)
	{
		if (string.IsNullOrWhiteSpace(searchString))
			return true;
		if (element.username.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		if (element.firstName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		if (element.lastName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		if (element.phoneNumber.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		if (element.email.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		return false;
	}
}
