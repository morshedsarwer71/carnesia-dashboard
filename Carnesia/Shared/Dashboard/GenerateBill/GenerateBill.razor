@using Carnesia.Domain.Dashboard.GenerateBill
@using Carnesia.Domain.Common.POCO
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService
@inject IGenerateBill _generateBill
@inject ISnackbar Snackbar
@inject IJSRuntime IJS

<MudPaper Class="pa-16 ma-2">
	<MudContainer Fixed="true">
		@*onkeydown="@KeyCombo"*@
		<div @ref="generateBill" tabindex="0">
			<div class="d-flex justify-end mt-5">
				<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenCustomerModal">Create Customer</MudButton>
			</div>
			<MudGrid Class="justify-space-between mb-5">
				<MudItem sm="4">
					<MudTextField  @bind-Value="uid" Placeholder="Scan UID" Immediate="true" Variant="Variant.Text" OnKeyPress="AddProduct" />
				</MudItem>
				<MudItem sm="4">
					<MudTextField @bind-Value="customerPhoneNumber" Placeholder="Customer Phone Number" Immediate="true" Variant="Variant.Text" OnKeyPress="GetCustomer" />
				</MudItem>
			</MudGrid>
			<MudTable Items="@Elements" Dense="@tableCommon.Dense" Hover="@tableCommon.Hover" Bordered="@tableCommon.Bordered" Striped="@tableCommon.Striped" CustomFooter="true">
				<HeaderContent>
					<MudTh>Product Name & SKU</MudTh>
					<MudTh>MRP</MudTh>
					<MudTh>Selling Price</MudTh>
					<MudTh>Quantity</MudTh>
					<MudTh>Subtotal Value</MudTh>
					<MudTh>Remove</MudTh>
				</HeaderContent>
				<RowTemplate>
					<MudTd DataLabel="BrandProduct Name & SKU">@context.nameAndSKU</MudTd>
					<MudTd DataLabel="MRP">@context.mrp</MudTd>
					<MudTd DataLabel="Selling Price">@Math.Round(context.price, 2)</MudTd>
					<MudTd DataLabel="Quantity">@context.quantity</MudTd>
					<MudTd DataLabel="Subtotal Value">@Math.Round(context.totalPrice, 2)</MudTd>
					<MudTd DataLabel="Remove">
						<MudButton OnClick="() => RemoveProduct(context)">
							<MudIcon Icon="@Icons.Filled.Delete" Color="Color.Error" />
						</MudButton>
					</MudTd>
				</RowTemplate>
				<FooterContent>
					<MudTFootRow>
						<MudTd colspan="5" Style="text-align: end;">Total:</MudTd>
						<MudTd colspan="1" Style="text-align: end;">@subTotal</MudTd>
					</MudTFootRow>
					<MudTFootRow>
						<MudTd colspan="5" Style="text-align: end;">Item:</MudTd>
						<MudTd colspan="1" Style="text-align: end;">@TableItems</MudTd>
					</MudTFootRow>
					<MudTFootRow>
						<MudTd colspan="5" Style="text-align: end;">Quantity:</MudTd>
						<MudTd colspan="1" Style="text-align: end;">@(Elements.Sum(e => e.quantity))</MudTd>
					</MudTFootRow>
					<MudTFootRow>
						<MudTd colspan="5" Style="text-align: end;">Discount Value:</MudTd>
						<MudTd colspan="1" Style="text-align: end;">@Math.Round(discount, 2)</MudTd>
					</MudTFootRow>
					<MudTFootRow>
						<MudTd colspan="5" Style="text-align: end;">Reward Value:</MudTd>
						<MudTd colspan="1" Style="text-align: end;">0</MudTd>
					</MudTFootRow>
					@*<MudTFootRow>
						<MudTd colspan="5" Style="text-align: end;">Vat(5%):</MudTd>
						<MudTd colspan="1" Style="text-align: end;">@Math.Round(vatAmount, 2)</MudTd>
					</MudTFootRow>*@
					<MudTFootRow>
						<MudTd colspan="5" Style="text-align: end; font-weight: 600;">Grand Total:</MudTd>
						<MudTd colspan="1" Style="text-align: end; font-weight: 600;">@Math.Round((subTotal - discount + vatAmount), 2)</MudTd>
					</MudTFootRow>
				</FooterContent>
			</MudTable>

			<MudGrid>
				<MudItem sm="6">
					<MudGrid Class="align-baseline">
						<MudItem sm="9">
							<MudNumericField @bind-Value="Customer.creditValue" Placeholder="Creadit Value" Immediate="true" Variant="Variant.Text" />
						</MudItem>
						<MudItem sm="3">
							<MudButton Variant="Variant.Filled" Color="Color.Primary">Use</MudButton>
						</MudItem>
					</MudGrid>
				</MudItem>
				<MudItem sm="6">
					<MudGrid Class="align-baseline">
						<MudItem sm="9">
							<MudTextField T="string" Placeholder="Reward Points" Immediate="true" Variant="Variant.Text" />
						</MudItem>
						<MudItem sm="3">
							<MudButton Variant="Variant.Filled" Color="Color.Primary">Use</MudButton>
						</MudItem>
					</MudGrid>
				</MudItem>
				<MudItem sm="6">
					<MudGrid Class="align-baseline">
						<MudItem sm="9">
							<MudTextField T="string" Placeholder="Membership ID" Immediate="true" Variant="Variant.Text" />
						</MudItem>
						<MudItem sm="3">
							<MudButton Variant="Variant.Filled" Color="Color.Primary">Apply</MudButton>
						</MudItem>
					</MudGrid>
				</MudItem>
				<MudItem sm="6">
					<MudGrid Class="align-baseline">
						<MudItem sm="9">
							<MudTextField @bind-Value="Coupon" Placeholder="Coupon Code" Immediate="true" Variant="Variant.Text" />
						</MudItem>
						<MudItem sm="3">
							<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="GetDiscount">Apply</MudButton>
						</MudItem>
					</MudGrid>
				</MudItem>
				<MudItem sm="6">
					<MudSelect @bind-Value="POSDetails.paymentType" Label="Payment Type" AnchorOrigin="Origin.BottomCenter">
						<MudSelectItem Value="@("Cash")" />
						<MudSelectItem Value="@("Card")" />
						<MudSelectItem Value="@("Digital Payment")" />
					</MudSelect>
				</MudItem>
			</MudGrid>

			<div class="mt-5">
				<MudText>Name: @Customer.name</MudText>
				<MudText>Phone Number: @Customer.phone</MudText>
				<MudText>Address: @Customer.address</MudText>
			</div>

			<div class="mt-5 mx-auto" style="width: fit-content;">
				<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenCommentModal">Add Comment</MudButton>
				<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="GeneratePOS">Generate Bill</MudButton>
				<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="GotoPrint" Disabled="String.IsNullOrEmpty(trnCode)">Print Invoice</MudButton>
			</div>
		</div>
	</MudContainer>
</MudPaper>

@code {
	// Div Ref
	protected ElementReference generateBill;

	// Invoke Focus
	protected async override Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await JSRuntime.InvokeVoidAsync("SetFocusToElement", generateBill);
		}
	}

	// TRN Code
	private string trnCode { get; set; }

	// New Pos
	private GenerateBillPOSDTO POSData = new GenerateBillPOSDTO();

	// Reward Section
	private string Coupon { get; set; }
	private string MembershipID { get; set; }

	// Comment
	private string Comment { get; set; }

	// For Value Calculation
	private decimal subTotal { get; set; }
	private decimal vatAmount { get; set; }
	private decimal discount { get; set; }

	// Table Items
	private int TableItems { get; set; }

	//Customer Data
	private GenerateBillCustomerInfoDTO Customer = new GenerateBillCustomerInfoDTO();

	private string customerPhoneNumber { get; set; }

	private async Task GetCustomer(KeyboardEventArgs e)
	{
		if (e.Code == "Enter" || e.Code == "NumpadEnter")
		{
			if (!String.IsNullOrEmpty(customerPhoneNumber))
			{
				try
				{
					var result = await _generateBill.GetCustomerInfo(customerPhoneNumber);

					if (!String.IsNullOrEmpty(result.error))
					{
						Snackbar.Add(result.error, Severity.Error);
						return;
					}

					Customer = result;
				}
				catch (Exception)
				{
					throw;
				}
			}
		}
	}

	// Table Customaization
	private TableCommon tableCommon = new TableCommon();

	// Table Content
	private List<GenerateBillUIDDataDTO> Elements = new List<GenerateBillUIDDataDTO>();

	// UID Collection
	private List<GenerateBillUIDCollectionDTO> UIDCollection = new List<GenerateBillUIDCollectionDTO>();

	// Scan UID
	private string uid { get; set; }

	private async Task AddProduct(KeyboardEventArgs e)
	{
		if (e.Code == "Enter" || e.Code == "NumpadEnter")
		{
			if (!String.IsNullOrEmpty(uid))
			{
				bool isThere = UIDCollection.Any(x => x.uid == uid);

				if (isThere)
				{
					Snackbar.Add("UID already in cart", Severity.Error);
					return;
				}
				await CheckInList(uid);
				subTotal = Math.Round(Elements.Sum(e => e.totalPrice), 2);
				TableItems = Elements.Count();
			}
		}
	}

	// Get Key Combo
	//protected async Task KeyCombo(KeyboardEventArgs e)
	//{
	//	if (e.CtrlKey && e.Key == "F1")
	//	{
	//		await GeneratePOS();
	//	}

	//	if (e.CtrlKey && e.Key == "F2")
	//	{
	//		await PrintInvoice();
	//	}
	//}

	// Generate POS
	//private async Task GeneratePOS()
	//{
	//	Console.WriteLine("Bill Generated");
	//}

	// Print Invoice
	private async Task PrintInvoice()
	{
		Console.WriteLine("Print Invoice");
	}

	// Create Customer
	private async Task OpenCustomerModal()
	{
		var parameters = new DialogParameters();
		parameters.Add("FormData", new GenerateBillCreateCustomerDTO());

		var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
		var dialog = await DialogService.Show<CreateCustomerModal>("Create New Customer", parameters, options).Result;

		if (dialog.Data != null)
		{
			GenerateBillCreateCustomerDTO newCustomer = dialog.Data as GenerateBillCreateCustomerDTO;

			try
			{
				var result = await _generateBill.CreateCustomer(newCustomer);

				if (result.customerId != null)
				{
					Snackbar.Add(result.message, Severity.Success);
					customerPhoneNumber = result.customerId.ToString();
					return;
				}
				Snackbar.Add(result.message, Severity.Error);
			}
			catch (Exception)
			{
				Snackbar.Add("Internal Server Error!", Severity.Error);
				throw;
			}
		}
	}

	// Add Comment
	private async Task OpenCommentModal()
	{
		var parameters = new DialogParameters();
		parameters.Add("comment", Comment);

		var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
		var dialog = await DialogService.Show<GenerateBillAddCommentModal>("Add Comment", parameters, options).Result;

		if (dialog.Data != null)
		{
			Comment = dialog.Data as string;
		}
	}

	// UID Scan
	//private async Task ScanUid(KeyboardEventArgs e)
	//{
	//	uid = s;
	//	if (s.Length == 15)
	//	{

	//		try
	//		{
	//			bool isThere = UIDCollection.Any(x => x.uid == s);

	//			if (isThere)
	//			{
	//				Snackbar.Add("UID already in cart", Severity.Error);
	//				return;
	//			}

	//			await CheckInList(s);

	//			subTotal = Math.Round(Elements.Sum(e => e.totalPrice), 2);
	//			TableItems = Elements.Count();
	//			//GetVat();
	//		}
	//		catch (Exception)
	//		{
	//			throw;
	//		}
	//	}
	//}

	// Check if Already in List
	private async Task CheckInList(string s)
	{
		try
		{
			var result = await _generateBill.GetProductByUid(s);
			if (!String.IsNullOrEmpty(result.error))
			{
				Snackbar.Add(result.error, Severity.Error);
				return;
			}
			bool isThere = Elements.Any(x => x.productCode == result.productCode);
			if (isThere)
			{
				var productIndex = Elements.FindIndex(x => x.productCode == result.productCode);

				Elements[productIndex].quantity += 1;
				Elements[productIndex].totalPrice = Elements[productIndex].quantity * Elements[productIndex].price;
				var tempUIDIn = new GenerateBillUIDCollectionDTO() { uid = s, productCode = result.productCode };
				UIDCollection.Add(tempUIDIn);
				uid = String.Empty;
				return;
			}
			result.quantity = 1;
			result.totalPrice = result.quantity * result.price;

			Elements.Add(result);
			var tempUID = new GenerateBillUIDCollectionDTO() { uid = s, productCode = result.productCode };
			UIDCollection.Add(tempUID);
			uid = String.Empty;
		}
		catch (Exception)
		{
			throw;
		}
	}

	// Get Discount
	private async Task GetDiscount()
	{
		try
		{
			var result = await _generateBill.GetDiscount(Coupon, subTotal);
			if (result == 0)
			{
				Snackbar.Add("Coupon not applicable", Severity.Error);
				return;
			}
			discount = result;
			//GetVat();
		}
		catch (Exception)
		{
			throw;
		}
	}

	// Get Vat
	private void GetVat()
	{
		vatAmount = ((subTotal - discount) / 100) * 5;
	}

	// Generate POS
	private GenerateBillPOSTDetailsDTO POSDetails = new GenerateBillPOSTDetailsDTO();

	private async Task AssignData()
	{
		if (String.IsNullOrEmpty(POSDetails.paymentType))
		{
			Snackbar.Add("Please add payment type!", Severity.Error);
			return;
		}
		POSDetails.items = TableItems;
		POSDetails.quantities = Elements.Sum(e => e.quantity);
		POSDetails.customerId = Customer.customerId;
		POSDetails.discount = discount;
		POSDetails.vatAmount = vatAmount;
		POSDetails.total = subTotal;
		POSDetails.grandTotal = subTotal - discount + vatAmount;
		POSDetails.creditValue = Customer.creditValue;
		POSDetails.membershipId = MembershipID;
		POSDetails.couponCode = Coupon;
		POSDetails.comment = Comment;

		POSData.pos = POSDetails;
		POSData.items = Elements;
		POSData.posUID = UIDCollection;
	}

	private async Task GeneratePOS()
	{
		try
		{
			await AssignData();
			var result = await _generateBill.NewPOS(POSData);

			if (result.trnCode != null)
			{
				trnCode = result.trnCode;
				Snackbar.Add(result.message, Severity.Success);
				return;
			}
			Snackbar.Add(result.message, Severity.Error);
		}
		catch (Exception e)
		{
			
			Snackbar.Add(e.Message, Severity.Error);
			//Snackbar.Add("Something went wrong!", Severity.Error);
			throw;
		}
	}

	// Remove Product
	private void RemoveProduct(GenerateBillUIDDataDTO product)
	{
		UIDCollection.RemoveAll(x => x.productCode == product.productCode);

		Elements.Remove(product);

		subTotal = Math.Round(Elements.Sum(e => e.totalPrice), 2);
		TableItems = Elements.Count();
		//GetVat();
	}

	// Goto Print
	private async Task GotoPrint()
	{
		await IJS.InvokeAsync<object>("open", new object[] { $"/invoice-print/{trnCode}", "_blank" });
	}
}
