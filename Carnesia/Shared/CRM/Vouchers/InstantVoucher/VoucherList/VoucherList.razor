@using Carnesia.Domain.CRM.Vouchers.InstantVoucher.VoucherList
@using Carnesia.Domain.Common.POCO
@inject IInstantVoucher _instantVoucher
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudPaper Class="py-16 px-3 ma-2">
	<MudContainer Fixed="true">
		<MudGrid Class="justify-center align-baseline mb-5">
			<MudItem md="4">
				<MudTextField T="String" Label="Voucher Code" Variant="Variant.Text" />
			</MudItem>
			<MudItem md="4">
				<MudSelect T="String" Label="Status" AnchorOrigin="Origin.BottomCenter">
					<MudSelectItem Value="@("All")" />
					<MudSelectItem Value="@("Enabled")" />
					<MudSelectItem Value="@("Disabled")" />
				</MudSelect>
			</MudItem>
			<MudItem md="2">
				<div>
					<MudButton Variant="Variant.Filled" Color="Color.Primary">Filter</MudButton>
				</div>
			</MudItem>
		</MudGrid>
		<MudTable RowsPerPage="25" Items="@Elements" Dense="@tableCommon.Dense" Hover="@tableCommon.Hover" Bordered="@tableCommon.Bordered" Striped="@tableCommon.Striped" Filter="new Func<InstantVoucherListDTO,bool>(FilterFuncInitial)">
			@*<ToolBarContent>
				<MudSpacer />
				<MudSpacer />
				<MudTextField Immediate="true" @bind-Value="tableCommon.SearchTerm" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" />
			</ToolBarContent>*@
			<HeaderContent>
				<MudTh>Code</MudTh>
				<MudTh>Start Date</MudTh>
				<MudTh>End Date</MudTh>
				<MudTh>Minimum Cart Amount</MudTh>
				<MudTh>Discount Type</MudTh>
				<MudTh>Discount Amount</MudTh>
				<MudTh>Up To</MudTh>
				<MudTh>Description</MudTh>
				<MudTh>Created By</MudTh>
				<MudTh>Created At</MudTh>
				<MudTh>Updated By</MudTh>
				<MudTh>Updated At</MudTh>
				<MudTh>Enable</MudTh>
				<MudTh>Action</MudTh>
			</HeaderContent>
			<RowTemplate>
				<MudTd DataLabel="Code">@context.ivCode</MudTd>
				<MudTd DataLabel="Start Date">@context.startDate</MudTd>
				<MudTd DataLabel="End Date">@context.endDate</MudTd>
				<MudTd DataLabel="Minimum Cart Amount">@context.minCartAmount</MudTd>
				<MudTd DataLabel="Discount Type">@context.voucherDiscType</MudTd>
				<MudTd DataLabel="Discount Amount">@context.discAmntOrPercent</MudTd>
				<MudTd DataLabel="Up To">@context.upToDiscAmnt</MudTd>
				<MudTd DataLabel="Description">@context.description</MudTd>
				<MudTd DataLabel="Created By">@context.createdBy</MudTd>
				<MudTd DataLabel="Created At">@context.createdAt</MudTd>
				<MudTd DataLabel="Updated By">@context.updatedBy</MudTd>
				<MudTd DataLabel="Updated At">@context.updatedAt</MudTd>
				<MudTd DataLabel="Enable">
					<MudSwitch @bind-Checked="@context.isEnable" Color="Color.Primary" @onclick="(() => ToggleEnable(context.instantVId))"/>
				</MudTd>
				<MudTd DataLabel="Action">
					<MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="() => DeleteVoucher(context.instantVId)">Delete</MudButton>
				</MudTd>
			</RowTemplate>
			<PagerContent>
				<MudTablePager />
			</PagerContent>
		</MudTable>

		<div class="d-flex flex-wrap mt-4">
			<MudSwitch @bind-Checked="@tableCommon.Hover" Color="Color.Primary">Hover</MudSwitch>
			<MudSwitch @bind-Checked="@tableCommon.Dense" Color="Color.Secondary">Dense</MudSwitch>
			<MudSwitch @bind-Checked="@tableCommon.Striped" Color="Color.Tertiary">Striped</MudSwitch>
			<MudSwitch @bind-Checked="@tableCommon.Bordered" Color="Color.Warning">Bordered</MudSwitch>
		</div>
	</MudContainer>
</MudPaper>

@code {
	// Page On Load
	protected override async Task OnInitializedAsync()
	{
		await GetVouchers();
	}
	// Table Content
	private IEnumerable<InstantVoucherListDTO> Elements = new List<InstantVoucherListDTO>();

	// Table Customaization
	private TableCommon tableCommon = new TableCommon();

	// Get Vouchers
	private async Task GetVouchers()
	{
		Elements = await _instantVoucher.GetAllVouchers();
	}

	// Delete Voucher
	private async Task DeleteVoucher(int id)
	{
		var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
		var dialog = await DialogService.Show<DeleteVoucherModal>("Delete Confirmation", options).Result;

		if (!dialog.Cancelled)
		{
			try
			{
				await _instantVoucher.RemoveVoucher(id);
				Snackbar.Add("Voucher Deleted Successfully!", Severity.Success);
				await GetVouchers();
			}
			catch (Exception)
			{
				Snackbar.Add("Something Went Wrong!", Severity.Error);
				throw;
			}
		}
	}

	// Table Search
	private bool FilterFuncInitial(InstantVoucherListDTO element) => FilterFunc(element, tableCommon.SearchTerm);

	private bool FilterFunc(InstantVoucherListDTO element, string searchString)
	{
		if (string.IsNullOrWhiteSpace(searchString))
			return true;
		if (element.ivCode.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		return false;
	}

	// Toggle Publish
    private async Task ToggleEnable(int id)
    {
        try
        {
            var result = await _instantVoucher.ToggleUse(id);
            if (result)
            {
                Snackbar.Add("Published Changed!", Severity.Success);
                await GetVouchers();
                return;
            }
            Snackbar.Add("Something Went Wrong!", Severity.Error);
        }
        catch (Exception)
        {
            Snackbar.Add("Something Went Wrong!", Severity.Error);
            throw;
        }
    }
}
