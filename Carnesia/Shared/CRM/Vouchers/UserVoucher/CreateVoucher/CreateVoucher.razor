@using Carnesia.Domain.CRM.Vouchers.UserVoucher.CreateVoucher
@using Carnesia.Domain.HRM.User
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IUserVoucher _userVoucher

<MudPaper Class="pa-16 pt-16 ma-2 mt-10">
	<MudContainer Fixed="true">
		<MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
			<MudGrid>
				<MudItem sm="6">
					<MudTextField @bind-Value="FormData.uvCode" Label="Code" Required="true" RequiredError="Code is required!" />
				</MudItem>
				<MudItem sm="6">
					<MudNumericField @bind-Value="FormData.minCartAmount" Label="Minimum Cart Amount" Required="true" RequiredError="Minimum Cart Amount is required!" />
				</MudItem>
				<MudItem sm="6">
					<MudDatePicker Label="Start Date" DateFormat="yyyy-MM-dd" @bind-Text="StartDate" />
				</MudItem>
				<MudItem sm="6">
					<MudTimePicker Label="Start Time" @bind-Time="StartTime" />
				</MudItem>
				<MudItem sm="6">
					<MudDatePicker Label="End Date" DateFormat="yyyy-MM-dd" @bind-Text="EndDate" />
				</MudItem>
				<MudItem sm="6">
					<MudTimePicker Label="End Time" @bind-Time="EndTime" />
				</MudItem>
				<MudItem sm="6">
					<MudSelect @bind-Value="FormData.voucherDiscType" Label="Discount Type" AnchorOrigin="Origin.BottomCenter" Required="true" RequiredError="Discount Type is required!">
						<MudSelectItem Value="@("Cash")" />
						<MudSelectItem Value="@("Percent")" />
					</MudSelect>
				</MudItem>
				<MudItem sm="6">
					<MudNumericField @bind-Value="FormData.discAmntOrPercent" Label="Discount Amount" Required="true" RequiredError="Discount Amount is required!" />
				</MudItem>
				<MudItem sm="6">
					<MudNumericField @bind-Value="FormData.upToDiscAmnt" Label="Up to Discount Amount" Required="true" RequiredError="Up to Discount Amount is required!" />
				</MudItem>
				<MudItem sm="6">
					<MudTextField @bind-Value="FormData.description" Label="Description" Required="true" RequiredError="Description is required!" />
				</MudItem>
			</MudGrid>

			<div class="my-5 d-flex justify-end">
				<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenUserModal">Add User</MudButton>
			</div>

			<MudTable Items="@Users" Dense="true" Hover="true" Striped="true">
				<HeaderContent>
					<MudTh>Name</MudTh>
					<MudTh>Phone Number</MudTh>
					<MudTh>Email</MudTh>
					<MudTh>Customer Id</MudTh>
					<MudTh>Action</MudTh>
				</HeaderContent>
				<RowTemplate>
					<MudTd DataLabel="Name">@context.name</MudTd>
					<MudTd DataLabel="Phone Number">@context.phone</MudTd>
					<MudTd DataLabel="Email">@context.email</MudTd>
					<MudTd DataLabel="Customer Id">@context.customerId</MudTd>
					<MudTd DataLabel="Action">
						<MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="() => RemoveUser(context)">Delete</MudButton>
					</MudTd>
				</RowTemplate>
			</MudTable>

			<div class="d-flex align-center justify-space-between mt-6">
				<MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto" OnClick="CreateNewVoucher">Submit</MudButton>
			</div>
		</MudForm>
		<br/>
		<br/>
		<br/>
		<br/>
		<br/>
		<br/>
		<br/>
		<br/>
		<br/>
	</MudContainer>
</MudPaper>

@code {
	// New Date Time
	public static string TodayDate = DateTime.Now.ToString("yyyy-MM-dd");

	// Form Ref
	bool success;
	string[] errors = { };
	MudForm form;

	// Selected User
	private List<UsersDTO> Users = new List<UsersDTO>();

	// Form Data
	private CreateUserVoucherDTO FormData = new CreateUserVoucherDTO();


	// Start End Date
	private string StartDate { get; set; } = TodayDate;
	private string EndDate { get; set; } = TodayDate;
	private TimeSpan? StartTime = new TimeSpan();
	private TimeSpan? EndTime = new TimeSpan();

	private List<CustomersDTO> UserIDS = new List<CustomersDTO>();

	// Create Voucher
	private async Task CreateNewVoucher()
	{
		if (String.IsNullOrEmpty(StartDate) || String.IsNullOrEmpty(EndDate))
		{
			Snackbar.Add("Start & End Date is required!", Severity.Error);
			return;
		}

		if (Users.Count() <= 0)
		{
			Snackbar.Add("Please Add Users!", Severity.Error);
			return;
		}



		foreach (var item in Users)
		{
			UserIDS.Add(new CustomersDTO() { customerGuId = item.id });
		}

		FormData.startDate = $"{StartDate}T{StartTime}.000Z";
		FormData.endDate = $"{EndDate}T{EndTime}.000Z";
		FormData.numOfVoucher = Users.Count();
		FormData.customers = UserIDS;

		try
		{
			var result = await _userVoucher.CreateUserVoucher(FormData);
			if (result)
			{
				Snackbar.Add("New Voucher Created Successfully!", Severity.Success);
				form.Reset();
				StartDate = TodayDate;
				EndDate = TodayDate;
				StartTime = new TimeSpan();
				EndTime = new TimeSpan();
				UserIDS.Clear();
				Users.Clear();
				return;
			}
			Snackbar.Add("Something Went Wrong!", Severity.Error);
		}
		catch (Exception)
		{
			Snackbar.Add("Something Went Wrong!", Severity.Error);
			throw;
		}
	}

	// Add User Modal
	private async Task OpenUserModal()
	{
		var parameters = new DialogParameters();
		parameters.Add("FormData", new UsersDTO());

		var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
		var dialog = await DialogService.Show<AddUserModal>("Add User", parameters, options).Result;

		if (dialog.Data != null)
		{
			UsersDTO newUser = dialog.Data as UsersDTO;

			Users.Add(newUser);
		}
	}

	// Remove 
	private void RemoveUser(UsersDTO user)
	{
		Users.Remove(user);
	}
}
