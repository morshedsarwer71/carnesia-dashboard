@using Carnesia.Domain.CRM.Vouchers.ProductVoucher.VoucherList
@using Carnesia.Domain.Common.POCO
@inject IProductVoucher _productVoucher
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudPaper Class="py-16 px-3 ma-2">
	<MudContainer Fixed="true">
		<MudTable RowsPerPage="25" Items="@Elements" Dense="@tableCommon.Dense" Hover="@tableCommon.Hover" Bordered="@tableCommon.Bordered" Striped="@tableCommon.Striped" Filter="new Func<ProductVoucherListDTO,bool>(FilterFuncInitial)">
			<ToolBarContent>
				<MudSpacer />
				<MudSpacer />
				<MudTextField Immediate="true" @bind-Value="tableCommon.SearchTerm" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" />
			</ToolBarContent>
			<HeaderContent>
				<MudTh></MudTh>
				<MudTh>Code</MudTh>
				<MudTh>Start Date</MudTh>
				<MudTh>End Date</MudTh>
				<MudTh>Number of Vouchers</MudTh>
				<MudTh>Number of Used Vouchers</MudTh>
				<MudTh>Minimum Cart Amount</MudTh>
				<MudTh>Discount Type</MudTh>
				<MudTh>Discount Amount</MudTh>
				<MudTh>Up To</MudTh>
				<MudTh>Description</MudTh>
				<MudTh>Enable</MudTh>
				<MudTh>Action</MudTh>
			</HeaderContent>
			<RowTemplate>
				<MudTd DataLabel="">
					@if (!context.showDetails)
					{
						<MudIconButton Icon="@Icons.Material.Filled.Add" aria-label="Show" OnClick="() => ShowDetails(context.productVId)" />
					}
					else if (context.showDetails)
					{
						<MudIconButton Icon="@Icons.Filled.Minimize" aria-label="Hide" OnClick="() => ShowDetails(context.productVId)" />
					}
				</MudTd>
				<MudTd DataLabel="Code">@context.pvCode</MudTd>
				<MudTd DataLabel="Start Date">@context.startDate</MudTd>
				<MudTd DataLabel="End Date">@context.endDate</MudTd>
				<MudTd DataLabel="Number of Vouchers">@context.numOfVoucher</MudTd>
				<MudTd DataLabel="Number of Used Vouchers">@context.numberOfUsedVoucher</MudTd>
				<MudTd DataLabel="Minimum Cart Amount">@context.minCartAmount</MudTd>
				<MudTd DataLabel="Discount Type">@context.voucherDiscType</MudTd>
				<MudTd DataLabel="Discount Amount">@context.discAmntOrPercent</MudTd>
				<MudTd DataLabel="Up To">@context.upToDiscAmnt</MudTd>
				<MudTd DataLabel="Description">@context.description</MudTd>
				<MudTd DataLabel="Enable">
					<MudSwitch @bind-Checked="@context.isEnable" Color="Color.Primary" @onclick="(() => ToggleEnable(context.productVId))" />
				</MudTd>
				<MudTd DataLabel="Action">
					<MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="() => DeleteVoucher(context.productVId)">Delete</MudButton>
				</MudTd>
			</RowTemplate>
			<ChildRowContent>
				@if (context.showDetails)
				{
					<td colspan="15">
						<MudCard Elevation="0">
							<MudCardContent Class="pa-0">
								<MudTable Items="@context.products" Bordered="true" Striped="true" Dense="true" Context="DetailsContext" Hover="true" Elevation="0">
									<HeaderContent>
										<MudTh>Product Name</MudTh>
										<MudTh>Product Code</MudTh>
										<MudTh>MRP</MudTh>
									</HeaderContent>
									<RowTemplate>
										<MudTd DataLabel="Product Name">@DetailsContext.productName</MudTd>
										<MudTd DataLabel="Product Code">@DetailsContext.productCode</MudTd>
										<MudTd DataLabel="MRP">@DetailsContext.mrp</MudTd>
									</RowTemplate>
								</MudTable>
							</MudCardContent>
						</MudCard>
					</td>
				}
			</ChildRowContent>
			<PagerContent>
				<MudTablePager />
			</PagerContent>
		</MudTable>

		<div class="d-flex flex-wrap mt-4">
			<MudSwitch @bind-Checked="@tableCommon.Hover" Color="Color.Primary">Hover</MudSwitch>
			<MudSwitch @bind-Checked="@tableCommon.Dense" Color="Color.Secondary">Dense</MudSwitch>
			<MudSwitch @bind-Checked="@tableCommon.Striped" Color="Color.Tertiary">Striped</MudSwitch>
			<MudSwitch @bind-Checked="@tableCommon.Bordered" Color="Color.Warning">Bordered</MudSwitch>
		</div>
	</MudContainer>
</MudPaper>

@code {
	// Page On Load
	protected override async Task OnInitializedAsync()
	{
		await GetVouchers();
	}
	// Table Content
	private IEnumerable<ProductVoucherListDTO> Elements = new List<ProductVoucherListDTO>();

	// Table Customaization
	private TableCommon tableCommon = new TableCommon();

	// Get Vouchers
	private async Task GetVouchers()
	{
		Elements = await _productVoucher.GetAllVouchers();
	}

	// Delete Voucher
	private async Task DeleteVoucher(int id)
	{
		var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
		var dialog = await DialogService.Show<DeleteVoucherModal>("Delete Confirmation", options).Result;

		if (!dialog.Cancelled)
		{
			try
			{
				await _productVoucher.RemoveVoucher(id);
				Snackbar.Add("Voucher Deleted Successfully!", Severity.Success);
				await GetVouchers();
			}
			catch (Exception)
			{
				Snackbar.Add("Something Went Wrong!", Severity.Error);
				throw;
			}
		}
	}

	// Table Search
	private bool FilterFuncInitial(ProductVoucherListDTO element) => FilterFunc(element, tableCommon.SearchTerm);

	private bool FilterFunc(ProductVoucherListDTO element, string searchString)
	{
		if (string.IsNullOrWhiteSpace(searchString))
			return true;
		if (element.pvCode.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		return false;
	}

	// Toggle Publish
	private async Task ToggleEnable(int id)
	{
		try
		{
			var result = await _productVoucher.ToggleUse(id);
			if (result)
			{
				Snackbar.Add("Published Changed!", Severity.Success);
				await GetVouchers();
				return;
			}
			Snackbar.Add("Something Went Wrong!", Severity.Error);
		}
		catch (Exception)
		{
			Snackbar.Add("Something Went Wrong!", Severity.Error);
			throw;
		}
	}

	// Show Details
	private void ShowDetails(int id)
	{
		ProductVoucherListDTO tmpElements = Elements.First(f => f.productVId == id);
		tmpElements.showDetails = !tmpElements.showDetails;
	}

}
