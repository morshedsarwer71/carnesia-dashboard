@using Carnesia.Domain.CMS.Category
@inject ICategory _category
@inject IBase64 _base64

<MudDialog>
    <DialogContent>
        <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                    <MudTextField @bind-Value="FormData.parentCat" Immediate="true" Label="Category Name" Required="true" RequiredError="Category Name is required!"/>

                    <InputFile id="category-image" OnChange="@ValidateImage" hidden accept=".webp" />
                    <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Filled.CloudUpload" for="category-image" Class="mt-5">
                        Upload Category Images
                    </MudButton>
                    <MudText>100 * 100(Max 50Kb)</MudText>

                    <br/>
                    <MudText Color="Color.Error">@ImageError</MudText>
                    <MudImage Src="@($"data:image/webp;base64,{FormData.base64Attch}")" Alt="" Elevation="25" Class="rounded-lg mt-5" Style="width:20%" />

                    <div class="d-flex justify-end my-5">
                        <MudButton Variant="Variant.Filled" Color="Color.Warning" Disabled="@(!success)" Class="ml-auto" OnClick="Submit">Update</MudButton>
                    </div>
            </MudForm>
    </DialogContent>
</MudDialog>

@code {
    // Page On Load
    protected override async Task OnInitializedAsync()
    {
        await GetParent();
    }

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public int parentId { get; set; }

    [Parameter]
    public ParentUpdateDTO FormData{get;set;} = new ParentUpdateDTO();

    // Get Parent
    private async Task GetParent()
    {
        FormData = await _category.GetParentById(parentId);
    }

    // Submit Close
    void Submit() => MudDialog.Close(DialogResult.Ok<ParentUpdateDTO>(FormData));

    // Image Error
    private string ImageError { get; set; }

    // Image Validation
    private async Task ValidateImage(InputFileChangeEventArgs ImageFile)
    {
        ImageError = String.Empty;
        try
        {
            FormData.base64Attch = await _base64.ConvertToBase64(51200, 100, 100, ImageFile);
        }
        catch(Exception e)
        {
            ImageError = e.Message;
        }
    }

    // Form Ref
    bool success;
    string[] errors = { };
    MudForm form;
}
