@using Carnesia.Domain.CMS.ToBagList
@using Carnesia.Domain.CMS.CreateToBag
@using Carnesia.Domain.Common.POCO
@using Carnesia.Shared.CommonComponents
@using Carnesia.Shared.CMS.CreateToBag
@inject IToBag _toBag
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudPaper Class="pa-16 ma-2">
	<MudContainer Fixed="true">
		<MudTable Items="@Elements" Dense="@tableCommon.Dense" Hover="@tableCommon.Hover" Bordered="@tableCommon.Bordered" Striped="@tableCommon.Striped" Filter="new Func<ToBagListSectionDTO,bool>(FilterFuncInitial)">
            <ToolBarContent>
                <MudSpacer />
                <MudSpacer />
                <MudTextField Immediate="true" @bind-Value="tableCommon.SearchTerm" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"/>
            </ToolBarContent>
            <HeaderContent>
                <MudTh></MudTh>
                <MudTh>Section Name</MudTh>
                <MudTh>Allignment</MudTh>
                <MudTh>publish</MudTh>
                <MudTh>Action</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="">
                    @if (!context.ShowDetails)
					{
						<MudIconButton Icon="@Icons.Material.Filled.Add" aria-label="Show" OnClick="() => ShowToBag(context.id)" />
					}
					else if (context.ShowDetails)
					{
						<MudIconButton Icon="@Icons.Filled.Minimize" aria-label="Hide" OnClick="() => ShowToBag(context.id)" />
					}
                </MudTd>
                <MudTd DataLabel="Section Name">@context.sectionName</MudTd>
                <MudTd DataLabel="Allignment">@context.allignment</MudTd>
                <MudTd DataLabel="Publish">
                     <MudSwitch @bind-Checked="@context.isPublished" Color="Color.Primary" @onclick="(() => TogglePublishSection(context.id))"/>
                </MudTd>
				<MudTd DataLabel="Action">
                     <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="() => DeleteSection(context.id)">Delete</MudButton>
                </MudTd>
            </RowTemplate>
            <ChildRowContent>
				@if (context.ShowDetails)
				{
					<td colspan="5">
						<MudCard Elevation="0">
							<MudCardContent Class="pa-0">
								<MudTable Items="@context.tobags" Bordered="true" Dense="true" Context="DetailsContext" Hover="true" Elevation="0">
								   <HeaderContent>
										<MudTh>Name</MudTh>
										<MudTh>Image</MudTh>
										<MudTh>Link</MudTh>
										<MudTh>Action</MudTh>
								   </HeaderContent>
								   <RowTemplate>
										<MudTd DataLabel="Name">@DetailsContext.name</MudTd>
										<MudTd DataLabel="Image">
											<MudImage @onclick="() => ShowImage(DetailsContext.imageUrl)" Src="@($"https://carnesiaapi.bespokeit.io/{DetailsContext.imageUrl}")" Alt="@DetailsContext.name" Elevation="25" Class="rounded-lg" Style="width:50px" />
										</MudTd>
										<MudTd DataLabel="Link">@DetailsContext.link</MudTd>
										<MudTd DataLabel="Action">
											<MudButton Variant="Variant.Filled" Color="Color.Warning">Edit</MudButton>
										</MudTd>
								   </RowTemplate>
								</MudTable>
							</MudCardContent>
						</MudCard>
					</td>
				}
			</ChildRowContent>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>

        <div class="d-flex flex-wrap mt-4">
            <MudSwitch @bind-Checked="@tableCommon.Hover" Color="Color.Primary">Hover</MudSwitch>
            <MudSwitch @bind-Checked="@tableCommon.Dense" Color="Color.Secondary">Dense</MudSwitch>
            <MudSwitch @bind-Checked="@tableCommon.Striped" Color="Color.Tertiary">Striped</MudSwitch>
            <MudSwitch @bind-Checked="@tableCommon.Bordered" Color="Color.Warning">Bordered</MudSwitch>
        </div>
	</MudContainer>
</MudPaper>

@code {
	// Page On Load
	protected override async Task OnInitializedAsync()
	{
		await GetAllToBags();
	}

	// Table Customaization
	private TableCommon tableCommon = new TableCommon();

	// Table Content
	private IEnumerable<ToBagListSectionDTO> Elements = new List<ToBagListSectionDTO>();

	// Get All To Bags
	private async Task GetAllToBags()
	{
		Elements = await _toBag.GetAllToBags();
	}

	// Show Details
	private void ShowToBag(int id)
	{
		ToBagListSectionDTO tmpElements = Elements.First(f => f.id == id);
		tmpElements.ShowDetails = !tmpElements.ShowDetails;
	}

	// Toggle Publish
	private async Task TogglePublishSection(int id)
	{
		try
		{
			await _toBag.PublishToggleSection(id);
			Snackbar.Add("Publish Toggled Successfully!", Severity.Success);
			await GetAllToBags();
		}
		catch (Exception)
		{
			Snackbar.Add("Something Went Wrong!", Severity.Success);
			throw;
		}
	}

	private async Task TogglePublishToBag(int id)
	{
		try
		{
			await _toBag.PublishToggleToBag(id);
			Snackbar.Add("Publish Toggled Successfully!", Severity.Success);
			await GetAllToBags();
		}
		catch (Exception)
		{
			Snackbar.Add("Something Went Wrong!", Severity.Success);
			throw;
		}
	}

	// Table Search
	private bool FilterFuncInitial(ToBagListSectionDTO element) => FilterFunc(element, tableCommon.SearchTerm);

	private bool FilterFunc(ToBagListSectionDTO element, string searchString)
	{
		if (string.IsNullOrWhiteSpace(searchString))
			return true;
		if (element.sectionName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		return false;
	}

	// Show Image
	private void ShowImage(string url)
	{
		var parameters = new DialogParameters();
		parameters.Add("ImageUrl", url);

		var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
		DialogService.Show<ShowImageModal>("Image", parameters, options);
	}

	// Update Section Modal
	private async Task OpenSectionModal(ToBagListSectionDTO Section)
	{
		var parameters = new DialogParameters();
		parameters.Add("FormData", new ToBagListSectionDTO(){
			sectionName = Section.sectionName,
			isPublished = Section.isPublished,
			id = Section.id
		});

		var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
		var dialog = await DialogService.Show<UpdateSectionModal>("Update Section", parameters, options).Result;

		if (dialog.Data != null)
		{
			ToBagListSectionDTO newSection = dialog.Data as ToBagListSectionDTO;

			try
			{
				await _toBag.UpdateSection(newSection);
				Snackbar.Add("Section Updated Successfully!", Severity.Success);
				await GetAllToBags();
			}
			catch (Exception)
			{
				Snackbar.Add("Something Went Wrong!", Severity.Error);
				throw;
			}
		}
	}

	// Delete Section
	private async Task DeleteSection(int id)
	{
		var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
		var dialog = await DialogService.Show<DeleteConfirmationModal>("Delete Section", options).Result;


		Console.WriteLine(dialog.Cancelled);
		if (!dialog.Cancelled)
		{
			try
			{
				var result = await _toBag.DeleteSection(id);
				if (result)
				{
					Snackbar.Add("Section Deleted Successfully!", Severity.Success);
					await GetAllToBags();
					return;
				}
				Snackbar.Add("Something Went Wrong!", Severity.Error);
			}
			catch (Exception)
			{
				Snackbar.Add("Something Went Wrong!", Severity.Error);
				throw;
			}
		}
	}

	// Add To Bag
	private async Task AddToBagModal(string sectionCode)
	{
		var parameters = new DialogParameters();
		parameters.Add("FormData", new AddToBagDTO()
		{
			sectionCode = sectionCode
		});

		var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
		var dialog = await DialogService.Show<AddToBagModal>("Delete Section", parameters, options).Result;

		if (dialog.Data != null)
        {
            AddToBagDTO newToBag = dialog.Data as AddToBagDTO;

            try
            {
                await _toBag.AddSingleToBag(newToBag);
                Snackbar.Add("New To Bag Created Successfully!", Severity.Success);
                await OnInitializedAsync();
            }
            catch (Exception)
            {
                Snackbar.Add("Something Went Wrong!", Severity.Error);
                throw;
            }
        }
	}

	// Update Thumb
    //private async Task UpdateThumb()
    //{
    //    var parameters = new DialogParameters();
    //    parameters.Add("FormData", new AddToBagDTO());

    //    var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
    //    var dialog = await DialogService.Show<AddToBagModal>("Add New To Bag", parameters, options).Result;

    //    if (dialog.Data != null)
    //    {
    //        AddToBagDTO newToBag = dialog.Data as AddToBagDTO;

    //        ToBags.Add(newToBag);
    //    }
    //}
}