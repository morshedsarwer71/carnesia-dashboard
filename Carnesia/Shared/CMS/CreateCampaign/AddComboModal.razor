@using Carnesia.Domain.CMS.ComboProducts
@using Carnesia.Domain.CMS.Campaign
@inject ICombo _combo
<MudDialog>
	<DialogContent>
		<MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
			<MudSelect @bind-Value="comboValue" Label="Combo" AnchorOrigin="Origin.BottomCenter">
				<MudSelectItem Value="0">Select Combo</MudSelectItem>
				@foreach (var item in combos)
				{
					<MudSelectItem Value="item.comboId">@item.comboName</MudSelectItem>
				}
			</MudSelect>
			<MudNumericField @bind-Value="FormData.stock" Label="Stock" Variant="Variant.Text" Required="true" RequiredError="Stock is required!" />
			<div class="d-flex justify-end my-5">
				<MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="!success || comboValue == 0" Class="ml-auto" OnClick="SetCombo">Submit</MudButton>
			</div>
		</MudForm>
	</DialogContent>
</MudDialog>

@code {
	// Modal On Load
	protected override async Task OnInitializedAsync()
	{
		await GetCombos();
	}

	[CascadingParameter] MudDialogInstance MudDialog { get; set; }

	[Parameter]
	public AddCampaignProductDTO FormData { get; set; } = new AddCampaignProductDTO();

	// Form Ref
	bool success;
	string[] errors = { };
	MudForm form;

	// Combo Value
	private int comboValue { get; set; }

	// Combo Products
	private List<CombosInTimeDTO> combos = new List<CombosInTimeDTO>();

	// Get Combos
	private async Task GetCombos()
	{
		try
		{
			combos = await _combo.GetCombosInTime();
		}
		catch (Exception e)
		{
			Console.WriteLine(e.Message);
		}
	}

	// Submit Close
	void Submit() => MudDialog.Close(DialogResult.Ok<AddCampaignProductDTO>(FormData));

	// Set Combo
	private async Task SetCombo()
	{
		var combo = combos.FirstOrDefault(x => x.comboId == comboValue);

		FormData.isCombo = true;
		FormData.comboId = comboValue;
		FormData.productName = combo.comboName;
		FormData.regularPrice = combo.regularPrice;
		FormData.discPrice = combo.comboPrice;

		Submit();
	}
}
