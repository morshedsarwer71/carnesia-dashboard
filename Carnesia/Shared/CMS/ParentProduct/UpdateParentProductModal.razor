@using Carnesia.Domain.CMS.ParentProduct
@inject IBrand _brand
@inject IEncodeDecode _encodeDecode


<MudDialog>
    <DialogContent>
        <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors" Style="max-height:90vh; overflow-y: scroll">
                <MudTextField @bind-Value="FormData.name" Label="Product Name" Required="true" RequiredError="Product Name is required!"/>

                <MudAutocomplete @bind-Value="FormData.brand" Label="Brand" ResetValueOnEmptyText="true" Required="true" SearchFunc="@BrandSearch" />
                <MudAutocomplete @bind-Value="FormData.originId" Label="Origin" SearchFunc="@CountrySearch" ResetValueOnEmptyText="true" Required="true" Class="mb-3" />

                <BlazoredTextEditor @ref="@QuillNative" Placeholder="Product Description...">
                    <ToolbarContent>
                        <span class="ql-formats">
                            <select class="ql-font">
                                <option selected=""></option>
                                <option value="serif"></option>
                                <option value="monospace"></option>
                            </select>
                            <select class="ql-size">
                                <option value="small"></option>
                                <option selected=""></option>
                                <option value="large"></option>
                                <option value="huge"></option>
                            </select>
                        </span>
                        <span class="ql-formats">
                            <button class="ql-bold"></button>
                            <button class="ql-italic"></button>
                            <button class="ql-underline"></button>
                            <button class="ql-strike"></button>
                        </span>
                        <span class="ql-formats">
                            <select class="ql-color"></select>
                            <select class="ql-background"></select>
                        </span>
                        <span class="ql-formats">
                            <button class="ql-list" value="ordered"></button>
                            <button class="ql-list" value="bullet"></button>
                            <button class="ql-indent" value="-1"></button>
                            <button class="ql-indent" value="+1"></button>
                            <select class="ql-align">
                                <option selected=""></option>
                                <option value="center"></option>
                                <option value="right"></option>
                                <option value="justify"></option>
                            </select>
                        </span>
                        <span class="ql-formats">
                            <button class="ql-link"></button>
                        </span>
                    </ToolbarContent>
                </BlazoredTextEditor>

                <div class="d-flex justify-end my-5">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="SubmitParent">Submit</MudButton>
                </div>
        </MudForm>
    </DialogContent>
</MudDialog>

@code {
    // Rich Text
    BlazoredTextEditor QuillNative; 

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public ParentProductDTO FormData{get;set;} = new ParentProductDTO();

    private string DecodedDescription { get; set; }

    // Page On Load
    protected override async Task OnInitializedAsync()
    {
        await GetBrands();

        DecodedDescription = await _encodeDecode.DecodeBase64ToString(FormData.description); 
        await this.QuillNative.LoadHTMLContent(DecodedDescription);
        
    }



    // Brands Array
    private string[] Brands;

    private async Task GetBrands()
    {
        Brands = await _brand.GetBrandsNameAsString();
    }

    // Autocomplite Search Func for Brand
    private async Task<IEnumerable<string>> BrandSearch(string value)
    {
        return string.IsNullOrEmpty(value) ? Brands : Brands.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    // Country Array
    private string[] countries = {"Afghanistan", "Albania", "Algeria", "American Samoa", "Andorra", "Angola", "Anguilla", "Antarctica", "Antigua and Barbuda", "Argentina", "Armenia", "Aruba", "Australia", "Austria", "Azerbaijan", "Bahamas", "Bahrain", "Bangladesh", "Barbados", "Belarus", "Belgium", "Belize", "Benin", "Bermuda", "Bhutan", "Bolivia", "Bosnia and Herzegowina", "Botswana", "Bouvet Island", "Brazil", "British Indian Ocean Territory", "Brunei Darussalam", "Bulgaria", "Burkina Faso", "Burundi", "Cambodia", "Cameroon", "Canada", "Cape Verde", "Cayman Islands", "Central African Republic", "Chad", "Chile", "China", "Christmas Island", "Cocos (Keeling) Islands", "Colombia", "Comoros", "Congo", "Congo, the Democratic Republic of the", "Cook Islands", "Costa Rica", "Cote d'Ivoire", "Croatia (Hrvatska)", "Cuba", "Cyprus", "Czech Republic", "Denmark", "Djibouti", "Dominica", "Dominican Republic", "East Timor", "Ecuador", "Egypt", "El Salvador", "Equatorial Guinea", "Eritrea", "Estonia", "Ethiopia", "Falkland Islands (Malvinas)", "Faroe Islands", "Fiji", "Finland", "France", "France Metropolitan", "French Guiana", "French Polynesia", "French Southern Territories", "Gabon", "Gambia", "Georgia", "Germany", "Ghana", "Gibraltar", "Greece", "Greenland", "Grenada", "Guadeloupe", "Guam", "Guatemala", "Guinea", "Guinea-Bissau", "Guyana", "Haiti", "Heard and Mc Donald Islands", "Holy See (Vatican City State)", "Honduras", "Hong Kong", "Hungary", "Iceland", "India", "Indonesia", "Iran", "Iraq", "Ireland", "Israel", "Italy", "Jamaica", "Japan", "Jordan", "Kazakhstan", "Kenya", "Kiribati", "Kuwait", "Kyrgyzstan", "Lao, People's Democratic Republic", "Latvia", "Lebanon", "Lesotho", "Liberia", "Libyan Arab Jamahiriya", "Liechtenstein", "Lithuania", "Luxembourg", "Macau", "Macedonia, The Former Yugoslav Republic of", "Madagascar", "Malawi", "Malaysia", "Maldives", "Mali", "Malta", "Marshall Islands", "Martinique", "Mauritania", "Mauritius", "Mayotte", "Mexico", "Micronesia, Federated States of", "Moldova, Republic of", "Monaco", "Mongolia", "Montserrat", "Morocco", "Mozambique", "Myanmar", "Namibia", "Nauru", "Nepal", "Netherlands", "Netherlands Antilles", "New Caledonia", "New Zealand", "Nicaragua", "Niger", "Nigeria", "Niue", "Norfolk Island", "North Korea", "Northern Mariana Islands", "Norway", "Oman", "Pakistan", "Palau", "Panama", "Papua New Guinea", "Paraguay", "Peru", "Philippines", "Pitcairn", "Poland", "Portugal", "Puerto Rico", "Qatar", "Reunion", "Romania", "Russian Federation", "Rwanda", "Saint Kitts and Nevis", "Saint Lucia", "Saint Vincent and the Grenadines", "Samoa", "San Marino", "Sao Tome and Principe", "Saudi Arabia", "Senegal", "Seychelles", "Sierra Leone", "Singapore", "Slovakia (Slovak Republic)", "Slovenia", "Solomon Islands", "Somalia", "South Africa", "South Korea", "South Georgia and the South Sandwich Islands", "Spain", "Sri Lanka", "St. Helena", "St. Pierre and Miquelon", "Sudan", "Suriname", "Svalbard and Jan Mayen Islands", "Swaziland", "Sweden", "Switzerland", "Syrian Arab Republic", "Taiwan, Province of China", "Tajikistan", "Tanzania, United Republic of", "Thailand", "Togo", "Tokelau", "Tonga", "Trinidad and Tobago", "Tunisia", "Turkey", "Turkmenistan", "Turks and Caicos Islands", "Tuvalu", "Uganda", "Ukraine", "United Arab Emirates", "United Kingdom", "United States", "United States Minor Outlying Islands", "Uruguay", "Uzbekistan", "Vanuatu", "Venezuela", "Vietnam", "Virgin Islands (British)", "Virgin Islands (U.S.)", "Wallis and Futuna Islands", "Western Sahara", "Yemen", "Yugoslavia", "Zambia", "Zimbabwe"};

    // Search Country
    private async Task<IEnumerable<string>> CountrySearch(string value)
    {
        return string.IsNullOrEmpty(value) ? countries : countries.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    // Update Parent Product
    private async Task SubmitParent()
    {
        // Temp
        var Temp_Des = await this.QuillNative.GetHTML();

        // Brand ID
        var brand = await _brand.GetBrand(FormData.brand);
        FormData.brandID = brand.brandId;

        // Description
        FormData.description = await _encodeDecode.EncodeStringToBase64(Temp_Des);

        Submit();

    }

    // Submit Close
    void Submit() => MudDialog.Close(DialogResult.Ok<ParentProductDTO>(FormData));

    // Form Ref
    bool success;
    string[] errors = { };
    MudForm form;
}
