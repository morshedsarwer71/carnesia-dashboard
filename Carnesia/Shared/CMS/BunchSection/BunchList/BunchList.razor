@using Carnesia.Domain.CMS.BunchSection
@using Carnesia.Domain.Common.POCO
@using Carnesia.Shared.CommonComponents
@using Carnesia.Shared.CMS.ToBag.ToBagList
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IBunchSection _bunchSection

<MudPaper Class="pa-16 ma-2">
	<MudContainer Fixed="true">
		<MudTable Items="@Elements" Dense="@tableCommon.Dense" Hover="@tableCommon.Hover" Bordered="@tableCommon.Bordered" Striped="@tableCommon.Striped" Filter="new Func<BunchSectionListDTO,bool>(FilterFuncInitial)">
			<ToolBarContent>
				<MudSpacer />
				<MudSpacer />
				<MudTextField Immediate="true" @bind-Value="tableCommon.SearchTerm" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" />
			</ToolBarContent>
			<HeaderContent>
				<MudTh></MudTh>
				<MudTh>Section Name</MudTh>
				<MudTh>Allignment</MudTh>
				<MudTh>Home</MudTh>
				<MudTh>Action</MudTh>
			</HeaderContent>
			<RowTemplate>
				<MudTd DataLabel="">
					@if (!context.ShowDetails)
					{
						<MudIconButton Icon="@Icons.Material.Filled.Add" aria-label="Show" OnClick="() => ShowToBag(context.id)" />
					}
					else if (context.ShowDetails)
					{
						<MudIconButton Icon="@Icons.Filled.Minimize" aria-label="Hide" OnClick="() => ShowToBag(context.id)" />
					}
				</MudTd>
				<MudTd DataLabel="Section Name">@context.sectionName</MudTd>
				<MudTd DataLabel="Allignment">@context.allignment</MudTd>
				<MudTd DataLabel="Home">
					<MudSwitch @bind-Checked="@context.isHome" Color="Color.Primary" @onclick="() => ToggleHome(context.id)" />
				</MudTd>
				<MudTd DataLabel="Action">
					<MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="() => DeleteSection(context.id)">Delete</MudButton>
				</MudTd>
			</RowTemplate>
			<ChildRowContent>
				@if (context.ShowDetails)
				{
					<td colspan="4">
						<MudCard Elevation="0">
							<MudCardContent Class="pa-0">
								<MudTable Items="@context.bunchThums" Bordered="true" Dense="true" Context="DetailsContext" Hover="true" Elevation="0">
									<HeaderContent>
										<MudTh>Name</MudTh>
										<MudTh>Image</MudTh>
										<MudTh>Link</MudTh>
										<MudTh>Action</MudTh>
									</HeaderContent>
									<RowTemplate>
										<MudTd DataLabel="Name">@DetailsContext.name</MudTd>
										<MudTd DataLabel="Image">
											<MudImage @onclick="() => ShowImage(DetailsContext.imageUrl)" Src="@($"https://localhost:7090/{DetailsContext.imageUrl}")" Alt="@DetailsContext.name" Elevation="25" Class="rounded-lg" Style="width:50px" />
										</MudTd>
										<MudTd DataLabel="Link">@DetailsContext.link</MudTd>
										<MudTd DataLabel="Link">
											<MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="() => OpenUpdateThumbModal(DetailsContext.id, context.allignment)">Edit</MudButton>
										</MudTd>
									</RowTemplate>
								</MudTable>
							</MudCardContent>
						</MudCard>
					</td>
				}
			</ChildRowContent>
			<PagerContent>
				<MudTablePager />
			</PagerContent>
		</MudTable>

		<div class="d-flex flex-wrap mt-4">
			<MudSwitch @bind-Checked="@tableCommon.Hover" Color="Color.Primary">Hover</MudSwitch>
			<MudSwitch @bind-Checked="@tableCommon.Dense" Color="Color.Secondary">Dense</MudSwitch>
			<MudSwitch @bind-Checked="@tableCommon.Striped" Color="Color.Tertiary">Striped</MudSwitch>
			<MudSwitch @bind-Checked="@tableCommon.Bordered" Color="Color.Warning">Bordered</MudSwitch>
		</div>
	</MudContainer>
</MudPaper>

@code {
	// Page On Load
	protected override async Task OnInitializedAsync()
	{
		await GetAllBunchSections();
	}

	// Table Customaization
	private TableCommon tableCommon = new TableCommon();

	// Table Content
	private List<BunchSectionListDTO> Elements = new List<BunchSectionListDTO>();

	// Get All To Bags
	private async Task GetAllBunchSections()
	{
		Elements = await _bunchSection.GetAllBunchSections();
	}

	// Show Details
	private void ShowToBag(int id)
	{
		BunchSectionListDTO tmpElements = Elements.First(f => f.id == id);
		tmpElements.ShowDetails = !tmpElements.ShowDetails;
	}

	// Table Search
	private bool FilterFuncInitial(BunchSectionListDTO element) => FilterFunc(element, tableCommon.SearchTerm);

	private bool FilterFunc(BunchSectionListDTO element, string searchString)
	{
		if (string.IsNullOrWhiteSpace(searchString))
			return true;
		if (element.sectionName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		return false;
	}

	// Show Image
	private void ShowImage(string url)
	{
		var parameters = new DialogParameters();
		parameters.Add("ImageUrl", url);

		var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
		DialogService.Show<ShowImageModal>("Image", parameters, options);
	}

	// Delete Section
	private async Task DeleteSection(int id)
	{
		var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
		var dialog = await DialogService.Show<DeleteConfirmationModal>("Delete Section", options).Result;


		Console.WriteLine(dialog.Cancelled);
		if (!dialog.Cancelled)
		{
			try
			{
				var result = await _bunchSection.DeleteBunchSection(id);
				if (result)
				{
					Snackbar.Add("Section Deleted Successfully!", Severity.Success);
					await GetAllBunchSections();
					return;
				}
				Snackbar.Add("Something Went Wrong!", Severity.Error);

			}
			catch (Exception)
			{
				Snackbar.Add("Something Went Wrong!", Severity.Error);
				throw;
			}
		}
	}

	// Update Thumb
	private async Task OpenUpdateThumbModal(int id, string allignment)
	{
		var parameters = new DialogParameters();
		parameters.Add("FormData", new BunchThumDTO() { id = id });
		parameters.Add("Allignment", allignment);

		var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
		var dialog = await DialogService.Show<EditBunchThumbModal>("Update New Thumb", parameters, options).Result;

		if (dialog.Data != null)
		{
			BunchThumDTO newToBag = dialog.Data as BunchThumDTO;

			try
			{
				var result = await _bunchSection.UpdateThumb(newToBag);

				if (result)
				{
					Snackbar.Add("Thumb Updated Successfully!", Severity.Success);
					await GetAllBunchSections();
					return;
				}
				Snackbar.Add("Something Went Wrong!", Severity.Error);
			}
			catch (Exception)
			{
				Snackbar.Add("Something Went Wrong!", Severity.Error);
				throw;
			}
		}
	}

	// Toggle Home View
	private async Task ToggleHome(int id)
	{
		try
		{
			var result = await _bunchSection.ToggleHomePlacement(id);

			if (result)
			{
				Snackbar.Add("Section Toggled Successfully!", Severity.Success);
				await GetAllBunchSections();
				return;
			}
			Snackbar.Add("Something Went Wrong!", Severity.Error);
		}
		catch (Exception)
		{
			Snackbar.Add("Something Went Wrong!", Severity.Error);
			throw;
		}
	}

}
