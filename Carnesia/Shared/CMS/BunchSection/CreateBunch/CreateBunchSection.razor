@using Carnesia.Domain.CMS.BunchSection
@inject IBunchSection _bunchSection
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudPaper Class="pa-16 ma-2">
	<MudContainer Fixed="true">
		<MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudGrid Class="justify-center">
                    <MudItem sm="6">
                        <MudTextField @bind-Value="FormData.sectionName" Label="Section Name" Required="true" RequiredError="Section name is required!"/>
                    </MudItem>
                    <MudItem sm="6">
                        <MudSelect @bind-Value="FormData.allignment" @onblur="() => ClearToBags()" Label="Allignment" ReadOnly="!String.IsNullOrEmpty(FormData.allignment)" AnchorOrigin="Origin.BottomCenter" Required="true" RequiredError="Allignment is required!">
                            <MudSelectItem Value="@("8*1")" />
                            <MudSelectItem Value="@("12*1")" />
                            <MudSelectItem Value="@("3*2")" />
                            <MudSelectItem Value="@("4*2")" />
                            <MudSelectItem Value="@("6*2")" />
                        </MudSelect>
                    </MudItem>
                </MudGrid>

                <div class="d-flex justify-end my-5">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Filled.Add" OnClick="OpenAddThumbModal" Disabled="String.IsNullOrEmpty(FormData.allignment)">Add Thumbnail</MudButton>
                </div>

                <MudTable Items="@ToBags" Hover="true" Dense="true">
                    <HeaderContent>
                        <MudTh>Name</MudTh>
                        <MudTh>Link</MudTh>
                        <MudTh>Image</MudTh>
                        <MudTh>Action</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Name">@context.name</MudTd>
                        <MudTd DataLabel="Link">@context.link</MudTd>
                        <MudTd DataLabel="Image">
                            <MudImage Src="@($"data:image/webp;base64,{context.base64Attch}")" Alt="" Elevation="25" Class="rounded-lg mt-3" Style="width:100px;"/>
                        </MudTd>
                        <MudTd DataLabel="Action">
                            <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="() => RemoveToBag(context)">Delete</MudButton>
                        </MudTd>
                    </RowTemplate>
                </MudTable>

                <div class="d-flex align-center justify-space-between mt-6">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" OnClick="CreateNewSection" Class="ml-auto">Submit</MudButton>
                </div>
        </MudForm>
	</MudContainer>
</MudPaper>

@code {
    // Form ref
    bool success;
    string[] errors = { };
    MudForm form;

    // Section
    private NewBunchSectionDTO FormData = new NewBunchSectionDTO();

    // To Bags
    private List<BunchThumDTO> ToBags = new List<BunchThumDTO>();

    // Remove To Bag
    private void RemoveToBag(BunchThumDTO ToBag)
    {
        ToBags.Remove(ToBag);
    }

    // Clear To Bags
	private void ClearToBags()
	{
		ToBags.Clear();
	}

    // Add Thumb
    private async Task OpenAddThumbModal()
    {
        var parameters = new DialogParameters();
        parameters.Add("FormData", new BunchThumDTO());
        parameters.Add("Allignment", FormData.allignment);

        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
        var dialog = await DialogService.Show<AddBunchThumbModal>("Add New Thumb", parameters, options).Result;

        if (dialog.Data != null)
        {
            BunchThumDTO newToBag = dialog.Data as BunchThumDTO;

            ToBags.Add(newToBag);
        }
    }

    // Create Section
    private async Task CreateNewSection()
    {
        string[] allignmentArray = FormData.allignment.Split("*");
        int sum = 1;
        Array.ForEach(allignmentArray, delegate (string i) { sum = sum * int.Parse(i); });

        if (ToBags.Count == 0)
        {
            Snackbar.Add("Please Add Thumbnail!", Severity.Error);
            return;
        }

        if (ToBags.Count != sum)
        {
            Snackbar.Add($"Please Add or Remove Thumbnail to Match {FormData.allignment}!", Severity.Error);
            return;
        }

        FormData.bunchThums = ToBags;

        try
        {
            var result = await _bunchSection.CreateNewBunchSection(FormData);
            if (result)
            {
                Snackbar.Add("Bunch Section Created Successfully!", Severity.Success);
                form.Reset();
                FormData = new NewBunchSectionDTO();
                ToBags.Clear();
                return;
            }
            Snackbar.Add("Something Went Wrong!", Severity.Error);
        }
        catch (Exception)
        {
            Snackbar.Add("Something Went Wrong!", Severity.Error);
            throw;
        }
    }
}
