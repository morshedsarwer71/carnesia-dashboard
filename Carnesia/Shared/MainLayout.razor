@using Carnesia.Domain.Profile
@inherits LayoutComponentBase
@inject ILocalStorageService _storage
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IJSRuntime IJS
@inject IProfile _iprofile



<MudDialogProvider />
<MudSnackbarProvider />

@*<AuthorizeView>*@
@*<Authorized>*@
<MudThemeProvider />
<MudLayout>
    <MudAppBar Class="no-print" Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h5" Class="ml-3">Carnesia</MudText>
        <MudSpacer />
        @*<MudIconButton Icon="@Icons.Filled.Logout" Color="Color.Inherit" Edge="Edge.End" OnClick="Logout" />*@

        <MudMenu Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" AnchorOrigin="@AnchorOrigin" TransformOrigin="@TransformOrigin">
            <MudMenuItem Icon="@Icons.Filled.AccountCircle" Href="/profile">Profile</MudMenuItem>
            <MudMenuItem Icon="@Icons.Filled.Store">@Profile.storeName</MudMenuItem>
            <MudMenuItem Icon="@Icons.Filled.Logout" OnClick="Logout">Logout</MudMenuItem>
        </MudMenu>
    </MudAppBar>
    <MudDrawer Class="no-print" @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>
@*</Authorized>*@
@*<NotAuthorized>

	</NotAuthorized>*@
@*</AuthorizeView>*@


@code {
    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }

    public Origin TransformOrigin { get; set; } = Origin.TopLeft;
    public Origin AnchorOrigin { get; set; } = Origin.BottomCenter;

    private ProfileDTO Profile = new ProfileDTO();

    protected async override Task OnInitializedAsync()
    {
        //Get Profile
        Profile = await _iprofile.GetProfile();

        //Navigate
        base.OnInitialized();
        if (!await _storage.ContainKeyAsync("access_token"))
        {
            NavigationManager.NavigateTo("/");
        }
    }

    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    // Logout
    private async Task Logout()
    {
        await _storage.RemoveItemAsync("access_token");
        await _storage.RemoveItemAsync("expiry_date");

        Snackbar.Add("Successfully Logged Out!", Severity.Success);

        NavigationManager.NavigateTo("/");
    }
}