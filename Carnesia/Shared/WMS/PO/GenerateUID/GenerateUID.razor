@using Carnesia.Domain.WMS.PO.POCO
@using Carnesia.Domain.WMS.PO.ReceivePO
@inject ISnackbar Snackbar
@inject IReceivePO _receivePO
@inject IDialogService DialogService

<MudPaper Class="pa-16 ma-2" Elevation="0">
    <MudContainer Fixed="true">
        <MudPaper Width="400px" Square="true">
            <MudList Clickable="true">
                <MudListItem><MudText Typo="Typo.h4">PO ID: @PO.poCode</MudText></MudListItem>
                <MudDivider />
                <MudListItem>Supplier: @PO.vendorName</MudListItem>
                <MudDivider />
                <MudListItem>Date: @PO.orderDate</MudListItem>
            </MudList>
        </MudPaper>
    </MudContainer>
</MudPaper>

<MudPaper Class="pa-16 ma-2">
    <MudContainer Fixed="true">
        <MudGrid Class="justify-center align-baseline">
			<MudItem md="3">
				<MudTextField @bind-Value="POID" Label="PO ID" Variant="Variant.Text" />
			</MudItem>
			<MudItem md="3">
				<div>
					<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="GetReceivePO">Filter</MudButton>
				</div>
			</MudItem>
		</MudGrid>

        @*<MudTable Items="@Elements" Dense="@dense" Hover="@hover" SortLabel="Sort By" Filter="new Func<ReceivePOProductDTO,bool>(FilterCycleCheck)" Class="mt-5">*@
        <MudTable Items="@Elements" Dense="@dense" Hover="@hover" SortLabel="Sort By" Class="mt-5">
            <ToolBarContent>
                <MudSpacer />
                <MudSpacer />
                <MudTextField @bind-Value="SearchTerm" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"/>
            </ToolBarContent>
            <HeaderContent>
                <MudTh><MudTableSortLabel SortBy="new Func<ReceivePOProductDTO, object>(x=>x.sku)">SKU Code</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<ReceivePOProductDTO, object>(x=>x.productCode)">Product Code</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<ReceivePOProductDTO, object>(x=>x.productName)">Product Name</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<ReceivePOProductDTO, object>(x=>x.poQuantity)">PO Quantity</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<ReceivePOProductDTO, object>(x=>x.liftingPrice)">Lifting Price</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<ReceivePOProductDTO, object>(x=>x.qcPassed)">QC Passed</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<ReceivePOProductDTO, object>(x=>x.qcFailed)">QC Failed</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<ReceivePOProductDTO, object>(x=>x.notArrivedQty)">Not Arrived</MudTableSortLabel></MudTh>
                
                <MudTh>Left generate Qty</MudTh>
                <MudTh>Value</MudTh>
                <MudTh>Generate UID</MudTh>
                <MudTh>Print Label</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="SKU Code">@context.sku</MudTd>
                <MudTd DataLabel="SKU Code">@context.productCode</MudTd>
                <MudTd DataLabel="Name">@context.productName</MudTd>
                <MudTd DataLabel="PO Quantity">@context.poQuantity</MudTd>
                <MudTd DataLabel="Lifting Price">@context.liftingPrice</MudTd>
                <MudTd DataLabel="QC Passed">@context.qcPassed</MudTd>
                <MudTd DataLabel="QC Failed">@context.qcFailed</MudTd>
                <MudTd DataLabel="Not Arrived">@context.notArrivedQty</MudTd>
                <MudTd DataLabel="Left UID">@context.leftUIDGnrtQty</MudTd>
                <MudTd DataLabel="Value">@(@context.qcPassed * @context.liftingPrice)</MudTd>
                <MudTd DataLabel="Generate UID">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="()=>OpenGenerateUIDDialog(PO.poCode,context.productCode)">Generate UID</MudButton>
                    @*<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenPrintLabelDialog">Print Label</MudButton>*@
                </MudTd>
                <MudTd DataLabel="Print Label">
                    @*<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenGenerateUIDDialog">Generate UID</MudButton>*@
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenPrintLabelDialog">Print Label</MudButton>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>

        <MudSwitch @bind-Checked="@hover" Color="Color.Primary">Hover</MudSwitch>
        <MudSwitch @bind-Checked="@dense" Color="Color.Secondary">Dense</MudSwitch>

        <MudPaper Width="400px" Square="true" Class="mt-10">
            <MudList Clickable="true">
                <MudListItem>Total PO Quantity: 5000</MudListItem>
                <MudDivider />
                <MudListItem>Total Quantity Received: 500</MudListItem>
                <MudDivider />
                <MudListItem>Total PO Amount: 5000000</MudListItem>
                <MudDivider />
                <MudListItem>Total Received Amount: 5000000</MudListItem>
            </MudList>
        </MudPaper>
    </MudContainer>
</MudPaper>

@code {
    // Filter
    private string POID { get; set; }

    // Search Term
    private string SearchTerm { get; set; }

    // Table Customization
    private bool dense { get; set; }
    private bool hover { get; set; }

    // Table Content
    //private List<GenerateUIDListPoco> Elements = new List<GenerateUIDListPoco>();
    private List<ReceivePOProductDTO> Elements = new List<ReceivePOProductDTO>();
    private ReceivePODTO PO = new ReceivePODTO();

    private async Task GetReceivePO()
    {
        if (String.IsNullOrEmpty(POID))
        {
            Snackbar.Add("Please enter a PO ID!", Severity.Error);
            return;
        }

        try
        {
            PO = await _receivePO.ReceivedPoByCode(POID);
            if (PO != null)
            {
                Elements = PO.products;
            }
            else
            {
                Snackbar.Add($"{POID} not found", Severity.Warning);
            }

        }
        catch (Exception)
        {
            Snackbar.Add($"{POID} not found", Severity.Warning);
            //throw;
        }
    }

    // Search Function
    //private bool FilterCycleCheck(ReceivePOProductDTO item)
    //{
    //if (item.sku.ToLower().Contains(SearchTerm.ToLower()))
    //{
    // return true;
    //}
    //return false;
    //}

    // Print Label Modal
    private void OpenPrintLabelDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = false, FullWidth=true, CloseButton=true };
        DialogService.Show<GenerateUIDPrintLabelModal>("Print Label", options);
    }

    // Print Label Modal
    private void OpenGenerateUIDDialog(string poCode,string productCode)
    {
        var parameter = new DialogParameters();
        parameter.Add("PoCode", poCode);
        parameter.Add("ProductCode", productCode);
        var options = new DialogOptions { CloseOnEscapeKey = false, FullWidth=true, CloseButton=true };
        DialogService.Show<GEnerateUIDGenerateUIDModal>("Generate UID",parameter, options);
    }
}
