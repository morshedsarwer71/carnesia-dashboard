@using Carnesia.Domain.WMS.PO.POCO
@using Syncfusion.XlsIO
@using System.IO
@using System.Data
@inject Microsoft.JSInterop.IJSRuntime JS
@inject ISnackbar Snackbar
@inject IPurchaseOrder _purchaseOrder

<MudPaper Class="ma-2 pa-16">
	<MudContainer Fixed="true">
		<div class="d-flex justify-center mb-5">
            <a href="./BulkUID.xlsx" download target="_top">
			    <MudButton Class="me-3" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ArrowDownward" Style="background-color: yellowgreen; color: white;">
                    Download CSV Template
                </MudButton>
            </a>

			<InputFile id="fileInput" hidden accept=".xlsx" OnChange="UploadFile"/>
            <MudButton HtmlTag="label"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       StartIcon="@Icons.Filled.CloudUpload"
                       for="fileInput">
                Upload File
            </MudButton>
		</div>

        <MudTable Items="@UIDS">
            <HeaderContent>
                <MudTh>POID</MudTh>
                <MudTh>Product Code</MudTh>
                <MudTh>Profile Code</MudTh>
                <MudTh>SKU QTY</MudTh>
                <MudTh>Exp Date</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="POID">@context.poCode</MudTd>
                <MudTd DataLabel="Product Code">@context.productCode</MudTd>
                <MudTd DataLabel="Profile Code">@context.profileCode</MudTd>
                <MudTd DataLabel="SKU QTY">@context.generateuidQty</MudTd>
                <MudTd DataLabel="Exp Date">@context.expDate</MudTd>
            </RowTemplate>
        </MudTable>

        <div class="d-flex justify-end mt-5">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateBulkUIDs" Disabled="UIDS.Count <= 0 ? true : false">Submit</MudButton>
        </div>

@*        @if (RejectedUIDS.Count > 0)
        {
            <MudText>Rejected UIDS</MudText>
            <MudTable Items="@RejectedUIDS">
                <HeaderContent>
                    <MudTh>POID</MudTh>
                    <MudTh>Product Code</MudTh>
                    <MudTh>Profile Code</MudTh>
                    <MudTh>SKU QTY</MudTh>
                    <MudTh>Exp Date</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="POID">@context.poCode</MudTd>
                    <MudTd DataLabel="Product Code">@context.productCode</MudTd>
                    <MudTd DataLabel="Profile Code">@context.profileCode</MudTd>
                    <MudTd DataLabel="SKU QTY">@context.generateuidQty</MudTd>
                    <MudTd DataLabel="Exp Date">@context.expDate</MudTd>
                </RowTemplate>
            </MudTable>
            <div class="mb-5 d-flex justify-end">
                <MudButton StartIcon="@Icons.Filled.Download" Variant="Variant.Filled" Color="Color.Success" Disabled="RejectedUIDS.Count > 0 ? false : true" OnClick="CreateDocument">Download XLSL</MudButton>
            </div>
        }*@
    </MudContainer>
</MudPaper>

@code {
    // UID List
    private List<BulkUIDPoco> UIDS = new List<BulkUIDPoco>();
    //private List<BulkUIDPoco> RejectedUIDS = new List<BulkUIDPoco>();

    // Upload .xlsx
    private async Task UploadFile (InputFileChangeEventArgs e)
    {
        try
        {
            UIDS.Clear();
            UIDS =  await _purchaseOrder.UploadXLSXFile(e);
        }
        catch (Exception)
        {
            Console.WriteLine("Error!");
            throw;
        }
    }

    //// Create Document
    //private async Task CreateDocument()
    //{
    //    using (ExcelEngine excelEngine = new ExcelEngine())
    //    {
    //        IApplication application = excelEngine.Excel;
    //        application.DefaultVersion = ExcelVersion.Xlsx;

    //        //Create a workbook.
    //        IWorkbook workbook = application.Workbooks.Create(1);
    //        IWorksheet worksheet = workbook.Worksheets[0];

    //        //Initialize DataTable and data get from SampleDataTable method.
    //        DataTable table = UIDDataTable();

    //        //Export data from DataTable to Excel worksheet.
    //        worksheet.ImportDataTable(table, true, 1, 1);

    //        worksheet.UsedRange.AutofitColumns();

    //        //Save the document as a stream and return the stream.
    //        using (MemoryStream stream = new MemoryStream())
    //        {
    //            //Save the created Excel document to MemoryStream
    //            workbook.SaveAs(stream);

    //            //Download the excel file.
    //            await JS.SaveAs("UIDBulkError.xlsx", stream.ToArray());
    //        }
    //    }
    //}

    //private DataTable UIDDataTable()
    //{
    //    DataTable reports = new DataTable();
    //    reports.Columns.Add("POID");
    //    reports.Columns.Add("ProductCode");
    //    reports.Columns.Add("ProfileCode");
    //    reports.Columns.Add("SkuQty", typeof(int));
    //    reports.Columns.Add("Date");

    //    foreach (var item in RejectedUIDS)
    //    {
    //        reports.Rows.Add(item.poCode, item.productCode, item.profileCode, item.generateuidQty, item.expDate);
    //    }
    //    return reports;
    //}

    // Create Bulk UIDs
    private async Task CreateBulkUIDs()
    {
        try
        {
            var result = await _purchaseOrder.GenerateBulkUID(UIDS);
            if (result)
            {
                Snackbar.Add("UIDS Generated Successfully!", Severity.Success);
                return;
            }
            Snackbar.Add("Error While Generating UIDS!", Severity.Error);
        }
        catch (Exception)
        {
            Snackbar.Add("Error While Generating UIDS!", Severity.Error);
            throw;
        }
    }
}
