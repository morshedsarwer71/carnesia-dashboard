@using Carnesia.Domain.WMS.PO.POCO
@using Carnesia.Domain.WMS.PO.ReceivePO
@inject ISnackbar Snackbar
@inject IReceivePO _receivePO
@inject IDialogService DialogService

@if (PO != null)
{
    <MudPaper Class="pa-16 ma-2" Elevation="0">
        <MudContainer Fixed="true">
            <MudPaper Style="width:fit-content" Class="pa-2" Square="true">
                <MudList Clickable="true">
                    <MudListItem><MudText Typo="Typo.h4">PO ID: @PO.poCode</MudText></MudListItem>
                    <MudDivider />
                    <MudListItem>Supplier: @PO.vendorName</MudListItem>
                    <MudDivider />
                    <MudListItem>Date: @PO.orderDate</MudListItem>
                </MudList>
            </MudPaper>
        </MudContainer>
    </MudPaper>
}

<MudPaper Class="pa-16 ma-2">
    <MudContainer Fixed="true">
        <MudGrid Class="justify-center align-baseline mb-5">
            <MudItem md="3">
                <MudTextField @bind-Value="POID" Label="PO ID" Variant="Variant.Text" />
            </MudItem>
            <MudItem md="3">
                <div>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="GetReceivePO">Filter</MudButton>
                </div>
            </MudItem>
        </MudGrid>

        <MudTable Items="@Elements" Dense="@dense" Hover="@hover" CanCancelEdit="@true" SortLabel="Sort By" CommitEditTooltip="Commit Edit" OnCommitEditClick="@(() => Snackbar.Add("ItemUpdated", Severity.Info))" RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues" IsEditRowSwitchingBlocked="@true">
            <ToolBarContent>
                <MudSpacer />
                <MudSpacer />
                <MudTextField @bind-Value="SearchTerm" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" />
            </ToolBarContent>
            <HeaderContent>
                <MudTh>SKU Code</MudTh>
                <MudTh>Product Code</MudTh>
                <MudTh>Name</MudTh>
                <MudTh>PO Quantity</MudTh>
                <MudTh>Lifting Price</MudTh>
                <MudTh>QC Passed</MudTh>
                <MudTh>QC Failed</MudTh>
                <MudTh>Not Arrived</MudTh>
                <MudTh>Value</MudTh>
                <MudTh>Action</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="SKU Code">@context.sku</MudTd>
                <MudTd DataLabel="SKU Code">@context.productCode</MudTd>
                <MudTd DataLabel="Name">@context.productName</MudTd>
                <MudTd DataLabel="PO Quantity">@context.quantity</MudTd>
                <MudTd DataLabel="Lifting Price">@context.liftingPrice</MudTd>
                <MudTd DataLabel="QC Passed">
                    @(context.qcPassed - (context.qcFailed + context.notArrivedQty))
                </MudTd>
                <MudTd DataLabel="QC Failed">@context.qcFailed</MudTd>
                <MudTd DataLabel="Not Arrived">@context.notArrivedQty</MudTd>
                <MudTd DataLabel="Value">@((context.qcPassed - (context.qcFailed + context.notArrivedQty)) * context.liftingPrice)</MudTd>
                <MudTd DataLabel="Action"><MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => SubmitPO(context)">Submit</MudButton></MudTd>
            </RowTemplate>
            <RowEditingTemplate>
                <MudTd DataLabel="SKU Code">@context.sku</MudTd>
                <MudTd DataLabel="Name">@context.productName</MudTd>
                <MudTd DataLabel="PO Quantity">@context.quantity</MudTd>
                <MudTd DataLabel="Lifting Price">
                    <MudNumericField @bind-Value="@context.liftingPrice" Required Min="1" />
                </MudTd>
                <MudTd DataLabel="QC Passed">
                    @(context.qcPassed - (context.qcFailed + context.notArrivedQty))
                </MudTd>
                <MudTd DataLabel="QC Failed">
                    <MudNumericField @bind-Value="@context.qcFailed" Required />
                </MudTd>
                <MudTd DataLabel="Not Arrived">
                    <MudNumericField @bind-Value="@context.notArrivedQty" />
                </MudTd>
                <MudTd DataLabel="Value">@((context.qcPassed - (context.qcFailed + context.notArrivedQty)) * context.liftingPrice)</MudTd>
                <MudTd DataLabel="Action"><MudButton Variant="Variant.Filled" Color="Color.Primary">Submit</MudButton></MudTd>
            </RowEditingTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>

        <MudSwitch @bind-Checked="@hover" Color="Color.Primary">Hover</MudSwitch>
        <MudSwitch @bind-Checked="@dense" Color="Color.Secondary">Dense</MudSwitch>

        <MudPaper Width="400px" Square="true" Class="mt-10">
            <MudList Clickable="true">
                <MudListItem>Total PO Quantity: @PO.totalQty </MudListItem>
                <MudDivider />
                @*<MudListItem>Total Quantity Received: 500</MudListItem>*@
                <MudDivider />
                <MudListItem>Total PO Amount: @PO.totalValue</MudListItem>
                <MudDivider />
                @*<MudListItem>Total Received Amount: 5000000</MudListItem>*@
            </MudList>
        </MudPaper>
    </MudContainer>
</MudPaper>

@code {
    // Filter
    private string POID { get; set; }

    // Search Term
    private string SearchTerm { get; set; }

    // Table Customization
    private bool dense { get; set; }
    private bool hover { get; set; }

    // Table Content
    private List<ReceivePOProductDTO> Elements = new List<ReceivePOProductDTO>();
    private ReceivePODTO PO = new ReceivePODTO();

    // Get PO
    private async Task GetReceivePO()
    {
        if (String.IsNullOrEmpty(POID))
        {
            Snackbar.Add("Please enter a PO ID!", Severity.Error);
            return;
        }

        try
        {
            PO = await _receivePO.GetPO(POID);
            if (PO != null)
            {
                Elements = PO.products;
            }
            else
            {
                Snackbar.Add("PO not found", Severity.Warning);
            }

        }
        catch (Exception)
        {
            Snackbar.Add("PO not found", Severity.Warning);
            //throw;
        }
    }

    // Before Edit
    private ReceivePOProductDTO beforeEdit;

    // Backup Item
    private void BackupItem(object element)
    {
        beforeEdit = new()
            {
                liftingPrice = ((ReceivePOProductDTO)element).liftingPrice,
                //qcPassed = ((ReceivePOProductDTO)element).qcPassed,
                qcFailed = ((ReceivePOProductDTO)element).qcFailed,
                notArrivedQty = ((ReceivePOProductDTO)element).notArrivedQty,
            };
    }

    // Reset Items If Edit Cancel
    private void ResetItemToOriginalValues(object element)
    {
        ((ReceivePOProductDTO)element).liftingPrice = beforeEdit.liftingPrice;
        //((ReceivePOProductDTO)element).qcPassed = beforeEdit.qcPassed;
        ((ReceivePOProductDTO)element).qcFailed = beforeEdit.qcFailed;
        ((ReceivePOProductDTO)element).notArrivedQty = beforeEdit.notArrivedQty;
    }

    // PO Receive Confirmation Modal
    private async Task SubmitPO(ReceivePOProductDTO PO)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
        var dialog = await DialogService.Show<ReceivePOConfirmationModal>("Confirm", options).Result;

        if (!dialog.Cancelled)
        {
            PO.poCode = POID;
            try
            {
                var result = await _receivePO.SubmitReceive(PO);
                if (result != null)
                {
                    Snackbar.Add("PO Received Successfully!", Severity.Success);
                    Elements.Remove(result);
                }
                else
                {
                    Snackbar.Add("PO Receiving error", Severity.Error);
                }
            }
            catch (Exception)
            {
                Snackbar.Add("Server error", Severity.Error);
                throw;
            }
        }
    }
}
