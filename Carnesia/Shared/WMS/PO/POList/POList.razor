@using Carnesia.Domain.WMS.PO.POCO
@using Carnesia.Domain.Common.POCO
@using Carnesia.Shared.CommonComponents
@*@using Carnesia.Pages.WMS.PO*@
@inject IDialogService DialogService
@inject IPurchaseOrder _order
@inject IVendor _vendor

<MudPaper Class="pa-16 ma-2 mt-10" Elevation="1">
	<MudContainer Fixed="true">
		<MudGrid Class="justify-center align-baseline">
			<MudItem md="2">
				<MudTextField @bind-Value="filterInput.POID" Label="PO ID" Variant="Variant.Text" />
			</MudItem>
			<MudItem md="2">
				<MudAutocomplete T="string" Label="Supplier" Value="filterInput.SupplierName" ValueChanged="(string s) => GetSupplierId(s)" SearchFunc="@SupplierSearch"						 ResetValueOnEmptyText="@true"/>
			</MudItem>
			<MudItem md="2">
				<MudSelect @bind-Value="filterInput.Status" Label="Status" AnchorOrigin="Origin.BottomCenter">
					<MudSelectItem Value="5">Approved</MudSelectItem>
					<MudSelectItem Value="6">Received</MudSelectItem>
					<MudSelectItem Value="7">Partially Received</MudSelectItem>
				</MudSelect>
			</MudItem>
			<MudItem md="2">
				<MudDateRangePicker Label="Date range" @bind-DateRange="_dateRange" />
			</MudItem>
			<MudItem md="2">
				<div>
					<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Filter">Filter</MudButton>
				</div>
			</MudItem>
		</MudGrid>

		<MudTable Class="mt-10" Items="@poList" Dense="@tableCommon.Dense" Hover="@tableCommon.Hover" Bordered="@tableCommon.Bordered" Striped="@tableCommon.Striped">
			<HeaderContent>
				<MudTh>Date</MudTh>
				<MudTh>PO ID</MudTh>
				<MudTh>Supplier</MudTh>
				<MudTh>Quantity</MudTh>
				<MudTh>Amount</MudTh>
				<MudTh>Status</MudTh>
				<MudTh>Status Updated On</MudTh>
				<MudTh>Action</MudTh>
			</HeaderContent>
			<RowTemplate>
				<MudTd DataLabel="Date">@context.orderDate</MudTd>
				<MudTd DataLabel="PO Id">@context.poCode</MudTd>
				<MudTd DataLabel="Supplier">@context.vendorName</MudTd>
				<MudTd DataLabel="Quantity">@context.poQuantity</MudTd>
				<MudTd DataLabel="Amount">@context.totalAmount</MudTd>
				<MudTd DataLabel="Status">@context.poStatus</MudTd>
				<MudTd DataLabel="Status Updated On">@context.statusUpdateDate</MudTd>
				<MudTd DataLabel="Action">
					<MudIconButton Icon="@Icons.Filled.RemoveRedEye" Color="Color.Warning" aria-label="View Details" OnClick="() => ViewDetailsModal(context.poCode)" />
					<MudIconButton Icon="@Icons.Filled.Edit" Color="Color.Success" aria-label="Edit" OnClick="() => OpenStatusDialog(context.poCode)" />
				</MudTd>
			</RowTemplate>
			<PagerContent>
				<MudTablePager />
			</PagerContent>
		</MudTable>

		<div class="d-flex flex-wrap mt-4">
            <MudSwitch @bind-Checked="@tableCommon.Hover" Color="Color.Primary">Hover</MudSwitch>
            <MudSwitch @bind-Checked="@tableCommon.Dense" Color="Color.Secondary">Dense</MudSwitch>
            <MudSwitch @bind-Checked="@tableCommon.Striped" Color="Color.Tertiary">Striped</MudSwitch>
            <MudSwitch @bind-Checked="@tableCommon.Bordered" Color="Color.Warning">Bordered</MudSwitch>
        </div>
	</MudContainer>
</MudPaper>

@code {
	// Filter Class
	public POFilterPoco filterInput = new POFilterPoco();
	DateRange _dateRange = new DateRange(DateTime.Now.Date, DateTime.Now.Date);
	// PO List
	public List<POListPoco> poList = new List<POListPoco>();

	// Table Customaization
    private TableCommon tableCommon = new TableCommon();

	protected override async Task OnInitializedAsync()
	{
		poList = await _order.GetPoList();
		await GetVendors();
	}

	// Suppliers
	private string[] Suppliers;

	private async Task GetVendors()
	{
		Suppliers = await _vendor.GetVendorsNameAsString();
	}

	// Autocomplite Search Func
	private async Task<IEnumerable<string>> SupplierSearch(string value)
	{
		return string.IsNullOrEmpty(value) ? Suppliers : Suppliers.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
	}

	// Set Supplier ID
	private async Task GetSupplierId(string supplierName)
	{
		filterInput.SupplierName = supplierName;
		if (!String.IsNullOrEmpty(supplierName))
		{
			var result = await _vendor.GetVendor(supplierName);
			filterInput.Supplier = result.vendorId;
		}
	}

	// Serach Term
	private string searchTerm { get; set; }


	// Search Function
	private bool FilterCycleCheck(POListPoco item)
	{
        if (item.poCode.ToLower().Contains(searchTerm.ToLower()) || item.vendorName.ToLower().Contains(searchTerm.ToLower()) || item.poStatus.ToLower().Contains(searchTerm.ToLower()))
        {
            return true;
        }
        return false;
    }

	// Status Modal
    private void OpenStatusDialog(string poCode)
    {
	    var parameters = new DialogParameters { ["poCode"]=poCode };
        var options = new DialogOptions { CloseOnEscapeKey = false, FullWidth=true, CloseButton=true };
        DialogService.Show<POListUpdateStatusModal>("Change Status", options);
    }

	// Filter
	private async Task Filter()
	{
		try
		{
			filterInput.fromDate = _dateRange.Start.ToString();
			filterInput.toDate = _dateRange.End.ToString();
			poList =await _order.GetPoListQuery(filterInput.POID,filterInput.Supplier,filterInput.Status,filterInput.fromDate,filterInput.toDate);
		}
		catch (Exception e)
		{
			
		}
	}

	// View Details Modal
    private async Task ViewDetailsModal(string pocode)
    {
        var parameters = new DialogParameters { ["poCode"]=pocode };
        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth=true, CloseButton=true, MaxWidth=MaxWidth.Large };
        DialogService.Show<POListDetails>("", parameters,options);
    }
	

}
