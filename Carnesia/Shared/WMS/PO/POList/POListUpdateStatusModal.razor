@inject IPurchaseOrder _order
@inject ISnackbar snackbar

<MudDialog>
    <DialogContent>
        <MudGrid>
            <MudItem xs="12">
                <MudSelect T="int" Label="Status" @bind-Value="@statusValue" AnchorOrigin="Origin.BottomCenter">
                    <MudSelectItem Value=5>Approved</MudSelectItem>
                    <MudSelectItem Value=6>Received</MudSelectItem>
                    <MudSelectItem Value=7>Partially Received</MudSelectItem>
                    @*<MudSelectItem Value="@("Cancel")" />
                    <MudSelectItem Value="@("Close")" />*@
                </MudSelect>
            </MudItem>
            <MudItem xs="12">
                <div class="d-flex justify-end">
                    <MudButton OnClick="ChangeStatus" Variant="Variant.Filled" Color="Color.Primary">Change Status</MudButton>
                </div>
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter]
    public string poCode { get; set; }

    void Cancel() => MudDialog.Cancel();

    // Status Value
    private int statusValue { get; set; }


    // Change Status
    private async Task ChangeStatus()
    {
        try
        {
            var res =await _order.ChangeStatus(poCode, statusValue);
            snackbar.Add(res.Message, Severity.Success);
        }
        catch (Exception e)
        {
            snackbar.Add("Failed", Severity.Error);
            //Console.WriteLine(e);
            //throw;
        }
    }
}
