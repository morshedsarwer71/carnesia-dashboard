@using Carnesia.Domain.WMS.PO.POCO
@inject IDialogService DialogService



<MudPaper Class="pa-16 ma-2" Elevation="1">
    <MudContainer Fixed="true">
        <MudGrid>
		    <MudItem xs="12" sm="6" md="3">
			    <MudAutocomplete T="string" Label="Supplier Name" @bind-Value="SupplierName" SearchFunc="@SupplierSearch"
                            ResetValueOnEmptyText="@true" />
		    </MudItem>
            <MudItem xs="12" sm="6" md="3">
			    <MudAutocomplete T="string" Label="Receiving Warehouse" @bind-Value="ReceivingWarehouse" SearchFunc="@SupplierSearch"
                            ResetValueOnEmptyText="@true" />
		    </MudItem>
            <MudItem xs="12" sm="6" md="3">
			    <MudSelect T="string" Label="PO Type" @bind-SelectedValues="@POType" AnchorOrigin="Origin.BottomCenter">
                    <MudSelectItem Value="@("Cash")" >Cash</MudSelectItem>
                    <MudSelectItem Value="@("Consignment")" >Consignment</MudSelectItem>
                    <MudSelectItem Value="@("Credit")" >Credit</MudSelectItem>
                </MudSelect>
		    </MudItem>
            <MudItem xs="12" sm="6" md="3">
			    <MudDatePicker Label="Receiving Date" @bind-Date="ReceivingDate"/>
		    </MudItem>
	    </MudGrid>
    </MudContainer>
</MudPaper>

<MudPaper Class="ps-16 pe-16 pb-16 pt-10 ma-2 mt-10" Elevation="1">
	<MudContainer Fixed="true">
        <div class="mb-15 border-2 ms-auto me-auto" style="width: fit-content;">
            <MudText Class="px-15 py-2" Typo="Typo.h6">Purchase Order</MudText>
        </div>
        <MudForm @ref="form" @bind-IsValid="@Success">
            <MudGrid>
                <MudItem sm="12" md="4">
                    <MudTextField Immediate="true" @bind-Value="product.SKU" Label="SKU" Variant="Variant.Text" Required="true" RequiredError="SKU is required!" />
                </MudItem>

                <MudItem sm="6" md="4">
                    <MudNumericField Immediate="true" @bind-Value="product.QTY" Label="Quantity" Variant="Variant.Text" Min="1" Required="true" RequiredError="Quantity is required!" />
                </MudItem>

                <MudItem sm="6" md="4">
                    <MudNumericField Immediate="true" @bind-Value="product.LiftingPrice" Label="Lifting Price" Variant="Variant.Text" Min="0.01m" Required="true" RequiredError="Listing                            price is required!" />
                </MudItem>
            </MudGrid>
            <div class="mt-5 d-flex justify-end">
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Filled.Add" Color="Color.Primary">Add</MudButton>
            </div>
        </MudForm>

        <MudTable Class="mt-5" Items="@products" Hover="false" Bordered="true" Dense="true">
            <HeaderContent>
                <MudTh>SKU</MudTh>
                <MudTh>Product Name</MudTh>
                <MudTh>QTY</MudTh>
                <MudTh>Lifting Price</MudTh>
                <MudTh>Total Price</MudTh>
                <MudTh>Action</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="SKU" onclick="@(() => OpenSKUHistoryDialog())">@context.SKU</MudTd>
                <MudTd DataLabel="Product Name">@context.Name</MudTd>
                <MudTd DataLabel="QTY">@context.QTY</MudTd>
                <MudTd DataLabel="Lifting Price">@context.LiftingPrice</MudTd>
                <MudTd DataLabel="Total Price">@context.TotalPrice</MudTd>
                <MudTd DataLabel="Action"><MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Secondary" aria-label="delete" OnClick="() =>                            OpenDeleteDialog()" /></MudTd>
            </RowTemplate>
        </MudTable>
        <div class="mt-5 d-flex justify-end">
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Style="@($"color:{Colors.Grey.Lighten5}; background:{Colors.BlueGrey.Darken4};")">Submit</MudButton>
        </div>
	</MudContainer>
</MudPaper>

<MudPaper Class="ps-16 pe-16 pb-16 pt-10 ma-2 mt-10" Elevation="1">
    <MudContainer Fixed="true">
        <div class="mb-15 border-2 ms-auto me-auto" style="width: fit-content;">
            <MudText Class="px-15 py-2" Typo="Typo.h6">Bulk Purchase Order</MudText>
        </div>

        <div class="d-flex justify-center">
           <MudButton Class="me-3" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ArrowDownward" Style="background-color: yellowgreen; color: white;">
               Download CSV Template
           </MudButton>

           <InputFile id="fileInput" hidden />
           <MudButton HtmlTag="label"
           Variant="Variant.Filled"
           Color="Color.Primary"
           StartIcon="@Icons.Filled.CloudUpload"
           for="fileInput">
            Upload Files
           </MudButton>
        </div>

        <MudTable Class="mt-5" Items="@products" Hover="false" Bordered="true" Dense="true">
            <HeaderContent>
                <MudTh>SKU</MudTh>
                <MudTh>Product Name</MudTh>
                <MudTh>QTY</MudTh>
                <MudTh>Lifting Price</MudTh>
                <MudTh>Total Price</MudTh>
                <MudTh>Action</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="SKU">@context.SKU</MudTd>
                <MudTd DataLabel="Product Name">@context.Name</MudTd>
                <MudTd DataLabel="QTY">@context.QTY</MudTd>
                <MudTd DataLabel="Lifting Price">@context.LiftingPrice</MudTd>
                <MudTd DataLabel="Total Price">@context.TotalPrice</MudTd>
                <MudTd DataLabel="Action"><MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Secondary" aria-label="delete" /></MudTd>
            </RowTemplate>
        </MudTable>

        <div class="mt-5 d-flex justify-end">
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Style="@($"color:{Colors.Grey.Lighten5}; background:{Colors.BlueGrey.Darken4};")">
                Bulk Submit
            </MudButton>
        </div>
    </MudContainer>
</MudPaper>

@code {
    // Product List
    public List<ProductPOCO> products = new List<ProductPOCO>();
    public POPoco product = new POPoco();

    // Form Reference
    private MudForm form;
    private bool Success;

    // Input Values
    private string SupplierName { get; set; }
    private string ReceivingWarehouse { get; set; }
    private DateTime? ReceivingDate { get; set; }
    private IEnumerable<string> POType { get; set; }

    public string SKU { get; set; }
    public int QTY { get; set; } = 1;
    public decimal LiftingPrice { get; set; } = 1;

    // Autocomplite Options
    private string[] states =
    {
        "Alabama", "Alaska", "American Samoa", "Arizona",
        "Arkansas", "California", "Colorado", "Connecticut",
        "Delaware", "District of Columbia", "Federated States of Micronesia",
        "Florida", "Georgia", "Guam", "Hawaii", "Idaho",
        "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky",
        "Louisiana", "Maine", "Marshall Islands", "Maryland",
        "Massachusetts", "Michigan", "Minnesota", "Mississippi",
        "Missouri", "Montana", "Nebraska", "Nevada",
        "New Hampshire", "New Jersey", "New Mexico", "New York",
        "North Carolina", "North Dakota", "Northern Mariana Islands", "Ohio",
        "Oklahoma", "Oregon", "Palau", "Pennsylvania", "Puerto Rico",
        "Rhode Island", "South Carolina", "South Dakota", "Tennessee",
        "Texas", "Utah", "Vermont", "Virgin Island", "Virginia",
        "Washington", "West Virginia", "Wisconsin", "Wyoming",
    };

    // Form Submit
    private void AddProduct()
    {
        products.Add(new ProductPOCO
            {
                SKU = product.SKU,
                Name = "Products",
                QTY = product.QTY,
                LiftingPrice = product.LiftingPrice,
                TotalPrice = product.QTY * product.LiftingPrice
            });


            product.SKU = "";
            product.QTY = 1;
            product.LiftingPrice = 1;
    }

    // Autocomplite Search Func
    private async Task<IEnumerable<string>> SupplierSearch(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return states;
        return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    // Delete Item Modal
    private void OpenDeleteDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = false, FullWidth=true, CloseButton=true };
        DialogService.Show<CreatePODeleteModal>("Delete Item?", options);
    }
    
    // Delete Item Modal
    private void OpenSKUHistoryDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = false, FullWidth=true, CloseButton=true };
        DialogService.Show<CreatePOSKUHistory>("SKU History", options);
    }
}
