@using Carnesia.Domain.Vendor.Models
@using Carnesia.Domain.WMS.PO.Models
@using Carnesia.Domain.WMS.PO.POCO
@using Carnesia.Domain.WMS.PO.ViewModels
@using System.Data
@using NPOI.SS.UserModel
@using NPOI.XSSF.UserModel
@inject IDialogService DialogService
@inject IPurchaseOrder _order
@inject ISnackbar snackbar
@inject IVendor _vendor
@inject IStore _store
@inject IProduct _product
@inject IJSRuntime iJSRuntime
@using Microsoft.AspNetCore.Components.Forms
@using System.Data
@using Carnesia.Domain.CMS.Product



<MudPaper Class="pa-16 ma-2" Elevation="1">
    <MudContainer Fixed="true">
        <MudGrid>
            <MudItem xs="12" sm="6" md="3">
                <MudAutocomplete T="string" Label="Supplier Name" @bind-Value="createPO.vendorName" SearchFunc="@SupplierSearch"
                                 ResetValueOnEmptyText="@true" />
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudAutocomplete T="string" Label="Receiving Warehouse" @bind-Value="createPO.storeName" SearchFunc="@StoresSearch"
                                 ResetValueOnEmptyText="@true" />
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudSelect Label="PO Type" @bind-Value="createPO.poType" AnchorOrigin="Origin.BottomCenter">
                    <MudSelectItem Value="@("Cash")">Cash</MudSelectItem>
                    <MudSelectItem Value="@("Consignment")">Consignment</MudSelectItem>
                    <MudSelectItem Value="@("Credit")">Credit</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudDatePicker Label="Receiving Date" @bind-Date="createPO.receiveDate" />
            </MudItem>
        </MudGrid>
    </MudContainer>
</MudPaper>

<MudPaper Class="ps-16 pe-16 pb-16 pt-10 ma-2 mt-10" Elevation="1">
    <MudContainer Fixed="true">
        <div class="mb-15 border-2 ms-auto me-auto" style="width: fit-content;">
            <MudText Class="px-15 py-2" Typo="Typo.h6">Purchase Order</MudText>
        </div>
        <MudForm @ref="form" @bind-IsValid="@Success">
            <MudGrid>
                <MudItem sm="12" md="4">
                    <MudTextField Immediate="true" @bind-Value="PoProduct.sku" Label="SKU" Variant="Variant.Text" Required="true" RequiredError="SKU is required!" />
                </MudItem>

                <MudItem sm="6" md="4">
                    <MudNumericField Immediate="true" @bind-Value="PoProduct.quantity" Label="Quantity" Variant="Variant.Text" Min="1" Required="true" RequiredError="Quantity is required!" />
                </MudItem>

                <MudItem sm="6" md="4">
                    <MudNumericField Immediate="true" @bind-Value="PoProduct.liftingPrice" Label="Lifting Price" Variant="Variant.Text" Min="0.01m" Required="true" RequiredError="Listing price is required!" />
                </MudItem>
            </MudGrid>
            <div class="mt-5 d-flex justify-end">
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Filled.Add" Color="Color.Primary" Disabled="@(!Success)" OnClick="()=>AddProduct(PoProduct)">Add</MudButton>
            </div>
        </MudForm>
            <MudTable Class="mt-5" Items="@products" Hover="false" Bordered="true" Dense="true">
                <HeaderContent>
                    <MudTh>SKU</MudTh>
                    <MudTh>Product Name</MudTh>
                    <MudTh>QTY</MudTh>
                    <MudTh>Lifting Price</MudTh>
                    <MudTh>Total Price</MudTh>
                    <MudTh>Action</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="SKU" onclick="@(() => OpenSKUHistoryDialog())">@context.sku</MudTd>
                    <MudTd DataLabel="Product Name">@context.productName</MudTd>
                    <MudTd DataLabel="QTY">@context.quantity</MudTd>
                    <MudTd DataLabel="Lifting Price">@context.liftingPrice</MudTd>
                    <MudTd DataLabel="Total Price">@context.TotalPrice</MudTd>
                    <MudTd DataLabel="Action"><MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Secondary" aria-label="delete" OnClick="() =>OpenDeleteDialog()" /></MudTd>
                </RowTemplate>
            </MudTable>
            <div class="mt-5 d-flex justify-end">
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Style="@($"color:{Colors.Grey.Lighten5}; background:{Colors.BlueGrey.Darken4};")" OnClick="SubmitPO">Submit</MudButton>
            </div>
        
    </MudContainer>
</MudPaper>

<MudPaper Class="ps-16 pe-16 pb-16 pt-10 ma-2 mt-10" Elevation="1">
    <MudContainer Fixed="true">
        <div class="mb-15 border-2 ms-auto me-auto" style="width: fit-content;">
            <MudText Class="px-15 py-2" Typo="Typo.h6">Bulk Purchase Order</MudText>
        </div>

        <div class="d-flex justify-center">
            <MudButton Class="me-3" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ArrowDownward" Style="background-color: yellowgreen; color: white;" OnClick="Download">
                Download CSV Template
            </MudButton>

            <InputFile id="fileInput" hidden OnChange="UploadFiles" />
            <MudButton HtmlTag="label"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       StartIcon="@Icons.Filled.CloudUpload"
                       for="fileInput">
                Upload Files
            </MudButton>
        </div>

        <MudTable Class="mt-5" Items="@poExcelProducts" Hover="false" Bordered="true" Dense="true">
            <HeaderContent>
                <MudTh>SKU</MudTh>
                <MudTh>Product Name</MudTh>
                <MudTh>QTY</MudTh>
                <MudTh>Lifting Price</MudTh>
                <MudTh>Total Price</MudTh>
                <MudTh>Action</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="SKU">@context.sku</MudTd>
                <MudTd DataLabel="Product Name">@context.productName</MudTd>
                <MudTd DataLabel="QTY">@context.quantity</MudTd>
                <MudTd DataLabel="Lifting Price">@context.liftingPrice</MudTd>
                <MudTd DataLabel="Total Price">@context.TotalPrice</MudTd>
                <MudTd DataLabel="Action"><MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Secondary" aria-label="delete" OnClick="() => OpenDeleteDialog()" /></MudTd>
            </RowTemplate>
        </MudTable>

        <div class="mt-5 d-flex justify-end">
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Style="@($"color:{Colors.Grey.Lighten5}; background:{Colors.BlueGrey.Darken4};")" OnClick="() => SubmitBulkPo()">
                Bulk Submit
            </MudButton>
        </div>
    </MudContainer>
</MudPaper>

@code {
    MemoryStream excelStream;

    public IEnumerable<VendorDTO> Vendors;
    public CreatePODTO createPO = new CreatePODTO();
    public PoProductDTO PoProduct = new PoProductDTO();
    public List<PoProductDTO> products=new List<PoProductDTO>();
    public List<PoProductDTO> poExcelProducts = new List<PoProductDTO>();

    // Form Reference
    private MudForm form;
    private bool Success;

    private string[] Suppliers;
    private string[] Stores;

    protected override async Task OnInitializedAsync()
    {
        await GetVendors();
    }
    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        try
        {
            poExcelProducts.Clear();
            poExcelProducts = await _order.UploadExcelFile(e);
        }
        catch (Exception)
        {
            Console.WriteLine("error");
            throw;
        }
        
    }
    private async Task Download()
    {
            await _order.DownLoadExcel(iJSRuntime);
    }

    private async Task GetVendors()
    {
        Suppliers = await _vendor.GetVendorsNameAsString();
        Stores = await _store.GetStoreNameAsString();
    }

    // Form Submit
    private async Task SubmitPO()
    {
        var vendorId = await _vendor.GetVendor(createPO.vendorName);
        var storeId = await _store.GetStore(createPO.storeName);
        createPO.vendorId = vendorId.vendorId;
        createPO.poRcvStoreId = storeId.storeId;
        createPO.description = "Creating po with out description";
        var purchaseOrder = new PurchaseOrder
            {
                createPODTO = createPO,
                poProductDTOs = products
            };
        var result = await _order.AddPurchaseOrder(purchaseOrder);
        snackbar.Add(result);
        products.Clear();
    }
    private async Task SubmitBulkPo()
    {
        var vendorId = await _vendor.GetVendor(createPO.vendorName);
        var storeId = await _store.GetStore(createPO.storeName);
        createPO.vendorId = vendorId.vendorId;
        createPO.poRcvStoreId = storeId.storeId;
        createPO.description = "Creating po without description";
        var purchaseOrder = new PurchaseOrder
        {
            createPODTO = createPO,
            poProductDTOs = poExcelProducts
        };
        var result = await _order.AddPurchaseOrder(purchaseOrder);
        snackbar.Add(result);
        products.Clear();
    }

    private async Task AddProduct(PoProductDTO poco)
    {
        if (poco != null)
        {
            var product =await _order.AddProduct(poco);
            if (product!=null)
            {
                products.Add(product);
            }
            else
            {
                snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopEnd;
                snackbar.Add("SKU not found", Severity.Error);
            }
        }
        else
        {
            snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopEnd;
            snackbar.Add("Please add valid product", Severity.Warning);
        }
    }

    // Autocomplite Search Func
    private async Task<IEnumerable<string>> SupplierSearch(string value)
    {
        return string.IsNullOrEmpty(value) ? Suppliers : Suppliers.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<string>> StoresSearch(string value)
    {
        return string.IsNullOrEmpty(value) ? Stores : Stores.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    // Delete Item Modal
    private void OpenDeleteDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = false, FullWidth = true, CloseButton = true };
        DialogService.Show<CreatePODeleteModal>("Delete Item?", options);
    }

    // Delete Item Modal
    private void OpenSKUHistoryDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = false, FullWidth = true, CloseButton = true };
        DialogService.Show<CreatePOSKUHistory>("SKU History", options);
    }
}
