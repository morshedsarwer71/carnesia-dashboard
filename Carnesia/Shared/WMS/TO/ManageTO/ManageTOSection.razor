@using Carnesia.Domain.WMS.ManageTO
@using Carnesia.Domain.Common.POCO
@using Carnesia.Domain.WMS.Store.Models;
@inject IManageTo _manageTo
@inject ISnackbar Snackbar
@inject IJSRuntime IJS
@inject IStore _store

<MudPaper Class="px-3 pb-16 pt-10 ma-2 mt-10">
	<MudContainer Fixed="true">
		<MudGrid Class="align-baseline justify-center">
			<MudItem lg="2" md="4">
				<MudDatePicker Label="From Date" @bind-Date="Filter.fromDate" DateFormat="yyyy-MM-dd" />
			</MudItem>
			<MudItem lg="2" md="4">
				<MudDatePicker Label="To Date" @bind-Date="Filter.toDate" DateFormat="yyyy-MM-dd" />
			</MudItem>
			<MudItem lg="2" md="4">
				<MudSelect @bind-Value="Filter.status" Label="Status" AnchorOrigin="Origin.BottomCenter">
					<MudSelectItem Value="0" >All Status</MudSelectItem>
					<MudSelectItem Value="10" >Open</MudSelectItem>
					<MudSelectItem Value="9" >Picklisted</MudSelectItem>
					<MudSelectItem Value="11" >Picked</MudSelectItem>
					<MudSelectItem Value="6" >Received</MudSelectItem>
				</MudSelect>
			</MudItem>
			<MudItem lg="2" md="4">
				<MudSelect @bind-Value="Filter.sourceStore" Label="Source Store" AnchorOrigin="Origin.BottomCenter">
					<MudSelectItem Value="0">All Store</MudSelectItem>
					@foreach (var item in Stores)
					{
						<MudSelectItem Value="item.storeId">@item.storeName</MudSelectItem>
					}
				</MudSelect>
			</MudItem>
			<MudItem lg="2" md="4">
				<MudSelect @bind-Value="Filter.destinationStore" Label="Destination Store" AnchorOrigin="Origin.BottomCenter">
					<MudSelectItem Value="0">All Store</MudSelectItem>
					@foreach (var item in Stores)
					{
						<MudSelectItem Value="item.storeId">@item.storeName</MudSelectItem>
					}
				</MudSelect>
			</MudItem>
			<MudItem lg="2" md="4">
				<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="GetFilteredTos">Filter</MudButton>
				<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="GetTosAll">All</MudButton>
			</MudItem>
		</MudGrid>

		<MudTable RowsPerPage="25" Class="mt-5" Items="@Elements" Dense="@tableCommon.Dense" HorizontalScrollbar="true" Hover="@tableCommon.Hover" Bordered="@tableCommon.Bordered" Striped="@tableCommon.Striped" Loading="Loading" LoadingProgressColor="Color.Info">
			<HeaderContent>
				<MudTh>Created on</MudTh>
				<MudTh>TO ID</MudTh>
				<MudTh>Source Warehouse</MudTh>
				<MudTh>Destination Warehouse</MudTh>
				<MudTh>TO Type</MudTh>
				<MudTh>Status</MudTh>
				<MudTh>Last Updated on</MudTh>
				<MudTh>TO Product Quantity</MudTh>
				<MudTh>Picked QTY.</MudTh>
				<MudTh>Received QTY.</MudTh>
				<MudTh>Not Received QTY.</MudTh>
				<MudTh>Picklist ID</MudTh>
				<MudTh>Reasone</MudTh>
				<MudTh>Action</MudTh>
				<MudTh>Print</MudTh>
			</HeaderContent>
			<RowTemplate>
				<MudTd DataLabel="Created on">@context.createdDate</MudTd>
				<MudTd DataLabel="TO ID" Style="text-decoration: underline; cursor: pointer; color: blue;" @onclick="() => ToDetails(context.toCode)">@context.toCode</MudTd>
				<MudTd DataLabel="Source Warehouse">@context.sourchWh</MudTd>
				<MudTd DataLabel="Destination Warehouse">@context.destinationWh</MudTd>
				<MudTd DataLabel="TO Type">@context.poType</MudTd>
				<MudTd DataLabel="Status">@context.status</MudTd>
				<MudTd DataLabel="Last Updated on">@context.lastUpdate</MudTd>
				<MudTd DataLabel="TO Product Quantity">@context.toQuantity</MudTd>
				<MudTd DataLabel="Picked QTY.">@context.tototalPickedQty</MudTd>
				<MudTd DataLabel="Received QTY.">@context.tototalRcvdQty</MudTd>
				<MudTd DataLabel="Not Received QTY.">@(context.tototalPickedQty - context.tototalRcvdQty)</MudTd>
				<MudTd DataLabel="Picklist ID">
					<p style="text-decoration: underline; cursor: pointer; color: blue;" @onclick="() => printPicklist(context.pickListId)">@context.pickListId</p>
				</MudTd>
					<MudTd DataLabel="Reasone">@context.reasone</MudTd>
				<MudTd DataLabel="Action">
					@if (context.pickListId == null && context.isPickList)
					{
						<MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="context.pickListId != null" OnClick="() => GeneratePicklistId(context.toCode)">Generate Picklist</MudButton>
					}
					@if (context.pickListId != null && context.isPickList)
					{
						<MudButton Variant="Variant.Filled" Color="Color.Error" Disabled="context.pickListId == null" OnClick="() => CancelPicklistId(context.pickListId)">Cancel</MudButton>
					}
				</MudTd>
				<MudTd DataLabel="Print">
					<MudButton Variant="Variant.Filled" Color="Color.Info" Disabled="!context.isPrint" OnClick="() => ToPrints(context.toCode)">Print</MudButton>
				</MudTd>
			</RowTemplate>
			<PagerContent>
				<MudTablePager />
			</PagerContent>
		</MudTable>

		<div class="d-flex flex-wrap mt-4">
			<MudSwitch @bind-Checked="@tableCommon.Hover" Color="Color.Primary">Hover</MudSwitch>
			<MudSwitch @bind-Checked="@tableCommon.Dense" Color="Color.Secondary">Dense</MudSwitch>
			<MudSwitch @bind-Checked="@tableCommon.Striped" Color="Color.Tertiary">Striped</MudSwitch>
			<MudSwitch @bind-Checked="@tableCommon.Bordered" Color="Color.Warning">Bordered</MudSwitch>
		</div>
	</MudContainer>
</MudPaper>

@code {
	// Page On Load
	protected override async Task OnInitializedAsync()
	{
		await GetTos();
		await GetStores();
	}

	// Loading
	private bool Loading { get; set; }

	// Table Customaization
	private TableCommon tableCommon = new TableCommon();

	// Table Content
	private List<ManageToDTO> Elements = new List<ManageToDTO>();

	// Filter Class
	private ManageToFilterDTO Filter = new ManageToFilterDTO();

	// Get Manage To
	private async Task GetTos()
	{
		Loading = true;
		try
		{
			Elements = await _manageTo.GetAllManageTo();
			Loading = false;
		}catch(Exception e)
		{
			Console.WriteLine(e.Message);
			Loading = false;
		}
	}

	// Get All Manage To
	private async Task GetTosAll()
	{
		Loading = true;
		try
		{
			Elements = await _manageTo.GetAllManageToAll();
			Loading = false;
		}
		catch (Exception e)
		{
			Console.WriteLine(e.Message);
			Loading = false;
		}
	}

	// Filter To
	// Get Manage To
	private async Task GetFilteredTos()
	{

		if ((Filter.fromDate != null && Filter.toDate == null) || (Filter.fromDate == null && Filter.toDate != null))
		{
			Snackbar.Add("Please select both from date and to date!", Severity.Error);
			return;
		}

		Loading = true;
		try
		{
			Elements = await _manageTo.GetAllManageTo(Filter);
			Loading = false;
		}
		catch (Exception e)
		{
			Console.WriteLine(e.Message);
			Loading = false;
		}
	}

	// Stores
	private List<StoreDTO> Stores = new List<StoreDTO>();

	// Get Stores
	private async Task GetStores()
	{
		Stores = await _store.GetStoresAsync();
	}

	// Generate Picklist ID
	private async Task GeneratePicklistId(string trnCode)
	{
		try
		{
			await _manageTo.GeneratePicklistID(trnCode);
			Snackbar.Add("Picklist ID Generated Successfully!", Severity.Success);
			await GetTos();
		}
		catch (Exception e)
		{
			Console.WriteLine(e.Message);
			Snackbar.Add("Something Went Wrong!", Severity.Error);
		}
	}

	// Cancel Picklist ID
	private async Task CancelPicklistId(string picklist)
	{
		try
		{
			await _manageTo.CancelPicklist(picklist);
			Snackbar.Add("Picklist ID Cancelled Successfully!", Severity.Success);
			await GetTos();
		}
		catch (Exception e)
		{
			Console.WriteLine(e.Message);
			Snackbar.Add("Something Went Wrong!", Severity.Error);
		}
	}

	// Print Picklist
	private async Task printPicklist(string pickCode)
	{
		await IJS.InvokeAsync<object>("open", new object[] { $"/picklist-print/{pickCode}", "_blank" });
	}

	// To Details
	private async Task ToDetails(string toid)
	{
		await IJS.InvokeAsync<object>("open", new object[] { $"/view-to/{toid}", "_blank" });
	}

	// To Print
	private async Task ToPrints(string toid)
	{
		await IJS.InvokeAsync<object>("open", new object[] { $"/scanned-product/{toid}", "_blank" });
	}
}
