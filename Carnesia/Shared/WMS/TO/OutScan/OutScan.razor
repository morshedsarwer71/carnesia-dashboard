@using Carnesia.Domain.Common.POCO
@using Carnesia.Domain.WMS.OutScan
@inject IManageTo _manageTo
@inject ISnackbar Snackbar

<MudPaper Class="px-3 pb-16 pt-10 ma-2 mt-10">
	<MudContainer Fixed="true">
		<MudText Class="my-3" Typo="Typo.h3">Picklist: @PickListShow</MudText>
		<MudGrid Class="justify-center align-baseline">
			<MudItem md="3">
				<MudTextField @bind-Value="PickList" Immediate="true" OnKeyPress="PickEnter" Label="Picklist ID" Variant="Variant.Text" />
			</MudItem>

			<MudItem md="3">
				<MudTextField @bind-Value="UID" Immediate="true" OnKeyPress="UIDEnter" Label="Scan UID" Variant="Variant.Text" />
			</MudItem>
		</MudGrid>

		<MudGrid Class="justify-center">
			<MudItem md="6" Class="d-flex justify-end">
				<MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="String.IsNullOrEmpty(PickListShow) || String.IsNullOrEmpty(UID)" OnClick="AddProducts">Add</MudButton>
			</MudItem>
		</MudGrid>

		<MudTable Class="mt-5" Items="@Elements" Dense="@tableCommon.Dense" Hover="@tableCommon.Hover" Bordered="@tableCommon.Bordered" Striped="@tableCommon.Striped">
			<HeaderContent>
				<MudTh>Picklist ID</MudTh>
				<MudTh>Product Code</MudTh>
				<MudTh>Product Name</MudTh>
				@*<MudTh>Image</MudTh>*@
				<MudTh>QTY.</MudTh>
				<MudTh>BIN Name</MudTh>
				<MudTh>Picked QTY</MudTh>
				<MudTh>To Be Scanned</MudTh>
			</HeaderContent>
			<RowTemplate>
				<MudTd DataLabel="Picklist ID">@context.pickCode</MudTd>
				<MudTd DataLabel="Product Code">@context.productCode</MudTd>
				<MudTd DataLabel="Product Name">@context.productName</MudTd>
				@*<MudTd DataLabel="Image">
					<MudImage Src="@context.Image" Alt="Product Image" Elevation="25" Class="rounded-lg"/>
					</MudTd>*@
				<MudTd DataLabel="QTY.">@context.quantity</MudTd>
				<MudTd DataLabel="BIN Name">@context.binName</MudTd>
				<MudTd DataLabel="Picked QTY">@context.pickedQty</MudTd>
				<MudTd DataLabel="To Be Scanned">@context.toBeScanned</MudTd>
			</RowTemplate>
			<PagerContent>
				<MudTablePager />
			</PagerContent>
		</MudTable>

		<div class="d-flex flex-wrap mt-4">
			<MudSwitch @bind-Checked="@tableCommon.Hover" Color="Color.Primary">Hover</MudSwitch>
			<MudSwitch @bind-Checked="@tableCommon.Dense" Color="Color.Secondary">Dense</MudSwitch>
			<MudSwitch @bind-Checked="@tableCommon.Striped" Color="Color.Tertiary">Striped</MudSwitch>
			<MudSwitch @bind-Checked="@tableCommon.Bordered" Color="Color.Warning">Bordered</MudSwitch>
		</div>

		<div class="mt-5 d-flex justify-end">
			<MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="String.IsNullOrEmpty(PickListShow)" OnClick="ConfirmPicklist">Submit</MudButton>
		</div>
	</MudContainer>
</MudPaper>

@code {
	// Table Customization
	private TableCommon tableCommon = new TableCommon();

	// Table Content
	private List<NewOutScanProductDTO> Elements = new List<NewOutScanProductDTO>();

	// Picklist & UID
	private string PickList { get; set; }
	private string PickListShow { get; set; }
	private string UID { get; set; }

	// Enter Press
	private async Task PickEnter(KeyboardEventArgs e)
	{
		if (e.Code == "Enter" || e.Code == "NumpadEnter")
		{
			if (!String.IsNullOrEmpty(PickList))
			{
				PickListShow = PickList;
				PickList = String.Empty;
				await GetProductsByPickList();
			}
		}
	}

	private async Task UIDEnter(KeyboardEventArgs e)
	{
		if (e.Code == "Enter" || e.Code == "NumpadEnter")
		{
			if (!String.IsNullOrEmpty(UID) && UID.Length == 15 && !String.IsNullOrEmpty(PickListShow))
			{
				await AddProducts();
			}
		}
	}

	// Add Products
	private async Task AddProducts()
	{
		try
		{
			var result = await _manageTo.GetOutScan(PickListShow, UID);

			if (result.message == "Success")
			{
				Elements = result.data;
				Snackbar.Add(result.message, Severity.Success);
				UID = String.Empty;
				return;
			}
			Snackbar.Add(result.message, Severity.Error);
		}
		catch (Exception e)
		{
			Snackbar.Add("Internal server error!", Severity.Error);
			Console.WriteLine(e.Message);
		}
	}

	// Get Products By Picklist
	private async Task GetProductsByPickList()
	{
		try
		{
			var result = await _manageTo.GetProductsByPickList(PickListShow);

			if (result.Count > 0)
			{
				Elements = result;
				Snackbar.Add("Products found by picklist!", Severity.Success);
				return;
			}
			Snackbar.Add("Picklist id is wrong!", Severity.Error);
		}
		catch (Exception e)
		{
			Snackbar.Add("Internal server error!", Severity.Success);
			Console.WriteLine(e.Message);
		}
	}

	// Confirm Picklist
	private async Task ConfirmPicklist()
	{
		try
		{
			var result = await _manageTo.ConfirmPickList(PickListShow);

			if (result)
			{
				Snackbar.Add("Picklist Confirmed!", Severity.Success);
				return;
			}
			Snackbar.Add("Something went wrong!", Severity.Error);
		}
		catch(Exception e)
		{
			Snackbar.Add("Internal server error!", Severity.Success);
			Console.WriteLine(e.Message);
		}
	}
}
