@using Carnesia.Domain.WMS.BinInscan
@inject IPutAway _away
@inject IBinInscan _binInscan
@inject ISnackbar _snackbar


<MudPaper Class="px-3 py-16 ma-2">
	<MudContainer Fixed="true">
		<div class="mb-15 border-2 ms-auto me-auto" style="width: fit-content;">
			<MudText Class="px-15 py-2" Typo="Typo.h6">Bin Inscan</MudText>
		</div>
		<MudText Class="my-3" Typo="Typo.h3">Bin: @BinNumberUse</MudText>
		<MudGrid Class="justify-center">
			<MudItem sm="3">
				<MudTextField Label="Bin Number" @bind-Value="BinNumber" Immediate="true" Variant="Variant.Text" OnKeyPress="BinEnter" />
			</MudItem>
			<MudItem sm="3">
				<MudTextField Label="UID" @bind-Value="UID" Immediate="true" Variant="Variant.Text" OnKeyPress="UidEnter" />
			</MudItem>
		</MudGrid>

		<MudGrid Class="justify-center">
			<MudItem sm="6" Class="d-flex justify-end">
				<MudButton Variant="Variant.Filled" StartIcon="@Icons.Filled.Add" Color="Color.Primary" OnClick="GetSingleBinInscan">Add</MudButton>
			</MudItem>
		</MudGrid>

		<MudTable Items="@SingleBin" Hover="true" Loading="Loading" LoadingProgressColor="Color.Info">
			<HeaderContent>
				<MudTh>#</MudTh>
				<MudTh>Product Code</MudTh>
				<MudTh>Product Name</MudTh>
				<MudTh>Product SKU</MudTh>
				<MudTh>Input QTY</MudTh>
				<MudTh>BIN</MudTh>
				@*<MudTh>Image</MudTh>*@
			</HeaderContent>
			<RowTemplate>
				<MudTd DataLabel="#">@SetSerial(context)</MudTd>
				<MudTd DataLabel="Product Code">@context.productCode</MudTd>
				<MudTd DataLabel="Product Name">@context.productName</MudTd>
				<MudTd DataLabel="Product SKU">@context.sku</MudTd>
				<MudTd DataLabel="Input QTY">@context.inputQty</MudTd>
				<MudTd DataLabel="BIN">@context.binName</MudTd>
				@*<MudTd DataLabel="Image">
					<MudImage Src="@($"https://cscpguide.com/{context.url}")" Width="50" Height="50" Alt="Swedish Farm House" Elevation="25" Class="rounded-lg" />
					</MudTd>*@
			</RowTemplate>
		</MudTable>
	</MudContainer>
</MudPaper>

<MudPaper Class="px-3 py-16 ma-2">
	<MudContainer Fixed="true">
		<div class="mb-15 border-2 ms-auto me-auto" style="width: fit-content;">
			<MudText Class="px-15 py-2" Typo="Typo.h6">Bulk Bin Inscan</MudText>
		</div>

		<MudGrid Class="justify-center align-baseline mb-5">
			<MudItem md="4">
				<MudTextField T="string" Label="Bin Number" @bind-Value="BinNumber" Variant="Variant.Text" />
			</MudItem>
			<MudItem md="4">
				<MudTextField T="string" Label="PO ID" @bind-Value="PoCode" Variant="Variant.Text" />
			</MudItem>
			<MudItem md="4">
				<MudButton Variant="Variant.Filled" StartIcon="@Icons.Filled.Add" Color="Color.Primary" OnClick="AddBulKBinScan">Add</MudButton>
			</MudItem>
		</MudGrid>

		<MudTable Items="@BulkBinProduct" Hover="true" Loading="BulkLoading">
			<HeaderContent>
				<MudTh>Product Code</MudTh>
				<MudTh>Product Name</MudTh>
				<MudTh>Product SKU</MudTh>
				<MudTh>Input QTY</MudTh>
				<MudTh>BIN</MudTh>
				@*<MudTh>Image</MudTh>*@
			</HeaderContent>
			<RowTemplate>
				<MudTd DataLabel="Product Code">@context.productCode</MudTd>
				<MudTd DataLabel="Product Name">@context.productName</MudTd>
				<MudTd DataLabel="Product SKU">@context.sku</MudTd>
				<MudTd DataLabel="Input QTY">@context.inputQty</MudTd>
				<MudTd DataLabel="BIN">@context.binName</MudTd>
				@*<MudTd DataLabel="Image">
					<MudImage Src="@context.url" Width="50" Height="50" Alt="Product Image" Elevation="25" Class="rounded-lg" />
					</MudTd>*@
			</RowTemplate>
		</MudTable>

		@*<div class="mt-5 d-flex justify-end">
			<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddBuldBinScan">Bulk Submit</MudButton>
			</div>*@
	</MudContainer>
</MudPaper>

@code {
	// Loading
	private bool Loading { get; set; }
	private bool BulkLoading { get; set; }

	//
	public string BinNumber { get; set; }
	public string BinNumberUse { get; set; }
	public string PoCode { get; set; }
	public string UID { get; set; }

	// Table Content
	private List<BinInscanProductDTO> SingleBin = new List<BinInscanProductDTO>();
	private List<BinInscanProductDTO> BulkBinProduct = new List<BinInscanProductDTO>();

	// Get Single Bin
	private async Task GetSingleBinInscan()
	{
		Loading = true;
		try
		{
			var result = await _binInscan.GetSingleBinInscan(UID, BinNumberUse);

			if (result.message == "UID inserted in bin")
			{
				bool isThere = SingleBin.Any(x => x.productCode == result.Product.productCode && x.binName == result.Product.binName);

				if (isThere)
				{
					int ProductIndex = SingleBin.FindIndex(x => x.productCode == result.Product.productCode && x.binName == result.Product.binName);
					SingleBin[ProductIndex].inputQty += 1;
					_snackbar.Add(result.message, Severity.Success);
					UID = String.Empty;
					Loading = false;
					return;
				}

				result.Product.inputQty = 1;

				SingleBin.Add(result.Product);
				_snackbar.Add(result.message, Severity.Success);
				UID = String.Empty;
				Loading = false;
				return;
			}

			_snackbar.Add(result.message, Severity.Error);
			Loading = false;

		}
		catch (Exception)
		{
			_snackbar.Add("Something went wrong!", Severity.Error);
			Loading = false;
		}
	}

	// Press Enter
	private async Task BinEnter(KeyboardEventArgs e)
	{
		if (e.Code == "Enter" || e.Code == "NumpadEnter" || e.Code == "13")
		{
			if (!String.IsNullOrEmpty(BinNumber))
			{
				BinNumberUse = BinNumber;
				BinNumber = String.Empty;
			}
		}
	}

	private async Task UidEnter(KeyboardEventArgs e)
	{
		if (e.Code == "Enter" || e.Code == "NumpadEnter")
		{
			if (!String.IsNullOrEmpty(UID) && UID.Length == 15 && !String.IsNullOrEmpty(BinNumberUse))
			{
				await GetSingleBinInscan();
			}
		}
	}

	private async Task AddBulKBinScan()
	{
		BulkLoading = true;
		try
		{
			var result = await _away.BulkBinInscan(PoCode, BinNumber);
			_snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopEnd;
			_snackbar.Add(result.message, Severity.Success);
			if (result.Products != null)
			{
				//BinNumber = "";
				PoCode = "";
				BinNumber = "";
				BulkBinProduct = result.Products;
				BulkLoading = false;
			}
			else
			{
				_snackbar.Add("Bin Capacity full", Severity.Warning);
				BulkLoading = false;
			}
		}
		catch (Exception e)
		{
			_snackbar.Add("Bin Capacity full", Severity.Warning);
			BulkLoading = false;
			//Console.WriteLine(e);
			//throw;
		}
	}

	// Serial
	private int SetSerial(BinInscanProductDTO Item)
	{
		int ItemIndex = SingleBin.FindIndex(x => x.productCode == Item.productCode && x.binName == Item.binName);

		return ItemIndex + 1;
	}

}