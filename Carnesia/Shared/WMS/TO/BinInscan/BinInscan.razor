@using Carnesia.Domain.WMS.BinInscan
@inject IPutAway _away
@inject IBinInscan _binInscan
@inject ISnackbar _snackbar


<MudPaper Class="px-16 pb-16 pt-10 ma-2 mt-10">
	<MudContainer Fixed="true">
		<div class="mb-15 border-2 ms-auto me-auto" style="width: fit-content;">
			<MudText Class="px-15 py-2" Typo="Typo.h6">Bin Inscan</MudText>
		</div>
		<MudGrid Class="justify-center">
			<MudItem sm="3">
				<MudTextField Label="Bin Number" @bind-Value="BinNumber" Variant="Variant.Text" />
			</MudItem>
			<MudItem sm="3">
				<MudTextField Label="UID" Value="UID" ValueChanged="(string s) => ScanUID(s)" Variant="Variant.Text" />
			</MudItem>
		</MudGrid>

		<MudGrid Class="justify-center">
			<MudItem sm="6" Class="d-flex justify-end">
				<MudButton Variant="Variant.Filled" StartIcon="@Icons.Filled.Add" Color="Color.Primary" OnClick="GetSingleBinInscan">Add</MudButton>
			</MudItem>
		</MudGrid>

		<MudTable Items="@SingleBin" Hover="true">
			<HeaderContent>
				<MudTh>Item Code</MudTh>
				<MudTh>Product Name</MudTh>
				<MudTh>Input QTY</MudTh>
				<MudTh>BIN</MudTh>
				<MudTh>Image</MudTh>
			</HeaderContent>
			<RowTemplate>
				<MudTd DataLabel="Item Code">@context.sku</MudTd>
				<MudTd DataLabel="Product Name">@context.productName</MudTd>
				<MudTd DataLabel="Input QTY">@context.inputQty</MudTd>
				<MudTd DataLabel="BIN">@context.binName</MudTd>
				<MudTd DataLabel="Image">
					<MudImage Src="@($"https://carnesiaapi.bespokeit.io/{context.url}")" Width="50" Height="50" Alt="Swedish Farm House" Elevation="25" Class="rounded-lg" />
				</MudTd>
			</RowTemplate>
		</MudTable>
	</MudContainer>
</MudPaper>

<MudPaper Class="px-16 pb-16 pt-10 ma-2 mt-10">
	<MudContainer Fixed="true">
		<div class="mb-15 border-2 ms-auto me-auto" style="width: fit-content;">
			<MudText Class="px-15 py-2" Typo="Typo.h6">Bulk Bin Inscan</MudText>
		</div>

		<MudGrid Class="justify-center align-baseline mb-5">
			<MudItem md="4">
				<MudTextField T="string" Label="Bin Number" @bind-Value="BinNumber" Variant="Variant.Text" />
			</MudItem>
			<MudItem md="4">
				<MudTextField T="string" Label="PO ID" @bind-Value="PoCode" Variant="Variant.Text" />
			</MudItem>
			<MudItem md="4">
				<MudButton Variant="Variant.Filled" StartIcon="@Icons.Filled.Add" Color="Color.Primary" OnClick="AddBulKBinScan">Add</MudButton>
			</MudItem>
		</MudGrid>

		<MudTable Items="@BulkBinProduct" Hover="true">
			<HeaderContent>
				<MudTh>Item Code</MudTh>
				<MudTh>Product Name</MudTh>
				<MudTh>Input QTY</MudTh>
				<MudTh>BIN</MudTh>
				<MudTh>Image</MudTh>
			</HeaderContent>
			<RowTemplate>
				<MudTd DataLabel="Item Code">@context.sku</MudTd>
				<MudTd DataLabel="Product Name">@context.productName</MudTd>
				<MudTd DataLabel="Input QTY">@context.inputQty</MudTd>
				<MudTd DataLabel="BIN">@context.binName</MudTd>
				<MudTd DataLabel="Image">
					<MudImage Src="@context.url" Width="50" Height="50" Alt="Product Image" Elevation="25" Class="rounded-lg" />
				</MudTd>
			</RowTemplate>
		</MudTable>

		@*<div class="mt-5 d-flex justify-end">
			<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddBuldBinScan">Bulk Submit</MudButton>
			</div>*@
	</MudContainer>
</MudPaper>

@code {
	public string BinNumber { get; set; }
	public string PoCode { get; set; }
	public string UID { get; set; }
	// Table Content

	private List<BinInscanProductDTO> SingleBin = new List<BinInscanProductDTO>();
	private List<BinInscanProductDTO> BulkBinProduct = new List<BinInscanProductDTO>();

	// Scan UID
	private async Task ScanUID(string s)
	{
		UID = s;
		if (s.Length == 15 && !String.IsNullOrEmpty(BinNumber))
		{
			await GetSingleBinInscan();
		}
	}

	// Get Single Bin
	private async Task GetSingleBinInscan()
	{
		try
		{
			var result = await _binInscan.GetSingleBinInscan(UID, BinNumber);

			if (result.message == "UID inserted in bin")
			{
				bool isThere = SingleBin.Any(x => x.productCode == result.Product.productCode);

				if (isThere)
				{
					int binIndex = SingleBin.FindIndex(x => x.productCode == result.Product.productCode);

					SingleBin[binIndex].inputQty += result.Product.inputQty;
					_snackbar.Add(result.message, Severity.Success);
					return;
				}

				SingleBin.Add(result.Product);
				_snackbar.Add(result.message, Severity.Success);
				return;
			}
			_snackbar.Add(result.message, Severity.Error);

		}
		catch (Exception)
		{
			_snackbar.Add("Something went wrong!", Severity.Error);
		}
	}

	private async Task AddBulKBinScan()
	{
		try
		{
			var result = await _away.BulkBinInscan(PoCode, BinNumber);
			_snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopEnd;
			_snackbar.Add(result.message, Severity.Success);
			if (result.Products != null)
			{
				//BinNumber = "";
				PoCode = "";
				BinNumber = "";
				BulkBinProduct = result.Products;
			}
			else
			{
				_snackbar.Add("Bin Capacity full", Severity.Warning);
			}
		}
		catch (Exception e)
		{
			_snackbar.Add("Bin Capacity full", Severity.Warning);
			//Console.WriteLine(e);
			//throw;
		}
	}

}

}