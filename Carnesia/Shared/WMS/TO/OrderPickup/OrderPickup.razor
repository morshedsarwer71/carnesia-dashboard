@using Carnesia.Domain.WMS.TO.POCO
@using Carnesia.Domain.Common.POCO
@inject IDialogService DialogService

<MudPaper Class="px-16 pb-16 pt-10 ma-2 mt-10">
	<MudContainer Fixed="true">
		<MudGrid Class="align-baseline mb-5">
			<MudItem md="3" sm="6">
				<MudTextField @bind-Value="orderPickupFilter.orderId" Label="Order Id" Variant="Variant.Text" />
			</MudItem>

			<MudItem md="3" sm="6">
				<MudAutocomplete T="string" Label="Suggested Outlet" @bind-Value="orderPickupFilter.outlet" SearchFunc="@AutoCompleteSearch" ResetValueOnEmptyText="true" />
			</MudItem>

			<MudItem md="3" sm="6">
				<MudTextField @bind-Value="orderPickupFilter.sku" Label="SKU" Variant="Variant.Text" />
			</MudItem>

            <MudItem md="3" sm="6">
				<MudTextField @bind-Value="orderPickupFilter.productCode" Label="Product Code" Variant="Variant.Text" />
			</MudItem>
		</MudGrid>

        <div class="d-flex justify-end mt-3">
                <MudButton Variant="Variant.Filled" Color="Color.Primary">Filter</MudButton>
        </div>

        <div>
            <MudText Typo="Typo.subtitle1">Total Quantity Added: 430</MudText>
        </div>

		<MudTable RowsPerPage="25" Items="@Elements" Dense="@tableCommon.Dense" Hover="@tableCommon.Hover" Bordered="@tableCommon.Bordered" Striped="@tableCommon.Striped" MultiSelection="true" @bind-SelectedItems="SelectedOrders">
            <HeaderContent>
                <MudTh></MudTh>
                <MudTh>SKU</MudTh>
                <MudTh>Product Name</MudTh>
                <MudTh>Quantity</MudTh>
                <MudTh>Suggested Outlet</MudTh>
                <MudTh>Order IDs</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="">
                    @if (!context.ShowDetails)
					{
						<MudIconButton Icon="@Icons.Material.Filled.Add" aria-label="Show" OnClick="() => ShowBtnPress(context.sku)" />
					}
					else if (context.ShowDetails)
					{
						<MudIconButton Icon="@Icons.Filled.Minimize" aria-label="Hide" OnClick="() => ShowBtnPress(context.sku)" />
					}
                </MudTd>
                <MudTd DataLabel="SKU">@context.sku</MudTd>
                <MudTd DataLabel="Product Name">@context.productName</MudTd>
                <MudTd DataLabel="Quantity">@context.quantity</MudTd>
                <MudTd DataLabel="Suggested Outlet">@context.outlets</MudTd>
                <MudTd DataLabel="Order IDs">
                    <MudMenu Icon="@Icons.Filled.RemoveRedEye">
                        @foreach (var ID in context.orderIds)
                        {
                            <MudMenuItem>@ID</MudMenuItem>
                        }
                    </MudMenu>
                </MudTd>
            </RowTemplate>
            <ChildRowContent>
				@if (context.ShowDetails)
				{
					<td colspan="17">
						<MudCard Elevation="0">
							<MudCardContent Class="pa-0">
								<MudTable Items="@context.details" Context="DetailsContext" Hover="true" Elevation="0">
								   <HeaderContent>
										<MudTh>Outlet</MudTh>
										<MudTh>Stock</MudTh>
										<MudTh>Request QTY.</MudTh>
										<MudTh>Action</MudTh>
								   </HeaderContent>
								   <RowTemplate>
										<MudTd DataLabel="Outlet">@DetailsContext.outlet</MudTd>
										<MudTd DataLabel="Stock">@DetailsContext.stock</MudTd>
										<MudTd DataLabel="Request QTY">@DetailsContext.requestQTY</MudTd>
										<MudTd DataLabel="Action">
                                            <MudButton Variant="Variant.Filled" Color="Color.Primary">Add</MudButton>
                                        </MudTd>
								   </RowTemplate>
								</MudTable>
							</MudCardContent>
						</MudCard>
					</td>
				}
			</ChildRowContent>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>

        <div class="d-flex flex-wrap mt-4">
            <MudSwitch @bind-Checked="@tableCommon.Hover" Color="Color.Primary">Hover</MudSwitch>
            <MudSwitch @bind-Checked="@tableCommon.Dense" Color="Color.Secondary">Dense</MudSwitch>
            <MudSwitch @bind-Checked="@tableCommon.Striped" Color="Color.Tertiary">Striped</MudSwitch>
            <MudSwitch @bind-Checked="@tableCommon.Bordered" Color="Color.Warning">Bordered</MudSwitch>
        </div>

        <div class="d-flex justify-end mt-5">
            <MudButton Color="Color.Primary" Variant="Variant.Filled">Submit</MudButton>
        </div>
	</MudContainer>
</MudPaper>

@code {
    // Table Customization
    private TableCommon tableCommon = new TableCommon();

    // Table Content
    private IEnumerable<OrderPickupTablePoco> Elements = new List<OrderPickupTablePoco>();

    // Selected Order
    private HashSet<OrderPickupTablePoco> SelectedOrders = new HashSet<OrderPickupTablePoco>();

	// Filter 
	private OrderPickupFilterPoco orderPickupFilter = new OrderPickupFilterPoco();

	// Autocomplete Temp Data
	private string[] states =
    {
        "Alabama", "Alaska", "American Samoa", "Arizona",
        "Arkansas", "California", "Colorado", "Connecticut",
        "Delaware", "District of Columbia", "Federated States of Micronesia",
        "Florida", "Georgia", "Guam", "Hawaii", "Idaho",
        "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky",
        "Louisiana", "Maine", "Marshall Islands",
	};

	// Autocomplete Search Function
	private async Task<IEnumerable<string>> AutoCompleteSearch(string value)
    {
        // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
            return states;
        return states.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    	// Show Details
	private void ShowBtnPress(string sku)
	{
		OrderPickupTablePoco tmpElements = Elements.First(f => f.sku == sku);
		tmpElements.ShowDetails = !tmpElements.ShowDetails;
	}
}
