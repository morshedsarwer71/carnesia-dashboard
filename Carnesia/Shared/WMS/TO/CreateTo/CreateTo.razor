@using Carnesia.Domain.WMS.TO.POCO
@using Carnesia.Domain.WMS.Store.Models
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IStore _store
@inject ICreateTo _createTo

<MudPaper Class="pa-16 ma-2" Elevation="1">
	<MudContainer Fixed="true">
		<MudGrid Class="justify-center">
			<MudItem xs="12" sm="6" md="3">
				<MudSelect @bind-Value="SourceID" Label="Source Store" AnchorOrigin="Origin.BottomCenter">
					<MudSelectItem Value="0">Select Store</MudSelectItem>
					@foreach (var item in Stores)
					{
						<MudSelectItem Value="item.storeId">@item.storeName</MudSelectItem>
					}
				</MudSelect>
			</MudItem>
			<MudItem xs="12" sm="6" md="3">
				<MudSelect @bind-Value="DestinationID" Label="Destination Store" AnchorOrigin="Origin.BottomCenter">
					<MudSelectItem Value="0">Select Store</MudSelectItem>
					@foreach (var item in Stores)
					{
						<MudSelectItem Value="item.storeId">@item.storeName</MudSelectItem>
					}
				</MudSelect>
			</MudItem>
		</MudGrid>
	</MudContainer>
</MudPaper>

<MudPaper Class="px-16 pb-16 pt-10 ma-2 mt-10">
	<MudContainer Fixed="true">
		<div class="mb-15 border-2 ms-auto me-auto" style="width: fit-content;">
			<MudText Class="px-15 py-2" Typo="Typo.h6">Transfer Order</MudText>
		</div>

		<MudGrid>
			<MudItem md="6">
				<MudTextField Immediate="true" @bind-Value="createToInput.sku" Label="SKU" Variant="Variant.Text" Required="true" RequiredError="SKU is required!" />
			</MudItem>

			<MudItem md="6">
				<MudNumericField Immediate="true" @bind-Value="createToInput.quantity" Label="Quantity" Variant="Variant.Text" Required="true" RequiredError="Quantity is required!" />
			</MudItem>
		</MudGrid>
		<div class="mt-5 d-flex justify-end">
			<MudButton Variant="Variant.Filled" StartIcon="@Icons.Filled.Add" Color="Color.Primary" Disabled="String.IsNullOrEmpty(createToInput.sku) || createToInput.quantity <= 0 || SourceID == 0 || DestinationID == 0" OnClick="GetProduct">
				Add
			</MudButton>
		</div>

		<MudTable Items="@manualAddProducts" Class="mt-5">
			<HeaderContent>
				<MudTh>SKU</MudTh>
				<MudTh>Product Name</MudTh>
				<MudTh>Product Code</MudTh>
				<MudTh>Destination WH Stock</MudTh>
				<MudTh>Source WH stock</MudTh>
				<MudTh>Transfer Qty</MudTh>
				<MudTh>Action</MudTh>
			</HeaderContent>
			<RowTemplate>
				<MudTd DataLabel="SKU">@context.sku</MudTd>
				<MudTd DataLabel="Product Name">@context.productName</MudTd>
				<MudTd DataLabel="Product Code">@context.productCode</MudTd>
				<MudTd DataLabel="Destination WH Stock">@context.destinationStock</MudTd>
				<MudTd DataLabel="Source WH stock">@context.sourceStock</MudTd>
				<MudTd DataLabel="Transfer Qty">@context.quantity</MudTd>
				<MudTd DataLabel="Action"><MudIconButton OnClick="() => DeleteManual(context)" Icon="@Icons.Material.Filled.Delete" Color="Color.Secondary" aria-label="delete" /></MudTd>
			</RowTemplate>
		</MudTable>

		<div class="mt-5 d-flex justify-end">
			<MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Style="@($"color:{Colors.Grey.Lighten5}; background:{Colors.BlueGrey.Darken4};")" OnClick="() => CreateNewTo(manualAddProducts)" >
				Submit
			</MudButton>
		</div>
	</MudContainer>
</MudPaper>

<MudPaper Class="px-16 pb-16 pt-10 ma-2 mt-10">
	<MudContainer Fixed="true">
		<div class="mb-15 border-2 ms-auto me-auto" style="width: fit-content;">
			<MudText Class="px-15 py-2" Typo="Typo.h6">Bulk Transfer Order</MudText>
		</div>

		<div class="d-flex justify-center">
			<a href="./BulkStockTransfer.xlsx" download target="_top">
				<MudButton Class="me-3" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ArrowDownward" Style="background-color: yellowgreen; color: white;">
					Download CSV Template
				</MudButton>
			</a>

			<InputFile id="fileInput" OnChange="UploadBulk" hidden />
			<MudButton HtmlTag="label"
					   Variant="Variant.Filled"
					   Color="Color.Primary"
					   StartIcon="@Icons.Filled.CloudUpload"
					   Disabled="SourceID == 0 || DestinationID == 0"
					   for="fileInput">
				Upload Files
			</MudButton>
		</div>

		<MudTable Items="@bulkAddProducts" Class="mt-5" Loading="BulkLoading" LoadingProgressColor="Color.Info">
			<HeaderContent>
				<MudTh>SKU</MudTh>
				<MudTh>Product Name</MudTh>
				<MudTh>Product Code</MudTh>
				<MudTh>Destination WH Stock</MudTh>
				<MudTh>Source WH stock</MudTh>
				<MudTh>Transfer Qty</MudTh>
				@*<MudTh>Action</MudTh>*@
			</HeaderContent>
			<RowTemplate>
				<MudTd DataLabel="SKU">@context.sku</MudTd>
				<MudTd DataLabel="Product Name">@context.productName</MudTd>
				<MudTd DataLabel="Product Code">@context.productCode</MudTd>
				<MudTd DataLabel="Destination WH Stock">@context.destinationStock</MudTd>
				<MudTd DataLabel="Source WH stock">@context.sourceStock</MudTd>
				<MudTd DataLabel="Transfer Qty">@context.quantity</MudTd>
				@*<MudTd DataLabel="Action"><MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Secondary" aria-label="delete" /></MudTd>*@
			</RowTemplate>
		</MudTable>

		<div class="mt-5 d-flex justify-end">
			<MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Style="@($"color:{Colors.Grey.Lighten5}; background:{Colors.BlueGrey.Darken4};")" OnClick="() => CreateNewTo(bulkAddProducts)">
				Bulk Submit
			</MudButton>
		</div>
	</MudContainer>
</MudPaper>

@code {
	// Page On Load
	protected override async Task OnInitializedAsync()
	{
		await GetStores();
	}

	// Bulk Loading
	private bool BulkLoading { get; set; }

	// Stores ID
	private int DestinationID { get; set; }
	private int SourceID { get; set; }

	// Input Class
	public CreateToInputPoco createToInput = new CreateToInputPoco();

	// Manual Add
	private List<CreateToProductPoco> manualAddProducts = new List<CreateToProductPoco>();

	// Bulk Add
	private List<CreateToProductPoco> bulkAddProducts = new List<CreateToProductPoco>();

	// Stores
	private List<StoreDTO> Stores = new List<StoreDTO>();

	// Get Stores
	private async Task GetStores()
	{
		Stores = await _store.GetStoresAsync();
	}

	// Get Product For Manual Incert
	private async Task GetProduct()
	{
		try
		{
			var result = await _createTo.GetProduct(SourceID, DestinationID, createToInput.sku);

			if (result.data != null)
			{
				bool isThere = manualAddProducts.Any(x => x.productCode == result.data.productCode);

				if (isThere)
				{
					int pIndex = manualAddProducts.FindIndex(x => x.productCode == result.data.productCode);

					manualAddProducts[pIndex].quantity += createToInput.quantity;
					Snackbar.Add(result.message, Severity.Success);
					createToInput.sku = String.Empty;
					createToInput.quantity = 0;
					return;
				}

				result.data.quantity = createToInput.quantity;
				manualAddProducts.Add(result.data);
				Snackbar.Add(result.message, Severity.Success);
				createToInput.sku = String.Empty;
				createToInput.quantity = 0;
				return;
			}
			Snackbar.Add(result.message, Severity.Error);
		}
		catch (Exception)
		{
			Snackbar.Add("Something Went Wrong!", Severity.Error);
		}
	}

	// Upload XLSX
	private async Task UploadBulk(InputFileChangeEventArgs e)
	{
		BulkLoading = true;
		try
		{
			bulkAddProducts = await _createTo.GetBulkProducts(SourceID, DestinationID, e);
			BulkLoading = false;
		}
		catch (Exception err)
		{
			Console.WriteLine(err.Message);
			BulkLoading = false;
			Snackbar.Add("Error!", Severity.Error);
		}
	}

	// New To
	private NewToPoco newTo = new NewToPoco();
	private async Task CreateNewTo(List<CreateToProductPoco> products)
	{
		var toDetails = new CreateStockTransferPoco { fromStoreId = SourceID, toStoreId = DestinationID, totalSKUQty = products.Count };
		newTo.createStockTransferDTO = toDetails;
		newTo.transferProductDTOs = products;
		try
		{
			var result = await _createTo.NewTo(newTo);

			if (result.message == "Stock Transfer is created")
			{
				Snackbar.Add(result.message, Severity.Success);
				newTo = new NewToPoco();
				return;
			}
			Snackbar.Add(result.message, Severity.Error);
		}
		catch(Exception e)
		{
			Snackbar.Add("Something Went Wrong!", Severity.Error);
			Console.WriteLine(e.Message);
		}
	}

	// Delete Item Modal
	private void DeleteManual(CreateToProductPoco product)
	{
		manualAddProducts.Remove(product);
		Snackbar.Add("Product Removed Successfully!", Severity.Success);
	}
}
