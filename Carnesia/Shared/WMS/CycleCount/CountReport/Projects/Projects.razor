@page "/projects"

@using Carnesia.Domain.Common.POCO
@using Carnesia.Domain.WMS.Projects
@inject IProjects _project
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime IJS
@inject NavigationManager Navigation

<MudPaper Class="ma-2 px-3 py-16">
	<MudContainer Fixed="true">
		<MudTable RowsPerPage="25" Items="@Elements" Dense="@tableCommon.Dense" Hover="@tableCommon.Hover" Bordered="@tableCommon.Bordered" Striped="@tableCommon.Striped" Loading="Loading" LoadingProgressColor="Color.Info" Filter="new Func<ProjectsDTO,bool>(FilterFuncInitial)">
			<ToolBarContent>
				<MudSpacer />
				<MudSpacer />
				<MudTextField @bind-Value="tableCommon.SearchTerm" Immediate="true" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" />
			</ToolBarContent>
			<HeaderContent>
				<MudTh>Create Date</MudTh>
				<MudTh>Store</MudTh>
				<MudTh>Project#</MudTh>
				<MudTh>View</MudTh>
				<MudTh>Type</MudTh>
				<MudTh>Status</MudTh>
				<MudTh>Status Updates On</MudTh>
				<MudTh>Created By</MudTh>
				<MudTh>Action</MudTh>
			</HeaderContent>
			<RowTemplate>
				<MudTd DataLabel="Create Date">@context.createDate</MudTd>
				<MudTd DataLabel="Store">@context.storeName</MudTd>
				<MudTd DataLabel="Project#">@context.projectCode</MudTd>
				<MudTd DataLabel="View">
					<MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Primary" OnClick="() => GoToDetails(context.projectType, context.projectCode)">View</MudButton>
				</MudTd>
				<MudTd DataLabel="Type">@context.projectType</MudTd>
				<MudTd DataLabel="Status">@context.status</MudTd>
				<MudTd DataLabel="Status Updates On">@context.lastUpdateDate</MudTd>
				<MudTd DataLabel="Created By">@context.createdBy</MudTd>
				<MudTd DataLabel="Action">
					<MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Warning" Disabled="@(context.projectType != null || context.status != "Open")" OnClick="() => OpenUpdateModal(context.id, context.projectType)">Edit</MudButton>
					<MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Primary" Disabled="@(context.status != "Open")" OnClick="() => OnepCompleteModal(context.projectCode)">Complete</MudButton>
				</MudTd>
			</RowTemplate>
			<PagerContent>
				<MudTablePager />
			</PagerContent>
		</MudTable>

		<div class="d-flex flex-wrap mt-4">
			<MudSwitch @bind-Checked="@tableCommon.Hover" Color="Color.Primary">Hover</MudSwitch>
			<MudSwitch @bind-Checked="@tableCommon.Dense" Color="Color.Secondary">Dense</MudSwitch>
			<MudSwitch @bind-Checked="@tableCommon.Striped" Color="Color.Tertiary">Striped</MudSwitch>
			<MudSwitch @bind-Checked="@tableCommon.Bordered" Color="Color.Warning">Bordered</MudSwitch>
		</div>
	</MudContainer>
</MudPaper>

@code {
	// Page On Load
	protected override async Task OnInitializedAsync()
	{
		await GetAllProjects();
	}

	// Loading
	private bool Loading { get; set; }

	// Table Customaization
	private TableCommon tableCommon = new TableCommon();

	// Table Content
	private List<ProjectsDTO> Elements = new List<ProjectsDTO>();

	// Get All Projects
	private async Task GetAllProjects()
	{
		Loading = true;
		try
		{
			Elements = await _project.GetAllProjects();
			Loading = false;
		}
		catch (Exception e)
		{
			Console.WriteLine(e.Message);
			Loading = false;
		}
	}

	// Update Project Type
	private async Task OpenUpdateModal(int id, string type)
	{
		var parameters = new DialogParameters();
		parameters.Add("FormData", new UpdateProjectDTO { id = id, projectType = type });

		var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
		var dialog = await DialogService.Show<ProjectUpdateModal>("Update Project", parameters, options).Result;

		if (dialog.Data != null)
		{
			UpdateProjectDTO updatedProject = dialog.Data as UpdateProjectDTO;

			try
			{
				var result = await _project.UpdateProject(updatedProject);
				if (result)
				{
					Snackbar.Add("Project Updated Successfully!", Severity.Success);
					await GetAllProjects();
					return;
				}
				Snackbar.Add("Project Update Failed!", Severity.Error);
			}
			catch (Exception e)
			{
				Snackbar.Add("Internal Server Error!", Severity.Error);
				Console.WriteLine(e.Message);
			}
		}
	}

	// Complete Project
	private async Task CompleteProject(string pCode)
	{
		Loading = true;
		try
		{
			var result = await _project.CompleteProject(pCode);

			if (result.message == "Success")
			{
				Snackbar.Add("Project Completed Successfully!", Severity.Success);
				Loading = false;
				return;
			}

			Snackbar.Add(result.message, Severity.Error);
			Loading = false;
		}
		catch(Exception e)
		{
			Snackbar.Add("Internal Server Error!", Severity.Error);
			Loading = false;
		}
	}

	private async Task OnepCompleteModal(string pcode)
	{
		var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, CloseButton = true, };
		var dialog = await DialogService.Show<ProjectCompleteModal>("Complete Project", options).Result;

		if (!dialog.Cancelled)
		{
			await CompleteProject(pcode);
			await GetAllProjects();
		}
	}

	// Table Search
	private bool FilterFuncInitial(ProjectsDTO element) => FilterFunc(element, tableCommon.SearchTerm);

	private bool FilterFunc(ProjectsDTO element, string searchString)
	{
		if (string.IsNullOrWhiteSpace(searchString))
			return true;
		if (element.storeName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		if (element.projectCode.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		if (element.status.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		if (element.projectType.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		return false;
	}

	// Go To Details
	private async Task GoToDetails(string type, string pCode)
	{
		if (type == "BIN")
		{
			Navigation.NavigateTo($"/bin/{pCode}");
			return;
		}
		if (type == "SKU")
		{
			Navigation.NavigateTo($"/sku/{pCode}");
			return;
		}
		if (type == "PO")
		{
			Navigation.NavigateTo($"/po/{pCode}");
			return;
		}
	}
}
